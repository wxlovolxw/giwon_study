
내 IP주소 220.126.70.201

시작+r -> cmd

mysql -uroot -p
rldnjsrhwk2!

-> database : 데이터가 실질적으로 적재되는 테이블들을 분류하는 상위 개념

	생성 : CREATE DATABASE `데이터베이스명` CHARACTER SET utf8 COLLATE utf8_general_ci;

	삭제 : DROP DATABASE `데이터베이스명`;

	열람 : SHOW DATABASES; 모든 데이터베이스들 나열

	선택 : USE `데이터베이스명` 해당 데이터베이스 안으로 들어가기

->table : 데이터가 실질적으로 저장되는 저장소
	스키마(schema) : 적재될 데이터의 구조과 형식을 정의

	생성 : CREATE TABLE table_name (
    		칼럼명1 data_type,
    		칼럼명2 data_type
		)

	열람 : SHOW tables;

	스키마 열람 :DESC '테이블명'

	테이블 제거 : DROP TABLE `테이블명`

	* 데이터 삽입 
	INSERT INTO table_name VALUES (value1, value2, value3,...) -> 순서 고정
	INSERT INTO table_name (column1, column2, column3,...) VALUES (value1, value2, 	value3,...) -> 앞에 컬럼을 바꾸면 순서를 바꿀 수 있음.

	*데이터 변경
	UPDATE 테이블명 SET 컬럼1=컬럼1의 값, 컬럼2=컬럼2의 값 WHERE 대상이 될 컬		럼명=컬럼의 값

	*데이터 삭제
	DELETE FROM 테이블명 [WHERE 삭제하려는 칼럼 명=값] -> 뒤에 where을 안 넣으		면 테이블 내의 데이터 전체 삭제 = TRUNCATE와 같다.

	*데이터 조회
	SELECT 칼럼명1, 칼럼명2 
    	[FROM 테이블명 ] 
    	[GROUP BY 칼럼명] 
   	[ORDER BY 칼럼명 [ASC | DESC]] 
   	[LIMIT offset, 조회 할 행의 수]
 
	limit -> 가져올 행의 갯수 지정. -> 랜덤이 아니라 순서대로.
	-> 첫번째 숫자는 offset->순서. 두번째 순서 행의 갯수.

	and 그리고, or 혹은

	*데이터 그룹핑
	SELECT * FROM 테이블명 GROUP BY 그룹핑 할 기준 칼럼명

	*데이터 정렬
	SELECT * FROM 테이블명 ORDER BY 정렬의 기준으로 사용할 열 [DESC | ASC]

	desc-> 내림차순, asc-> 올림차순

	*index : 색인, 조회할 때 원하는 행을 빠르게 찾을 수 있게 준비해둔 데이터

		primary: 중복되지 않는 유일한 키, 딱 하나만.
		normal : 중복을 허용하는 인덱스
		unique : 중복을 허용하지 않는 유일한 키
		foreign : 다른 테이블과의 관계성을 부여하는 키
		full text : 자연어 검색, myisam에서만 지원
		-> SELECT introduction, MATCH(introduction) AGAINST('영문과에') 	FROM student WHERE 		MATCH (introduction) AGAINST('영문과에');
		MYISAM 에서만 사용 가능.

		-> 키 = 인덱스
		중복키 : 하나의 키에 여러개의 칼럼을 포함. -> 자주 검색하는 경우



	*JOIN -> OUTTER (LEFT, RIGHT)   <- 벤다이어그램과 같이 생각하면 될듯.
		LEFT -> 테이블의 별칭을 붙인 후 조인
			왼쪽의 테이블(기준)으로 오른쪽의 테이블을 조인한다.
			ON = 같게 해주는 조건
		SELECT s.name, s.location_id, l.name AS address, l.distance  
		FROM student AS s 
		LEFT JOIN location AS l 
		ON s.location_id = l.id;
		
		왼쪽이 student, s->student 테이블의 별명. l->location 테이블의 별명
		AS -> 로 표시(이름을 변경하여 표시).

		
		순서 : 테이블 컬럼 순으로 나열 / FROM 하고 별칭(왼쪽 먼저) /LEFT JOIN/
		오른쪽 별치/ ON 조건(같은거)

		INNER : 조건에 부합하는 내용이 없으면 데이터를 표시하지 않는다.
			<-> OUTER 없으면 NULL로서 표시.

-> 사용자 권한 : 사용자에 따라서 접근할 수 있는 데이터와 사용할 수 있는 기능을 제한
	GRANT
	GRANT 권한 ON 데이터베이스.테이블 TO '아이디'@'호스트' IDENTIFIED BY '비밀번	호'

	권한 열람 -> SHOW GRANTS FOR 사용자;

	권한 제거 -> REVOKE 권한 ON 데이터베이스.테이블 FROM 사용자

	사용자 삭제 -> DROP USER user [, user] ...


* -> 모든 컬럼을 다 보겠다. (columm)
where -> 행 검색시에


`와 '는 다르다. `-> 테이블명 혹은 데이터베이스 명
'->문자




///////////////////////////////////////////////////////////////////////////////////////


7개의 database -> *고객, 국가, 부서, 사원, 상품, 주문, 직업

		고객 - 아이디, 이름, 성별, 전화번호, 이메일, 국가코드(국가	와 관계), 고객구분코드, 직업코드(		직업과 관계), 생년월일

		상품 - 상품아이디, 명, 설명, 분류명

		사원 - 사원번호, 부서번호(부서와 관계), 사원명, 고용일자, 				급여, 관리자아이디(재귀적관계-> 사원중 한사람이 관리자				로서 관리를 함.), 나이, 주소
	
		주문 - 주문번호, 상품아이디(상품과 관계), 고객아이디(고객			과 관계), 수량, 주문부서번호(부서), 합계, 주문사원번호(사				원), 완료일자, 주문일시, 주문상태코드

	*SELECT : 데이터의 조회. 다른말로 QUERY라고도 함. 테이블에서 필		요한 데이터를 조회하기 위한 언어.

		ex) 신발가게에서 사용자가 100,000원이 넘지 않는 신발을 				사고 싶습니다.
		직원에게 신발의 가격과 제품명을 문의한다면 다음과 같을 			것입니다.
		“신발 중에 100,000원이 넘지 않는 제품이름과 가격을 알려				주세요.”
		
		알고싶은 것 -> 제품의 이름과 가격 SELECT (열의 이름)
		어디에서 -> 신발중에서 FROM (열이 존재하는 테이블명)
		조건 -> 10만원이 넘지 않는 WHERE
		
		SELECT 가격, 제품명 
		FROM 신발
		WHERE 가격 <= 100.000

		* 실행 순서 -> SELECT 컬럼명[ALIAS] (출력, 계산)
			FROM 테이블명
			WHERE 조건식 (검색 대상에 대한)
			GROUP BY 컬럼이나 표현식 
			HAVING 그룹 조건식 (검색 결과에 대한)
			ORDER BY 칼럼이나 표현식 (정렬)

	* ALIAS : 별명 부여 -> AS를 이용하여 별명 부여 (일시적인 것임)
		컬럼명 바로 뒤에 공백을 두고 부여. AS를 써도 되고 안써도 댐.
		이중 인용부호 "" 를 써야 하는 경우. 별명이 공백, 특수문자를 포함한 경우 대소문자 구분이 필요한 경구

	* DISTINCT -> 중복 제거  SELECT DINSTINCT -> 몇개인지는 중요하지 않고 정보만 알고 싶을때 사용.

	* WHERE -> 데이터 범위 선택(특정 열의 선택) AND(둘다 참)와 OR(둘중 하나만 참)로 조건 선택 가능

	* INSERT -> 데이터 등록 및 추가 
		INSERT INTO 테이블명
		VALUES (데이터값1, 2, 3, ...) -> 테이블에 정의된 컬럼 순서와 동일해야 한다.

		만약 INSERT INTO 테이블명 (컬럼명1, 컬럼명2, ...) 와 같이 필요한 값만 입력 가능.
		단 값이 반드시 존재해야 하는 컬럼 값이 존재해야 한다.

	* UPDATE -> 데이터의 수정
		UPDATE 테이블명
		SET 컬럼명 = 변경할컬럼값  -> 두개 이상의 컬럼에 대해 수정 할 때에는 ,를 이용하여 나열.
		WHERE 조건절;

	* DELETE -> 데이터의 삭제
		DELETE FROM 테이블명
		WHERE 조건절; -> WHERE이 없다면 테이블 상의 모든 데이터가 삭제


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	* 산술 연산자 -> 조건절 또는 SELECT 하는 위치에서 수치 계산
		+, -, *, /, ()
	
	* 연결 연산자 -> 서로 다른 두개의 문자열을 연결한다.
			Mysql 에서는 * 를 이용, -> 공용 CONCAT(칼럼1, 칼럼2)
	
	* 비교 연산자 -> WHERE 조건절에서 범위를 지정할 때 사용.
		=, !=, >, <, <=, >=

	* 논리 연산자 -> 여러 조건절들을 논리적으로 연결
		AND, OR, NOT

	* 범위검색 -> WHERE 컬럼명 BETWEEN 범위의 하한값(포함) AND 상한값(포함)

	* 대상 지정 검색 -> 특정값들이 존재하는 지를 지정하여 검색
			WHERE 칼럼명 IN(특정값1, 특정값2)    -> OR 과 어떻게 다른다

	* 문자열 부분일치 검색(LIKE) -> 문자값이 부분적으로 일치
		자릿수에 상관X -> %를 이용. 컬럼명 LIKE '%CD%' or 'CD%' or 'C%D%'
		자릿수가 정해진 경우 -> _를 이용. 컬럼명 LIKE '_CD_' or 'CD_' or 'C_D'
		
	*** 연산자 우선순위
		()   ->   NOT   ->   비교연산자    ->   AND   ->   OR

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	* NULL -> 아무 값도 없다. 연산이 불가능함. NULL과 연산시 NULL이 됨. 공백, 0과 다름.
		NULL을 조회하기 위해선 IS NULL을 이용. NULL이 아닌값 조회시에는 IS NOT NULL 사용.

	* JOIN -> 두개 이상의 테이블에서의 데이터 조회.
		INNER JOIN : 연결하려는 컬럼 값이 일치하는 레코드만 가져온다. (교집합)
		LEFT JOIN : 조회 집합 기준이 왼쪽 테이블. 왼쪽 테이블은 모두 조회하고 오른쪽 테이블은 연결하는 칼럼값		이 일치하는 경우만 가져온다.
		RIGHT JOIN : 조회 집합 기준이 오른쪽 테이블.
		FULL OUTER JOIN : 조회 집합 기준이 양쪽 테이블 모두.

		-> 연결부분은 ON으로 조건을 써준다.

		CROSS JOIN -> 조건없이 모든 값을 나열. -> 모든 경우에 대해서 다 곱하여 나열. (CARTESIAN 		PRODUCT)
		SELECT * FROM 테이블1
		CROSS JOIN 테이블2; OR INNER JOIN 테이블2; (WITHOUT ON)
		
		혹은 SELECT * FROM 테이블1, 테이블2;

	
		INNER JOIN 
			SELECT * FROM 테이블명A
			INNER JOIN 테이블명B ON (테이블명A.컬럼명 = 테이블명B.컬럼명);

			SELECT * FROM 고객정보A INNER JOIN 도시테이블B ON A.도시코드=B.도시코드;
		 	(SAME AS) SELECT * FROM 고객정보A, 도시테이블B WHERE A.도시코드=B.도시코드;			
			자기 자신과 JOIN -> SELF JOIN
		
		LEFT OUTER JOIN, RIGHT OUTER JOIN, FULL OUTER JOIN


	* GROUP BY -> 지정컬럼의 데이터들 중에서 동일 데이터를 묶어 여러 집계 작업을 수행 (~~별)
			FROM 과 WHERE 의 뒤에 위치함.
		SELECT 
		집계기준컬럼명1, 집계기준컬럼명2, 집계함수(일반컬럼) -> COUNT 숫자세기, MIN, MAX
		FROM 테이블
		GROUP BY 집계기준컬럼명1, 집계기준컬럼명2,...;

		EX) 사원정보(ENC_EMP) 데이터를 부서번호(DEPT_NO) 기준으로 최소월급(MIN(SAL)), 최대월		급(MAX(SAL))을 조회하는 SQL을 작성해보세요.

		-> SELECT DEPT_NO, MIN(SAL), MAX(SAL)
		FROM ENC_EMP
		GROUP BY DEPT_NO;

		집계함수 : SELECT 절, HAVING 절, ORDER BY 절에 사용 할 수 있다.
			COUNT(*) : NULL을 포함한 행의 수를 출력
			COUNT(표현식) NULL값을 제외
			SUM, AVG, MIN,  STDDEV(표준편차), VARIAN(분산)

		GROUP BY ~ HAVING ~  -> GROUP BY 된 결과 중 조건에 부합되는 데이터만 보고 싶을때

		ORDER BY 컬럼1 ASC||DESC, 칼럼2 ASC||DESC, ... ASC-> 기본(오름차순), desc(내림차순)
		NULL은?? SQL SERVER와 MYSQL은 NULL은 가장 작은 값으로.



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	* SELECT 를 이용한 INSERT
		INSERT INTO 입렵테이블명 (입력테이블컬럼명1, 컬럼명2) -> 대상 테이블
		SELECT 컬럼1, {컬럼2,...}  -> 생략가능한 경우, 테이블의 정보가 같을 때.
		FROM
		WHERE;
		
		INSERT INTO 고객정보 (고객정보, 고객명, 전화번호) -> INSERT 할 테이블명 및 테이블 컬럼
		SELECT 사원번호, 사원명, 전화번호 -> INSERT할 값
		FROM 사원정보 -> 데이터를 가져올 테이블명
		WHERE 사원구분 = '신규'

		NULL이 아닌 값을 집어 넣을 때에는 -> 값 AS 컬럼 순으로. ALIAS와 다른가?


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	* 집합 연산자 -> 두개 이상의 집합(SELECT의 결과)에 대해서 서로 더하거나 빼는 등의 연산을 수행
		UNION : 두 집합을 하나로 합치고, 중복행은 한번만 출력.
		UNION ALL : 두 집합을 합치고, 중복을 그대로 표시.
		INTERSECT : 교집합을 출력하되, 중복행은 한번만 출력.
		EXCEPT : 첫 집합의 결과에서 두번째 집합의 결과는 제외. 중복은 한번만 출력. (차집합)

		테이블에서 추출하는 컬럼의 수와 데이터 타입이 일치(호환가능)해야함.

		EX) SELECT 컬럼1, 컬럼2 FROM 테이블1 집합연산자 SELECT 컬럼3, 컬럼4 FROM 테이블2;


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	* 계층형구조의 데이터 검색 -> 테이블에 계층적 데이터가 저장된 경우. DBMS마다 다름
		MYSQL의 경우

		SELECT 세션변수1 AS 임의컬럼1
		,( SELECT 세션변수1 := 부모컬럼 FROM 테이블명 WHERE 자식컬럼 = 임의컬럼1 ) AS 임의컬		럼2
		, 세션변수2 := 세션변수2 + 1 AS LEVEL
		FROM ( SELECT 세션변수1 := 시작지점값 ) VARS  -> 괄호부분이 세션변수의 초기값 지정.
		, 테이블명 H					세션변수는 임의의 변수.
		, ( SELECT 세션변수2 := 0 ) LV
		WHERE 세션변수1 < > 0;


		보이는 값 - > 임의컬럼1-> 초기값 , 임의컬럼2 -> 부모컬럼 , LEVEL -> 0에서부터 출발

		EX)
			SELECT @R AS _ID
			,(
			SELECT @R:= MANAGER_ID
			FROM ENC_EMP
			WHERE EMP_NO = _ID
			) AS _MANAGER_ID
			, @L:=@L+1 AS LEVEL
			FROM ( SELECT @R:=102) VARS
			, ENC_EMP H
			, (SELECT @L:=0) LV
			WHERE @R < > 0;

			계층구조를 보고싶음 -> EMP를 관리하는 MANAGER_ID.
			MANAGER_ID가 부모, EMP_NO가 자식. (자식->부모)의 방향으로 구현가능.
			@R이 임의칼럼1, @L이 임의칼럼2

			-> _ID, _MANAGER_ID, LEVEL
			102 101 1
			101 110 2
			110 NULL 3
			

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	* 서브쿼리 -> SELECT문 안에 다시 SELECT문을 이용. 하나의 SQL문 만으로는 구하기 어려운 복잡한 	SQL에 이용.
		데이터 값을 정확이 알지 못해도 그 데이터들에 대해서 데이터 추출 가능.

		SELECT 컬럼명 [,컬럼명]      ---------------->메인쿼리
		FROM 테이블명1 [,테이블명2]
		WHERE 컬럼명 연산자(OPERATOR) 
     			 (SELECT 컬럼명, [,컬럼명]      ---------------->서브쿼리
      			FROM 테이블명3[,테이블명4]
     			 [WHERE])
	
	위치에 따른
		WHERE절에 SQL문 기술
			SELECT 
			FROM
			WHERE ( SELECT FROM [WHERE])

		FROM절에 SQL문 기술
			SELECT
			FROM (SELECT FROM [WHERE])
			WHERE

		SELECT절에 SQL문 기술
			SELECT (SELECT FROM [WHERE])
			FROM
			WHERE

	반환 데이터형태에 따른

		단일 행 반환 서브쿼리 -> 단일행 비교연산자와 서브쿼리의 결과가 1건 이하
			SELECT
			FROM
			WHERE 칼럼명 = (SELECT FROM [WHERE]) -> 주로 비교연산자와 함께 사용
								>, <, <=, >=, <>,=
		EX) 주문정보 (`ENC_ORDER`)에서, 주문사원번호(`ORD_EMP_NO`)가 사원정보(`ENC_EMP`)에 존			재하며, 관리자(`MANAGER_ID`)가 NULL인 데이터를 검색합니다. 최상위 관리자(관리자번호가 			NULL인 데이터)는 사원정보(`ENC_EMP`)에서 1건만 있다는 전제입니다.  -> 최상위 관리자가 			누구인지 모르는 경우 사용.

		-> SELECT *
		FROM ENC_ORDER
		WHERE ORD_EMP_NO = ( SELECT EMP_NO
			FROM ENC_EMP
			WHERE MANAGER_ID IS NULL);


		다중 행 반환 서브쿼리 -> 비교연산자와 서브쿼리의 결과가 2건 이상.
			SELECT
			FROM
			WHERE 칼럼명 다중행 연산자 (SELECT FROM [WHERE]) -> 
								IN, ALL, ANY, SOME, EXISTS

				IN -> 리턴 값 중에 조건에 해당하는 값이 있으면 참(특정값)
				ANY, SOME -> 값과 조건을 비교하여 하나 이상 만족시 참(범위로)
				ALL -> 모든 조건값이 만족하면 참
				EXISTS -> 서브쿼리의 결과중에서 만족하는 값이 하나라도 존재시 참

				-> IN, ANY

		EX) 대전에 거주하는 사원이 주문사원인 주문정보를 조회
		대전에 거주하는 사원 : 사원(`ENC_EMP`)의 주소(`ADDRESS`) = '대전'
			
		-> SELECT *
		FROM ENC_ORDER
		WHERE ORD_EMP_NO IN (SELECT EMP_NO
			FROM ENC_EMP
			WHERE ADDRESS = '대전');
			
		EX) 최상위 관리자에 의해 주문된 수량보다 많이 주문된 데이터를 조회

		->SELECT *
		FROM ENC_ORDER
		WHERE QUANTITY >ALL( SELECT QUANTITY
			FROM ENC_ORDER
			WHERE ORD_EMP_NO = ( SELECT EMP_NO
				FROM ENC_EMP
				WHERE MANAGER_ID IS NULL));
	
		
		다중 컬럼 반환 서브쿼리 -> 2개 이상의 컬럼과 비교대상인 서브쿼리를 비교.
			SELECT
			FROM
			WHERE (컬럼명1, 컬럼명2) 
			IN (SELECT 컬럼명1, 컬럼명2 FROM [WHERE]);

		EX) 성별(`GENDER`)로 최고령 고객의 데이터를 조회하는 SQL은 다음과 같이 작성할 수 있습니			다. 최고령 고객: 생년월일이 가장 과거여야 하므로 `MIN(BIRTH_YMD)`

		-> SELECT *
		FROM ENC_CUSTOMER
		WHERE (GENDER, BIRTH_DATE) IN ( SELECT GENDER, MIN(BIRTH_DATE)
			FROM ENC_CUSTOMER
			GROUP BY GENDER);


		스칼라 서브 쿼리 -> SELECT절에 기술된 서브 쿼리. (한 컬럼)
			SELECT (SELECT FROM [WHERE]) FROM WHERE

			서브쿼리 내의 테이블 컬럼명과 메인쿼리의 컬럼명이 동일 한 경우 ALIAS를 통해 식			별한다.

			SELECT A.고객번호, A.고객명, (SELECT B.도시명 FROM 도시테이블 AS B WHERE B.			도시코드 = A.도시코드) AS 도시명칭 FROM 고객테이블 AS A WHERE 나이 <=33;

		EX) 사원정보(테이블 `ENC_EMP`)로부터 사원번호(`EMP_NO`), 사원명(`EMP_NAME`), 부서명을 		조회. 부서명은 사원정보에 없으며, 사원테이블에는 부서코드(`DEPT_NO`)만 존재합니다.
		부서명은 부서정보(`ENC_DEPT`)에 존재합니다.

		-> SELECT A.EMP_NO AS 사원번호, A.EMP_NAME AS '사원명', (SELECT B.DEPT_NAME
			FROM ENC_DPT AS B
			WHERE A.DEPT_NO = B.DEPT_NO) AS '부서명'
		FROM ENC_EMP AS A;

		-> 하나에 대에서만 ALIAS를 쓰면 댐

		SELECT EMP_NO,
		EMP_NAME,
		(SELECT DEPT_NAME FROM ENC_DEPT WHERE DEPT_NO = A.DEPT_NO ) DEPT_NAME
		FROM ENC_EMP A ;

		(스칼라 서브 쿼리 이용)
		SELECT CUST_ID AS '고객아이디',
		CUST_NAME AS '고객명',
		(SELECT COUNTRY_NAME FROM ENC_COUNTRY WHERE COUNTRY_CD=A.COUNTRY_CD) AS 		'국가명'
		FROM ENC_CUSTOMER AS A;

		(LEFT OUTER JOIN 사용)
		SELECT A.CUST_ID AS '고객아이디',
		A.CUST_NAME AS '고객명',
		B.COUNTRY_NAME AS '국가명'
		FROM ENC_CUSTOMER AS A
		LEFT OUTER JOIN ENC_COUNTRY AS B
		ON A.COUNTRY_CD=B.COUNTRY_CD;


		유저 테이블 -> 정보.(최근접속시간 컬럼)


		SELECT 유저명 컬럼,  최근접속시간
		FROM 유저 테이블
		WHERE (현재 접속시간 - 최근접속시간) >

