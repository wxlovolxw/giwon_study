Write a query identifying the type of each record in the TRIANGLES table using
its three side lengths. Output one of the following statements for each record
in the table:

    Equilateral: It's a triangle with 3 sides of equal length.
    Isosceles: It's a triangle with 2 sides of equal length.
    Scalene: It's a triangle with 3 sides of differing lengths.
    Not A Triangle: The given values of A, B, and C don't form a triangle.

Input Format

The TRIANGLES table is described as follows:

COLUMN  TYPE
A       INTEGER
B       INTEGER
C       INTEGER

Each row in the table denotes the lengths of each of a triangle's three sides.


Sample Input

    A   B   C
    20  20  23
    20  20  20
    20  21  22
    13  14  30

Sample Output

    Isosceles
    Equilateral
    Scalene
    Not A Triangle
    Explanation

Values in the tuple (20,20,23) form an Isosceles triangle, because A=B.
Values in the tuple (20,20,20) form an Equilateral triangle, because A=B=C.
Values in the tuple (20,21,22) form a Scalene triangle, because A!=B!=C.
Values in the tuple (13,14,30) cannot form a triangle because the combined value of sides A and B is not larger than that of side C.

-> 각 컬럼이 삼각형의 한변의 길이가 된다. 이때 삼각형이 어떤 형태인지를 리턴하는 것이 목표

///////////////////////////////////////////////////////////////////////////

여러 조건에 의해 삼각형의 형태가 결정이 되므로, CASE WHEN을 사용하는 것이 가장 좋을 것 같다.

삼각형 분류 방법(알고리즘)
-> 한변의 길이가 나머지 두변의 길이의 합보다 큰가?
	YES -> 삼각형 (일반조건 충족)
	두변의 길이가 같은가 (길이가 같은 두변이 존재하는가)
		YES -> 이등변 삼각형 조건 충족
		모든 변의 길이가 같은가
			YES -> 정삼각형 'Equilateral'
			NO -> 이등변 삼각형 'Isosceles'
		NO -> 일반 삼각형 'Scalene'
	NO -> 삼각형이 아니다 'Not A Triangle'

SELECT CASE
    WHEN (A+B>C) AND (B+C>A) AND (A+C>B) THEN CASE
        WHEN A=B OR B=C OR C=A THEN CASE
            WHEN A=B AND B=C THEN 'Equilateral'
            ELSE 'Isosceles' END
        ELSE 'Scalene' END
    ELSE 'Not A Triangle' END

FROM TRIANGLES

///////////////////////////////////////////////////////////////////////////

Given the CITY and COUNTRY tables, query the sum of the populations of all
cities where the CONTINENT is 'Asia'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

Input Format

The CITY and COUNTRY tables are described as follows:

    CITY
    FIELD       TYPE
    COUNTRYCODE VARCHAR2(3)

    COUNTRY
    FIELD       TYPE
    CODE        VARCHAR2(3)
    CONTINENT   VARCHAR2(13)

///////////////////////////////////////////////////////////////////////////

    SELECT SUM(CITY.POPULATION)
    FROM CITY
    INNER JOIN COUNTRY
    ON CITY.COUNTRYCODE  = COUNTRY.CODE
    WHERE COUNTRY.CONTINENT = 'ASIA'

    -> 각 도시별로의 인구수 합을 받아야 하므로, CITY 테이블을 메인으로 COUNTRY테이블을 LEFT JOIN한다.

///////////////////////////////////////////////////////////////////////////

Given the CITY and COUNTRY tables, query the names of all cities where the
CONTINENT is 'Africa'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

    SELECT A.NAME FROM CITY A
    INNER JOIN COUNTRY B ON A.COUNTRYCODE = B.CODE
    WHERE B.CONTINENT = 'AFRICA'

///////////////////////////////////////////////////////////////////////////

Given the CITY and COUNTRY tables, query the names of all the continents
(COUNTRY.Continent) and their respective average city populations
(CITY.Population) rounded down to the nearest integer.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

-> ROUND DOWN이므로 내림을 해야한다... 올림은 CEIL(), 내림은 FLOOR(), 반올림은 ROUND()

    SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION))
    FROM CITY
    INNER JOIN COUNTRY
    ON CITY.COUNTRYCODE = COUNTRY.CODE
    GROUP BY COUNTRY.CONTINENT

///////////////////////////////////////////////////////////////////////////

P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):

* * * * *
* * * *
* * *
* *
*
Write a query to print the pattern P(20).

    SELECT REPEAT('* ', @N:=@N-1)
    FROM INFORMATION_SCHEMA.TABLES, (SELECT @N := 21) X
    LIMIT 20

    -> 사용자 지정변수를 어떻게 쓰는지는 알것 같음
    -> INFORMATION_SCHEMA.TABLES 는 무엇인지 공부해야 함.

///////////////////////////////////////////////////////////////////////////

A median is defined as a number separating the higher half of a data set
from the lower half. Query the median of the Northern Latitudes (LAT_N) from
STATION and round your answer to 4 decimal places.

Input Format

The STATION table is described as follows:

    STATION
    FIELD   TYPE
    ID      NUMBER
    CITY    VARCHAR2(21)
    STATE   VARCHAR2(2)
    LAT_N   NUMBER
    LONG_W  NUMBER

where LAT_N is the northern latitude and LONG_W is the western longitude.

-> LAT_N의 중앙값(MEDIAN)을 찾아보자.

-> percent_rank() 의 사용
percent_rank() over (partition by order by)

    SELECT ROUND(A.LAT_N, 4)
    FROM (SELECT LAT_N,
          PERCENT_RANK() OVER (ORDER BY LAT_N) AS PERCENT FROM STATION) A
    WHERE A.PERCENT = 0.5

    -> 비율 퍼센테이지를 이용해서 구하는 것이므로 50프로일때가 딱 중앙값이다.

-> 사용자 지정 변수의 사용


-> 서브 쿼리의 이용

Select round(S.LAT_N,4) mediam
from station S
where   (select count(Lat_N) from station where Lat_N < S.LAT_N )
        = (select count(Lat_N) from station where Lat_N > S.LAT_N)

