장고 앱 작성하기(2)

##################################################################################

1. 데이터베이스 설치

mysite/settings.py

    - django 설정을 모듈 변수로 표현한 보통의 python 모듈
    - SQLite를 사용한다. 기본적으로 제공된다.
    - PostgreSQL과 같은 확장성 있는 데이터베이스를 사용하는 것도 좋다.

    - 다른 데이터베이스를 사용해보고 싶다면, 적절한 데이터베이스 바인딩을 설정하고, 연결과 맞게끔 DATABASE 'default' 항목
    값을 다음의 키 값으로 바꿔준다.

        ENGINE - 'django.db.backends.sqlite3', 'django.db.backends.postgresql', 'django.db.backends.mysql', 또는 'django.db.backends.oracle' 등

        NAME - SQLite를 사용하는 경우, 데이터베이스는 컴퓨터의 파일이 된다. 이 경우 NAME은 해당 파일의 이름을 포함하여
        전체 경로로 주어져야 한다. 기본값인 BASE_DIR/'dbsqlite3'은 프로젝트 디렉토리에 파일을 저장합니다.

    - SQLite를 데이터베이스로 사용하지 않는 경우, USER, PASSWORD, HOST 같은 추가 설정이 반드시 필요하다.
    SQLite 외의 데이터베이스를 생성할 시에,

CREATE DATABASE database_name;

    을 통해 생성해주고, 데이터베이스 사용자가 create database 권한이 있는지 확인해 봐야 한다.
    SQLite를 사용한다면 아무것도 미리 생성할 필요가 없다.

    - TIME_ZONE은 시간대에 맞춰서 사용한다.

        기본설정은 UTC이므로 KST로 변경해서 사용해 준다.

    - INSTALLED_APPS는 Django 인스턴스에서 활성화된 모든 Django 어플리케이션들의 이름이 담겨 있다.
    앱들은 다수 프로젝트에서 사용될 수 있고, 다른 프로젝트에서 쉽게 사용될 수 있도록 패키징하여 배포할 수 있다.

        django.contrib.admin : 관리용 사이트
        django.contrib.auth : 인증 시스템
        django.contrib.contenttype : 컨텐츠 타입을 위한 프레임워크
        django.contrib.sessions : 세션 프레임워크
        django.contrib.messages : 메세징 프레임워크
        django.contrib.staticfiles : 정적 파일을 관리하는 프레임워크

    - 기본 어플리케이션들 중 몇몇은 최소한 하나 이상의 데이터베이스 테이블을 사용하는데,
    그러기 위해서 데이터베이스에서 테이블을 미리 만들 필요가 있다.

$ python manage.py migrate

    - migrate 명령어는 INSTALLED_APPS의 설정들을 보여주며, mysite/settings.py의 database 설정들을 기반으로 필요한
    database table들을 생성한다. 또한 앱과 관련된 변경 사항들을 보여준다.

    앱들의 변경사항들에 대한 메시지가 나왔을 때, 생성된 테이블을 보고 싶다면 다음의 명령어를 치면 된다.

     - \dt (PostgreSQL)
     - SHOW TABLES; (MariaDB, MySQL)
     - .schema (SQLite)
     - SELECT TABLE_NAME FROM USER_TABLES; (Oracle)

    -> 기본으로 제공되는 어플리케이션들은 일반적인 상황을 염두하여 생성이 되나, 모두 필요한 것은 아니다.
    만약 필요없을 시에는 migrate를 실행하기 전에 INSTALLED_APPS에서 제거할 어플리케이션들을 주석처리하거나 삭제한다.
    miagate 명령은 INSTALLED_APPS에 대해서 실행된다.

##################################################################################

2. 모델 만들기

    모델이란 부가적인 메타데이터를 가진 데이터베이스의 구조(layout)을 말한다.

    *** 모델은 데이터에 관한 단 하나의, 가장 확실한 진리의 원천. 저장하는 모든 데이터의 필수적인
    필드들과, 동작들을 포함하고 있다. 기본적으로 DRY 원칙을 따르는데, 이 원칙에 따라 데이터 모델을
    한곳에서 정의하고, 이것으로 부터 자동으로 무언가를 유도하는 것이 목표이다.

    - poll app에서는 '질문과 선택'의 두가지 모델을 만들 수 있다.
    질문은 질문과 발행일을 가지고 있으며, 선택은 선택과 집표 두가지 필드를 가지고 있다.
    각 선택들은 질문에 연관되어 있다.

    - polls/model.py 파일을 다음과 같이 수정하자.

-------------------------------------------------------
# polls/model.py

from django.db import models

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')

class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
-------------------------------------------------------

    - 각각의 모델들은 django.cd.models.Model의 서브클래스들로 class로 표현된다.
    각 모델들은 많은 클래스 변수들을 가지고 있으며, 모델의 데이터베이스 필드를 표현한다.

    - 데이터 베이스의 각 필드는 Field 클래스의 인스턴스로 표현된다.

        CharField는 문자 필드를 표현하고, DateTimeField는 날짜와 시간 필드를 표현한다.
        이것들은 각 필드가 어떤 자료형을 가질 수 있는지 Django에게 말헤준다.

    - 각각의 Field 인스턴스의 이름(question_text, pub_data)은 기계가 읽기 좋은 형식의
    데이터베이스 필드 이름이다. 이 필드명을 Python 코드에서 사용할 수 있고, 데이터베이스에서는
    컬럼명으로 사용할 것이다.

     - Field 클래스의 상성자에 선택적인 첫번째 위치 인수를 전달하여 human-readable 이름을
     지정할 수도 있다. 이 방법은 Django의 내부를 설명하는 용도로도 종종 사용되는데, 문서가 늘어
     나는 것과 같은 효과를 가진다. 만약 이를 설정하지 않으면 기계가 읽기 좋은 형식의 이름을 사용한다.

        이번 예제에서는 Question.pub_date에 한해서만 human-readable의 이름을 사용한다.

        그 외의 필드들은 machine-friendly한 형태라고 human-readable하다.

     - 몇몇 Field 클래스들은 필수 인수가 필요하다. 예를 들어, CharField의 경우 max_length를
     입력해주어야 한다. 이것은 데이터베이스 스키마에서만 필요한 것이 아닌 값을 검증할 때 사용된다.

     - 또한 몇몇 Field는 다양한 선택적 인수들을 가질 수 있다.

        이번 예제에서는 default를 통해 votes의 기본값을 0으로 설정하였다.

     - ForeignKey를 사용한 관계설정을 통해 각각의 Choice가 Question에 관계된다는 것을 Django에 전달한다.
     Django는 다대일(many-to-one), 일대일(one-to-one)과 같은 모든 일반 데이터베이스 관계를 지원한다.

##################################################################################

3. 모델의 활성화

    모델에 대한 이 작은 코드가 Django에는 상당한 양의 정보를 전달한다.
    Django는 이 정보를 통해 다음의 일을 수행한다.

        - 이 앱을 위한 데이터베이스 스키마 생성(CREATE TABLE)

        - Question과 Choice 객체에 접근하기 위한 Python 데이터베이스 접근 API를 생성

    - 그 이전에 현재 프로젝트에 polls 앱이 설치 되었다는 것을 알려야 한다.

    - mysite/settings.py에 INSTALLED_APPS에 이 PollsConfig 클래스를 추가해줘야 한다.
    이 클래스의 경로는 polls.apps.PollsConfig와 같으므로 이 경로로 추가해 준다.

-------------------------------------
# mysite/settings.py

INSTALLED_APPS = [
    'polls.apps.PollsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
-------------------------------------

    - 이제 Django가 pools앱이 포함된 것을 알게 되었으니 다음 명령을 내려본다.

-----------------------------------------
$ python manage.py makemigrations polls

Migrations for 'polls':
  polls/migrations/0001_initial.py
    - Create model Question
    - Create model Choice
-----------------------------------------

    - migrations를 실행 시킴으로서, 모델을 변경(혹은 새로운 모델 생성)시킨 사실과,
    이에 대한 변경 사항들을 migration으로 저장시키고 싶다는 것을 Django에 알려준다.

    *** migration은 Django가 사용자의 모델(데이터베이스 스키마)에 대한 변경을 저장하는 방식.
    즉, 디스크 내의 파일이다. 원한다면 새로운 모델에 대한 migration을 읽을 수 있다.

        polls/migrations/0001_initial.py

    Django가 새로운 것을 만들 때마다 읽을 필요는 없지만, Django가 어떻게 변경시키는지에 대해
    수작업으로 수정하고 싶을 경우를 대비하여 사람이 편집(human_editable)할 수 있도록 고안되었다.

    - migration들을 실행해주고, 자동으로 데이터베이스 스키마를 관리해주는 migration 명령어가 있다.

    - sqlmigration 명령은 migration 이름을 인수로 받아, 실행하는 SQL 문장을 보여준다.

--------------------------------------------------
$ python manage.py sqlmigrate polls 0001

BEGIN;
--
-- Create model Question
--
CREATE TABLE "polls_question" (
    "id" serial NOT NULL PRIMARY KEY,
    "question_text" varchar(200) NOT NULL,
    "pub_date" timestamp with time zone NOT NULL
);
--
-- Create model Choice
--
CREATE TABLE "polls_choice" (
    "id" serial NOT NULL PRIMARY KEY,
    "choice_text" varchar(200) NOT NULL,
    "votes" integer NOT NULL,
    "question_id" integer NOT NULL
);
ALTER TABLE "polls_choice"
  ADD CONSTRAINT "polls_choice_question_id_c5b4b260_fk_polls_question_id"
    FOREIGN KEY ("question_id")
    REFERENCES "polls_question" ("id")
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "polls_choice_question_id_c5b4b260" ON "polls_choice" ("question_id");

COMMIT;
--------------------------------------------------

    - 사용하는 데이터베이스에 따라 출력 결과가 다를 수 있다. 위의 출력결과는 SQLite에서 생성되었다.

    - 테이블 이름은 앱의 이름과 표기된 모델의 이름이 조합되어 자동으로 생성된다.
    위의 경우 앱의 이름인 polls과 소문자로 표기된 모델의 이름인 question과 choice가 합쳐진다.(재지정 하여 수정가능)

    - 기본 키(ID)가 자동으로 추가된다.(재지정 하여 수정가능)

    - 관례에 따라 Django는 외래 키 필드명에 "_id" 이름을 자동으로 추가한다.(재지정 가능)

    - 외래 키 관계는 FOREIGN KEY 제약에 의해 명시되어있다.

    - 사용하는 데이터베이스에 따라, 데이터베이스 고유의 필드타입이 조정된다. 자동 증가 필드를 생성할 경우,
    auto_increment(MySQL), serial(PostgreSQL), integer primary key autoincrement(SQLite)와 같이 사용하는 데이터베이스에 따라
    적절한 필드타입이 자동으로 선택된다. 필드명에 사용되는 인용부호도 상황에 따라 겹따옴표나 홑따옴표가 적절히 선택된다.

    - sqlmigrate 명령은 실제로 데이터베이스에서 migration을 실행하지 않고, SQL Django가 필요하다고 생각하는 내용을 볼 수 있도록
    해당 migration 화면에 인쇄합니다. Django가 수행할 작업을 확인하거나 변경을 위 SQL 스크립트가 필요한 데이터베이스 관리자가 존재하는지
    확인하는데 유용하다.

    - 이제 migrate를 실행시켜 데이터베이스에 모델과 관련된 테이블을 생성해본다.

-------------------------------------------------------------------
$ python manage.py migrate

Operations to perform:
  Apply all migrations: admin, auth, contenttypes, polls, sessions
Running migrations:
  Applying polls.0001_initial... OK
-------------------------------------------------------------------

    - migrate 명령은 아직 적용되지 않은 마이그레이션을 모두 수집해 이를 실행하며(Django는 django_migrations 테이블을 두어
    migration 적용 여부를 추적한다) 이 과정을 통해 모델에서 변경 사항들과 데이터베이스 스키마의 동기화가 이루어진다.

    - migration은 매우 강력한 기능이며, 마치 프로젝트를 개발할 때처럼 데이터베이스나 테이블에 손대지 않고도 모델의 반복적인 변경을 가능하게 해준다.
    동작 중인 데이터베이스를 자료 손실 없이 업그레이드 하는 데 최적화 되어있다.

    *** 모델 변경을 만드는 세 단계

        1 - models.py를 통해 모델을 변경한다.

        2 - python manage.py makemigrations를 통해 변경사항에 대한 migration을 만든다.

        3 - python manage.py migrate를 통해 변경사항을 데이터베이스에 적용한다.

    - migration을 만드는 명령과 적용하는 명령이 분리된 것은 버전 관리 시스템에 migration을 커밋하고 앱과 함께 출시할 수 있도록 하기 위해서.
    이는 개발을 쉽게 해줄 뿐 아니라, 다른 개발자가 프로덕션에 사용할 수 있게 해준다.

##################################################################################

4. APP 가지고 놀기

    대화식 Python 쉘에 들어가 Django API를 가지고 놀아보자.

$ python manage.py shell

    - 우리는 단순히 python을 타이핑하는 것 대신 python shell을 사용하는데, 이는 manage.py가 DJANGO_SETTINGS_MODULE 환경 변수를 설정하고,
    이 환경 변소를 통해 Django에게 Python import 경로를 mysite/settings.py에 전달해주기 때문이다.

-----------------------------------------------------------------------------------------
>>> from polls.models import Choice, Question
    # 기존에 만든 model class들을 import해준다.

    # 아직까지 생성한 질문들이 없으므로 QuerySet에 아무것도 존재하지 않는다.

>>> Question.objects.all()
<QuerySet []>

    # 새로운 질문을 생성한다.
    # Django는 표준 시간에 대한 지원이 기본 설정 파일에서 사용되므로, pub_date에 대해 tzinfo(시간대 정보)가 포함된 날짜 시간이 필요하다.
    #  datetime.datetime.now() 를 대신하여 timezone.now()를 사용함으로서 해결할 수 있다.

>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())

# Save the object into the database. You have to call save() explicitly.

    # 데이터베이스에 오브젝트들을 저장한다. 이때 save()를 명백하게 호출해야 한다.

>>> q.save()

    # q에 아이디가 생성된다.

>>> q.id
1

    # 파이썬 특성들을 통해 모델 필드값들에 접속한다.

>>> q.question_text
"What's new?"

>>> q.pub_date
datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)

    # 특성을 변경을 통해 값을 바꾸고, save()를 호출한다.

>>> q.question_text = "What's up?"
>>> q.save()

    # objects.all()을 통해 모든 질문들을 데이터베이스에 표시해준다.

>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>]>
-----------------------------------------------------------------------------------------

    - 여기서 <Question: Question object (1)> 는 이 객체를 표현하는데 도움이 되지 않으므로, polls/models.py 파일의 Question 모델을 수정한다.

    - __str__() 메소드를 Question과  Choice에 추가해 본다.

-------------------------------------
# polls/models.py

from django.db import models

class Question(models.Model):
    # 기존 내용
    def __str__(self):
        return self.question_text

class Choice(models.Model):
    # 기존 내용
    def __str__(self):
        return self.choice_text
-------------------------------------

    - 모델에 __str__() 메소드를 추가하는 것은 객체의 표현을 대화식 프롬프트에서 편하게 보려는 이유 외에, Django가 자동으로 생성하는
    관리 사이트에서도 객체의 표현이 사용되기 때문이다.

    - 이 모델에 커스텀 메소드도 추가해 보자.

----------------------------------------------------------------------------
# polls/models.py

import datetime

from django.db import models
from django.utils import timezone

class Question(models.Model):
    # 기존 내용
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
----------------------------------------------------------------------------

    - import datetime은 python 표준 모듈인 datetime 모듈을 참조하기 위해 추가되었다.

    - from django.utils import timezone은 Django의 시간대 관련 유틸리티인 django.utils.timezone을 참조하기 위함이다.

    - 다시 python manage.py shell을 시행해보자.

-----------------------------------------------------------------------

$ python manage.py shell

>>> from polls.models import Choice, Question

    # __str__()를 추가한 것이 작동하는지 확인하기

>>> Question.objects.all()
<QuerySet [<Question: What's up?>]>

    # Question이 What's up으로 제대로 변경되었다.

    # Django는 키워드 인수를 통해 구동되는 데이터베이스 검색 API를 제공한다.

>>> Question.objects.filter(id=1)
<QuerySet [<Question: What's up?>]>

>>> Question.objects.filter(question_text__startswith='What')
<QuerySet [<Question: What's up?>]>

    # 올해 게시된 질문을 얻는다.

>>> from django.utils import timezone
>>> current_year = timezone.now().year
>>> Question.objects.get(pub_date__year=current_year)
<Question: What's up?>

    # 존재하지 않는 Id에 대해 요청을 하면, 예외사항을 발생시킨다.

>>> Question.objects.get(id=2)
Traceback (most recent call last):
    ...
DoesNotExist: Question matching query does not exist.

    # 기본키를 통해 조회하는 것이 가장 일반적인 경우이고, Django는 primary키를 통한 조회에 shortcut을 제공해준다.
    # Question.objects.get(id=1) 을 통해 사용한다.

>>> Question.objects.get(pk=1)
<Question: What's up?>

    # 사용자 지정 메서드가 작동하는지 확인하기.

>>> q = Question.objects.get(pk=1)
>>> q.was_published_recently()
True

    # Question에 두가지 이상 Choice를 준다.
    # create의 호출은 INSERT 문을 수행하며 새로운 선택 객체를 만들고, 사용가능한 새로운 선택 객체를 반환하면서 선택을 가능한 선택사항들에 추가한다.
    # Django는 API를 통해 접근할 수 있는 ForeignKey 관계(질문의 선택과 같은)의 "다른 쪽"을 보유하는 집합을 생성한다.

>>> q = Question.objects.get(pk=1)

    # 관련 객체 세트에서 선택들을 나열하기. -- 아직까진 아무것도 없다.

>>> q.choice_set.all()
<QuerySet []>

    # 세개의 선택지 만들기

>>> q.choice_set.create(choice_text='Not much', votes=0)
<Choice: Not much>
>>> q.choice_set.create(choice_text='The sky', votes=0)
<Choice: The sky>
>>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)

    # 선택 객체는 그들과 관련된 질문 객체의 API 경로를 가지고 있다.

>>> c.question
<Question: What's up?>

    # 반대로 모든 질문 객체는 그들과 관련된 선택 객체에 접근할 수 있다.

>>> q.choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
>>> q.choice_set.count()
3

    # The API automatically follows relationships as far as you need.
    # Use double underscores to separate relationships.
    # This works as many levels deep as you want; there's no limit.
    # Find all Choices for any question whose pub_date is in this year
    # (reusing the 'current_year' variable we created above).

    # API는 필요한 만큼의 관계들을 자동적으로 따른다.
    # 관계를 구분하려면 이중 밑줄을(__) 사용한다.
    # 이것은 다양한 층의 레벨을 생성할 수 있다.(깊이에 제한이 없다.)

    # 올해 pub_date가 포함된 질문의 모든 선택 항목들 찾기(위의 current_year을 재사용하여)

>> Choice.objects.filter(question__pub_date__year=current_year)
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>

    # 이중 하나의 선택지를 제거하기 위해 delete()를 사용한다.

>>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
>>> c.delete()

##################################################################################

5. Django 관리자 생성하기

    Django 관리자 - 직원들이나 고객들이 컨텐츠를 수정하기 위해 관리자 사이트를 만드는 것은 지루한 작업이다. 이런 이유로, Django는 모델에 대한
                관리용 인터페이스를 모두 자동으로 생성한다. Django는 '컨텐츠 게시자'와 '공개 사이트'의 구분이 명확하다.

                -> 사이트 관리자는 뉴스 기사, 사건, 스포츠 경기 결과 같은 것들을 시스템에 추가한다.

                -> 이렇게 추가된 컨텐츠는 공개 사이트에 노출된다.

                -> Django는 사이트 관리자가 컨텐츠를 편집할 수 있는 통합적인 인터페이스를 생성하는 문제를 해결한다.

                * 관리자 사이트는 방문자를 위한 것이 아니라, 사이트 관리자를 위한 것이다.

    - 관리 사이트에 로그인 할 수 있는 사용자를 생성해보자.

$ python manage.py createsuperuser

    - 원하는 username을 입력한다.

Username: admin

    - 메일 주소를 입력한다.

Email address: admin@example.com

    - 비밀번호를 입력한다. 이때 비밀번호 확인을 위해 두번을 같게 입력해야 한다.

Password: **********
Password (again): *********
Superuser created successfully.

##################################################################################

6. 개발 서버 시작

    - 관리자 사이트가 기본으로 활성화 되어있다. 개발 서버를 킨 뒤, 탐험해 보자.

    - 서버가 작동하지 않고 있다면, 다음의 명령을 입력하여 시작한다.

$ python manage.py runserver

    - http://127.0.0.1:8000/admin/ 를 통해 로그인 화면을 확인

    - 기본값으로 번역기가 실행되어있기 때문에, LANGUAGE_CODE를 설정함으로서, 로그인 화면에 어떤 언어가 표시될 지 확인할 수 있다.

##################################################################################

7. 관리자 사이트에 들어가기

    - 앞서 생성한 슈퍼유저(superuser) 계정으로 로그인해보자.

    - Django 관리 인덱스 페이지를 확인할 수 있다.

    - 편집 가능한 그룹과 사용자와 같은 몇 종류의 컨텐츠를 볼 수 있다. 이것들은 django.contrib.auth 모듈에서 제공된다.

##################################################################################

8. 관리 사이트에서 poll app을 변경 가능하도록 만들기

    - 관리자에게 질문 객체들이 관리자 인터페이스를 가지고 있다는 사실을 알려줘야 한다.

    - polls/admin.py파일을 열고 다음과 같이 수정해 준다.

-----------------------------------
# polls/admin.py

from django.contrib import admin

from .models import Question

admin.site.register(Question)
-----------------------------------

    - Question을 등록했으니 Django가 이를 관리 인덱스 페이지에서 표시해준다.

    - Questions를 클릭하면 질문들을 위핸 change list로 이동한다.

    - 이 페이지는 데이터베이스에 저장된 모든 질문들을 보여주며, 그중 하나를 선택하여 변경할 수 있다.

    - 질문 수정 페이지의 서식은 Question 모델을 통해 자동으로 생성된다.

    - 모델의 각 필드 유형들은 (DateTimeFeild, CharField)의 적절한 HTML 입력 위젯으로 표현된다.
    필드의 각 유형들은 Django 관리 사이트에서 어떻게 표현되어야 하는지 알고 있다.

    - 각각의 DateTimeField는 JavaScript로 작성된 단축 기능과 연결된다.
    날짜는 오늘(Today) 버튼과 달력 팝업에서 입력할 수 있으며,
    시간은 지금(Now) 버튼과 일반적으로 입력하는 시간들을 제공하는 편리한 팝업을 통해 입력할 수 도 있다.

    ** 페이지의 아래 부분에 다음과 같은 몇가지 옵션을 제공한다.

        - 저장(Save) : 이 유형의 객체에 대한 변경사항을 저장하고, 변경된 목록 페이지를 보여준다.

        - 저장 및 편집 계속(Save and continue editing) : 변경사항을 저장하고, 현재 편집창을 갱신한다.

        - 저장 및 다른 이름으로 추가(Save and add another) : 변경사항을 저장하고, 이 유형의 객체에 대한 비어있는 새로운 입력창을 불러온다.

        - 삭제(Delete) : 삭제를 확인하는 페이지를 띄운다.

    - Date published의 값을 오늘(Today)와 지금(Now) 단축 버튼을 눌러 바꿔보자.

    - 그런 후, 저장 및 편집 계속을 누르고, 우측 상단의 히스토리를 눌러 변경 사항(누가, 언제, 무엇을 바꾸었는지)를 확인할 수 있다.




