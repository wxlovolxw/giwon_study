Django 튜토리얼(1) - Channels를 이용한 실시간 채팅(3)


    ***** 데이터 처리 모델

        데이터 처리 모델은 간단하게 데이터를 받는 방식에 따라 달라진다. 이 방식에는 동기식과 비동기식 두가지가 존재한다.

        - 동기식 처리 모델 : 동기식 처리 모델은 데이터의 요청과 결과가 한 자리에 동시에 일어난다.(직렬적) 간단히 말해, 사용자가 데이터를
        서버에게 요청한다면 그 서버가 데이터 요청에 따른 응답을 다시 사용자에게 리턴해 주기 전까지 사용자는 다른 활동을 할 수 없고
        기다려야만 한다. (블록 상태)

            -> 설계가 매우 간단하고 직관적이다.

            -> 요청에 따른 결과가 반환되기 전까지 다른 활동을 할 수 없다.

        - 비동기식 처리 모델 : 데이터의 요청과 결과가 동시에 일어나지 않는다. (병렬적) 서버에게 데이터를 요청한 후, 응답을 계속 기다리지 않아도
        되며, 다른 외부 활동을 수행하여도 되고, 서버에게 다른 요청사항을 보내도 된다. (논블록 상태)

            -> 요청에 따른 결과가 반환되는 시간 동안 다른 작업을 수행할 수 있다.

            -> 동기식보다 설계가 복잡하고 논증적이다.

#############################################################################################

1. consumer를 비동기식으로 다시 설정하기

    - 현재 사용중인 ChatConsumer는 동기적으로 작동한다. 동기적 consumer는 특별한 코드 없이 Django 모델에 접속하여 동기적 I/O 함수를
    호출할 수 있기 때문에 편리하다.

    - 하지만 비동기적인 consumer는 요청에 대해서 다룰때, 부가적인 thread를 생성하지 않기 때문에 더 높은 수준의 퍼포먼스를 제공한다.
    실시간 채팅의 경우 성능이 매우 중요하므로 이 과정이 필요하다.

    - Chatconsumer는 오직 비동기식 라이브러리(Channels와 Channel layer)만 사용할 수 있고, 특히 동기식 Django 모델에 접근할 수 없다.
    그렇기에 문제없이 비동기식으로 쓰여질 수 있다.

    * ChatConsumer가 Django 모델이나 다른 동기식 코드에 액세스 하더라도 비동기식으로 다시 쓸 수 있다.
    그러나 async-native 라이브러리만 사용하는 경우보다 퍼포먼스적인 이득이 적다.

    - ChatConsumer를 비동기적으로 다시 쓰자. chat/consumer.py에 다음의 코드를 입력한다.

--------------------------------------------------------------------------
# chat/consumers.py

import json
from channels.generic.websocket import AsyncWebsocketConsumer

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = self.scope['url_route']['kwargs']['room_name']
        self.room_group_name = 'chat_%s' % self.room_name

        # Join room group
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        await self.accept()

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    # Receive message from WebSocket
    async def receive(self, text_data):
        text_data_json = json.loads(text_data)
        message = text_data_json['message']

        # Send message to room group
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message
            }
        )

    # Receive message from room group
    async def chat_message(self, event):
        message = event['message']

        # Send message to WebSocket
        await self.send(text_data=json.dumps({
            'message': message
        }))
--------------------------------------------------------------------------

    - 기존의 코드와 매우 유사하지만, 다음과 같은 차이점들이 있다.

        - ChatConsumer가 이제 WebsocketConsumer가 아닌 AsyncWebsocketConsumer 으로 부터 상속받는다.

        - 모든 매서드들이 def가 아닌 async def를 통해 정의된다.

        - await는 I/O를 수행하는 비동기적 함수를 호출한다.

        - async_to_sync는 channel layer의 매서드를 불러올 때 더이상 필요하지 않다.

    - consumer에 대한 /ws/chat/ROOM_NAME/ 경로가 아직 작동하는지 확인해보자.

$ python manage.py runserver

    - http://127.0.0.1:8000/chat/lobby/를 통해 두 사용자간의 채팅이 잘 되는지 확인해보자

    -> 잘 작동한다!
