Django 튜토리얼(1) - Channels를 이용한 실시간 채팅(4) : 자동화 테스트

#############################################################################################

1. views 테스트 하기

    - chat server가 지속적으로 작동하는 것을 확인하기 위해, 몇가지 테스트를 해본다.

    - 크롬 웹 브라우저를 컨드롤 하기 위해 Selenium을 이용하여 end-to-end의 테스트 세트를 쓸 것이다.
    이 테스트를 통해 다음을 확인할 수 있다.

        - 같은 채팅방의 모든 사용자가 메시지를 확인할 수 있다.

        - 다른 채팅방의 사용자라면 누구도 메시지를 확인할 수 없다.

    - Selenium을 설치한다.

python -m pip install selenium

    - chat/test.py 파일을 새로 생성한다. 디렉토리는 다음과 같아진다.

-----------------------
chat/
    __init__.py
    consumers.py
    routing.py
    templates/
        chat/
            index.html
            room.html
    tests.py
    urls.py
    views.py
-----------------------

    - chat/test.py에는 다음의 내용을 추가한다.

------------------------------------------------------------------------
# chat/tests.py

from channels.testing import ChannelsLiveServerTestCase
from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.wait import WebDriverWait

class ChatTests(ChannelsLiveServerTestCase):
    serve_static = True  # emulate StaticLiveServerTestCase

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        try:
            # NOTE: Requires "chromedriver" binary to be installed in $PATH
            cls.driver = webdriver.Chrome()
        except:
            super().tearDownClass()
            raise

    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()
        super().tearDownClass()

    def test_when_chat_message_posted_then_seen_by_everyone_in_same_room(self):
        try:
            self._enter_chat_room('room_1')

            self._open_new_window()
            self._enter_chat_room('room_1')

            self._switch_to_window(0)
            self._post_message('hello')
            WebDriverWait(self.driver, 2).until(lambda _:
                'hello' in self._chat_log_value,
                'Message was not received by window 1 from window 1')
            self._switch_to_window(1)
            WebDriverWait(self.driver, 2).until(lambda _:
                'hello' in self._chat_log_value,
                'Message was not received by window 2 from window 1')
        finally:
            self._close_all_new_windows()

    def test_when_chat_message_posted_then_not_seen_by_anyone_in_different_room(self):
        try:
            self._enter_chat_room('room_1')

            self._open_new_window()
            self._enter_chat_room('room_2')

            self._switch_to_window(0)
            self._post_message('hello')
            WebDriverWait(self.driver, 2).until(lambda _:
                'hello' in self._chat_log_value,
                'Message was not received by window 1 from window 1')

            self._switch_to_window(1)
            self._post_message('world')
            WebDriverWait(self.driver, 2).until(lambda _:
                'world' in self._chat_log_value,
                'Message was not received by window 2 from window 2')
            self.assertTrue('hello' not in self._chat_log_value,
                'Message was improperly received by window 2 from window 1')
        finally:
            self._close_all_new_windows()

    # === Utility ===

    def _enter_chat_room(self, room_name):
        self.driver.get(self.live_server_url + '/chat/')
        ActionChains(self.driver).send_keys(room_name + '\n').perform()
        WebDriverWait(self.driver, 2).until(lambda _:
            room_name in self.driver.current_url)

    def _open_new_window(self):
        self.driver.execute_script('window.open("about:blank", "_blank");')
        self.driver.switch_to_window(self.driver.window_handles[-1])

    def _close_all_new_windows(self):
        while len(self.driver.window_handles) > 1:
            self.driver.switch_to_window(self.driver.window_handles[-1])
            self.driver.execute_script('window.close();')
        if len(self.driver.window_handles) == 1:
            self.driver.switch_to_window(self.driver.window_handles[0])

    def _switch_to_window(self, window_index):
        self.driver.switch_to_window(self.driver.window_handles[window_index])

    def _post_message(self, message):
        ActionChains(self.driver).send_keys(message + '\n').perform()

    @property
    def _chat_log_value(self):
        return self.driver.find_element_by_css_selector('#chat-log').get_property('value')
------------------------------------------------------------------------

    - 우리의 테스트 세트는 Django의 일반적인 end-to-end 테스트 세트 대신에 ChannelsLiveServerTestCase를 확장함으로서
    /ws/room/ROME_NAME/와 같은 채널의 경로 구성 내의 URL들이 세트 내부에서 잘 작동하도록 해준다.

    - sqlite3을 통해 테스트를 시행하는데, in-memory database로서 실행되며, 그렇기 때문에 테스트가 정상적으로 작동하지 않는다.

    - 그렇기에 프로젝트에게 sqlite3 데이터베이스가 테스트를 시행하는데에 메모리에 포함될 필요가 없다는 것을 전달해야 한다.

    - myslite/settings.py 파일을 수정하고, TEST argument를 DATABASE setting에 추가해준다.

---------------------------------------------------------------
# mysite/settings.py

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'TEST': {
            'NAME': os.path.join(BASE_DIR, 'db_test.sqlite3')
        }
    }
}
---------------------------------------------------------------

    - 테스트를 실행해 보자.

$ python manage.py test chat.tests

    - 결과 다음을 확인할 수 있다.