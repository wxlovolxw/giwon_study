Consider the following:

    A string,s, of length n where s = c0c1c2...cn-1.
    An integer,k , where k is a factor of n.

    길이가 n인 문자열 s와 k를 입력값으로 받는다.
    k는 n의 인수. -> 조건에 의하면 k가 n의 배수라는 것이 보장된다.

We can split s into n/k subsegments where each subsegment,ti , consists of a contiguous block of k characters in s. Then, use each ti to create string ui such that:

    The characters in ui are a subsequence of the characters in ti.
    Any repeat occurrence of a character is removed from the string such that each character in ui occurs exactly once. In other words, if the character at some index j in ti occurs at a previous index <j in ti, then do not include the character in string ui.

    길이 n의 문자열 s를 길이 k인 n/k개의 ti로 분해.
    ti 사이에 반복된 문자가 존재한다면, 앞의 문자를 그대로 두고 뒤의 문자를 삭제. 그렇게 만들어진 문자열이 ui

Given s and k, print n/k lines where each line i denotes string ui.

Input Format

The first line contains a single string denoting s.
The second line contains an integer,k, denoting the length of each subsegment.

Constraints

1 <= n < 10^4, where n is the length of s
1 <= k <= n
It is guaranteed that n is a multiple of k.
Output Format

Print n/k lines where each line i contains string ui.

Sample Input

AABCAAADA
3
Sample Output

AB
CA
AD

Explanation

String s is split into n/k = 9/3 = 3 equal parts of length k = 3. We convert each ti to ui by removing any subsequent occurrences non-distinct characters in ti:

t0 = "AAB" -> u0 = "AB"
t1 = "CAA" -> u1 = "CA"
t2 = "ADA" -> u2 = "AD"

We then print each  on a new line.

//////////////////////////////////////////////////////////////////

    예를 들어 문자열 s가 ABCD, k=2로 주어진다면 (n=2), i가 1부터.
    u0 = AB -> list_s[0:1] -> list_s[n*(i-1):n*(i-1)+(n-1)]
    와 같은 형태가 될 것이다.

///////////////////////////////////////////////////////////

    DFEDADDA에서 중복 문자를 제거한다면, 중복문자의 리스트 ADEF를 만들고,
    첫 성분부터 중복의 리스트와 비교를 한다.
    만약 해당 순서의 문자가 중복리스트 내에 존재한다면, 중복문자의 리스트 내에서 해당 문자를 지운다.
    0번째 성분인 D에 대해서 본다면, 중복리스트에서 D가 제거된 AEF가 남는다.
    마찬가지로 2번째 성분까지에 대해서 중복리스트에는 A만 남게 된다.
    이제 3번째 성분은 중복리스트에 성분이 없기 때문에 이 문자는 리스트 상에서 제거 된다.

    -> 이와 같은 방식을 사용한다면 순서의 변경없이 중복 문자를 제거 할 수 있다.

    혹은 카운트를 이용해서 카운트 수가 2가 넘어간다면 제거하는 식으로.

    하지만 두 방식 모드 루프를 두번 돌려야 한다. -> 한번의 루프를 통해 해결할 수 있는 방법?

//////////////////////////////////////////////////////////////

    비어있는 list를 생성한 뒤,

    if word in ex_list : ex_list.append(word)
    else :pass

    를 통해 순서대로 첫번째 나오는 문자들만 ex_list에 추가한다.

    그렇다면 ex_list 리스트가 순서가 유지된 채로 중복이 제거된 리스트가 된다.

///////////////////////////////////////////////////////////////////////////

1차 시도

def merge_the_tools(string, k) :

    list_s = list(string)

    n = int(len(list_s)/k)  # 인티져값이 아닌 소숫점 숫자이기 때문에 list slicing에 사용할 수 없었다. 주의.

    i = 1
    u = []
    while i <= n :  # len(list_s) = n 이고, k의 배수이다.
        u.append(list_s[n*(i-1):n*i])   # ui값을 u라는 리스트에 순차적으로 저장하는데에 성공.

        i += 1

    t = []
    for num, ui in enumerate(u) :
        ex_list = []

        for number, word in enumerate(ui) :
            if word not in ex_list :
                ex_list.append(word)
            else : pass

        t.append(''.join(ex_list))

        print(t[num])

    -> 시간 초과.
    -> 두번의 루프는 거의 시간 초과되는듯. 로직 변경 시도.

/////////////////////////////////////////////////////////////////////////////////

    문자열과 숫자가 모두 엄청 클 수 있다.

    만약 숫자가 충분히 커진다면, 모든 알파벳을 포함할 것이므로, 26개의 알파벳을 모두 포함한다면
    더이상 루프를 돌리지 않고 브레이크를 통해 나와준다.

    -> 루프문 2개를 돌리는 것은 피할수 없다고 생각된다.

    -> 문자열의 길이가 충분히 길어졌을 때가 문제가 되므로, 그럴 경우 반드시 26개의 알파벳을 포함할 것이라 판단된다.

//////////////////////////////////////////////////////////////////////////////////

    브레이크를 통해 시간을 줄이려고 했지만 실패.. 로직 변경을 시도해보자.

            if len(ex_list) == 26:
                break
            else : pass

    리스트의 분리와 중복제거의 시행이 관건. 분리와 중복제거를 꼭 시행해야 하는가?

    중복을 제외하지만 순서를 변경시키는 list(set())을 사용해 보자.
    바로 중복은 해 주지만 어떤 방식으로 원래의 순서를 가질 수 있을까

//////////////////////////////////////////////////////////////////////////////////

    collections.OrderDict 를 이용한 방법. -> 자세한 내용은 모르므로 공부해야함.

    from collections import OrderedDict 을 이용하면,
    리스트의 키값들에 대한 정보를 가지고 있기 때문에 순서 변경없이 중복이 제거된다.

    ex_list = []

        for number, word in enumerate(ui) :
            if word not in ex_list :
                ex_list.append(word)
            else : pass

    따라서 이 부분을 다음과 같이 변경하면 된다.

    ex_list = list(OrderedDict.fromkeys(ui)

    -> 하지만 이거도 시간 초과. 애초에 루프문을 통해서 제거해주는 구조인 것 같음.

    -> 중복제거가 아니라 리스트를 나누는것에 대해 생각을 해봐야 할 것 같음.

//////////////////////////////////////////////////////////////////////////////////

    list comprehension을 통한 분할 방법.

    반복문 없이 리스트 내부에서 작성하여 반복하는 방식? -> 공부해야 함.

    u = [list_string[] for i in range()//n]



    my_list = ['a','b','c','d','e','f','g','h','i','j','k']
    n = 3

    result = [my_list[i*n:(i+1)*n]for i in range((len(my_list)+n-1)/n)]
    print(result)

    # 범위 내의 i 에 대해서 반복. -> 결국 반복문과 같은 방식?

    한 리스트에 몇개씩 담을지가 n. 내 코드상에선 k

    u = [list_s[i*k:(i+1)*k] for i in range((len(list_s)+k-1)/k)]



//////////////////////////////////////////////////////////////////////////////

from collections import OrderedDict

def merge_the_tools(string, k) :

    list_s = list(string)

    u = [list_s[i * k:(i + 1) * k] for i in range((len(list_s) + k - 1) // k)]

    t = []
    for num, ui in enumerate(u) :

        ex_list = list(OrderedDict.fromkeys(ui))

        t.append(''.join(ex_list))

        print(t[num])

    -> 성공!

    -> list를 for문을 통한 반복과 list comprehension의 차이에 대해서 알아야 할듯.

////////////////////////////////////////////////////////////////////////////////////

    반복되거나 특정 조건을 만족하는 리스트를 쉽게 만들어 내기 위한 방법.
    -> 리스트를 만드는 단축 코드

    [] 내에 조건식을 걸어주어 리스트를 생성한다.

    ex) [i for i in range(10)]
        [0,1,2,3,4,5,6,7,8,9]

        [i*3 for i in range(10)]
        [0,3,6,9,12,15,18,21,24,27]

        [i for i in range(30) if i%2 == 0]
        [0,2,4,...,28]

//////////////////////////////////////////////////////////////////////////////////
