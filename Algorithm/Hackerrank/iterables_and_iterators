The itertools module standardizes a core set of fast, memory efficient tools that are
useful by themselves or in combination. Together, they form an iterator algebra making
it possible to construct specialized tools succinctly and efficiently in pure Python.

To read more about the functions in this module, check out their documentation here.

You are given a list of N lowercase English letters. For a given integer K, you can select
any K indices (assume 1-based indexing) with a uniform probability from the list.

N개의 영어 소문자 문자열을 받게 된다.

Find the probability that at least one of the K indices selected will contain the
letter: 'a'.

Input Format

The input consists of three lines. The first line contains the integer N, denoting the
length of the list. The next line consists of N space-separated lowercase English
letters, denoting the elements of the list.

The third and the last line of input contains the integer K, denoting the number of
indices to be selected.




Output Format

Output a single line consisting of the probability that at least one of the K indices
selected contains the letter:'a'.

모든 가능한 조합중에서 해당 추출 문자열이 문자 'a'를 포함할 확률을 구한다.

Note: The answer must be correct up to 3 decimal places.


Constraints
1 <= N <= 10
1 <= K <= N

All the letters in the list are lowercase English letters.


Sample Input

4
a a c d
2


Sample Output

0.8333


Explanation

All possible unordered tuples of length 2 comprising of indices from 1 to 4 are:
(1,2), (1,3), (1,4), (2,3), (2,4), (3,4)

Out of these 6 combinations, 5 of them contain either index 1 or index 2 which are
the indices that contain the letter 'a'.

Hence, the answer is 5/6.

/////////////////////////////////////////////////////////////////////////////////

입력 문자열은 다음과 같다.

4   -> 문자열의 길이(문자의 갯수)
a a c d     -> 입력 문자열.
2   -> 묶는 순서쌍 내의 문자 수. 추출 문자열 내의 문자 수

를 통해 생성한 순서쌍은 다음과 같다.
(1,2), (1,3), (1,4), (2,3), (2,4), (3,4)

생성된 순서쌍은 해당 문자열에서 인덱스들의 순서쌍이다.

해서 해당 순서쌍 내에 포함된 인덱스 안에 문자 'a'에 해당하는 인덱스 포함되어있는지 확인을 해야 한다.

///////////////////////////////////////////////////////////////////////////////////

순서쌍을 만들어보지 않고 계산할 수 잇는 방법?

여사건을 생각해 보자. 전체 만들 수 있는 문자열의 갯수는 4C2이며,

a를 제외한 문자의 갯수를 세어서 해당 문자들만으로 순서쌍을 만들수 있는지 확인을 하면 된다.

a의 갯수를 x라 하면 x가 아닌 문자의 갯수는 N-x이기 때문에

a를 제외한 문자들 사이의 순서쌍 갯수는 (4-x)C2 이다.

따라서 문자 a가 순서쌍에 포함될 확률은 (4C2 - (4-x)C2) / 4C2 가 된다.

stdin = input()

-> 열 순서를 받아주는 함수?

    첫번째 열은 N : 문자열 내 문자의 갯수
    두번째 열은 letters : 문자들. -> 안에 'a'가 얼마나 포함되었는지 찾아야 함.
    세번째 열은 n : 순서쌍 내 문자의 갯수.

return 값은 (NCn - (N-x)Cn) / NCn 이 된다.

    C를 어떻게 표현할 것인가?

    -> 팩토리얼과 조합을 함수로서 표현하였다.
    -> 수학적인 공식에 대한 모듈은 이미 존재할 것 같음. -> 찾아 봅시다.

/////////////////////////////////////////////////////////////////////////////////////

입력값이 세 줄인것을 각기 다른 변수에 저장하는 방법.

    -> input 대신에 sys.stdin.readline()을 사용하자.

    입출력 속도가 훨씬 향상된다.

    ex)     a = [int(x) for x in input().split()]
            -> a = [1, 2, 3, 4, 5]

            import sys
            a = map(int, sys.stdin.readline())
            a = [1, 2 ,3 ,4 ,5]

            여러줄인 경우에는

            import sys
            n = input()
            a = [sys.stdin.readline() for i in range(n)]

            a = ["1 2 3", "4 5 6"]

            과 같은 형태.

/////////////////////////////////////////////////////////////////////////////////////

def stdout(X) :

    for i in range(X) :
        count_num, words, com_num = map(str, sys.stdin.readline().split('\n'))

    count_num, com_nums = int(count_num), int(com_num)
    count_x = find_a(words)

    result = 1 - (combination((count_num-count_x),com_num) / combination(count_num,com_num))

    return result

print(stdout("4\na a c d \n2"))

//////////////////////////////////////////////////////////////////////////////////////

입력값의 형태가 각각의 한줄로 구성된 형태? 인 것 같다.

input을 통째로 받아서 split('\n') 을 통해 줄을 나누려 했지만 이와같은 형태가 아니라

각각의 줄에 해당하는 input을 따로 받아서 변수에 저장해야 한다.

count_num = int(input())
words = input()
com_num = int(input())

아직 sys.stdin.readline을 통한 방법은 숙지하지 못함.

//////////////////////////////////////////////////////////////////////////////////////

한개의 테스트 케이스에 대해서 실패함.

입력값
1
a
1

인 경우 1.000의 결과가 나와야 한다.

내 계산 값에 따르면 1 - 0C1/1C1 이 나오게 된다.

따라서 if문을 추가하여 count_num과 count_x가 같다면 result가 1이 되도록 취해주어야 한다.















