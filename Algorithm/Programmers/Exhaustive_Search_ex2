한자리 숫자가 적힌 종이 조각이 흩어져있습니다.
흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.

각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때,
종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.

제한사항

numbers는 길이 1 이상 7 이하인 문자열입니다.
numbers는 0~9까지 숫자만으로 이루어져 있습니다.
"013"은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.

입출력 예

numbers	return
"17"	3
"011"	2

입출력 예 설명

예제 #1
[1, 7]으로는 소수 [7, 17, 71]를 만들 수 있습니다.

예제 #2
[0, 1, 1]으로는 소수 [11, 101]를 만들 수 있습니다.

11과 011은 같은 숫자로 취급합니다.

--------------------------------------------------------------------------

소수란 1을 제외한 수 중에 자기 자신과 1로밖에 나누어지지 않는 수를 소수라 한다.
따라서 자신보다 작은 숫자로 나누어 지는지를 확인하면 된다.
-> 조금 더 효율적으로 하려면 자신보다 1/2배 해준 값으로 나누어 지는지 확인하면 된다.

주어진 문자열을 숫자들의 리스트로 변환하고, 그 리스트의 성분들을 조합하는 방법을 고려해야 한다.

그리고, 이렇게 만들어진 각 성분들이 소수인지를 확인해야 한다.
-> 소수의 갯수를 구하는 것이기 때문에 소수인지를 판단할 수 있는 수학적 아이디어가 필요 할 것 같다.

소수인지 확인하는 라이브러리가 존재한다.

import sympy

sympy.isprime()을 통해 확인 할 수 있다.

-----------------------------------------------------------------------------

[0,1,2]를 통해 확인해 보자.

총 조합 수는

0, 1, 2, 01, 10, 02, 20, 12, 21, 012, 021, 210, 201, 102, 120

이중에 중복되는 수는 앞에 0이 있는 모든 값이 중복된다. -> 수의 리스트를 만들때, 0이 맨 앞에 오는 경우는 다 제거를 해주면 될 것 같다.

1, 2, 10, 20, 12, 21, 210, 201, 102, 120 으로 주어진다면 먼저 1을 제외하고 이중에 소수를 찾아야 한다.

2, 10, 20, 12, 21, 210, 201, 102, 120 -> 먼저 2를 제외한 모든 짝수를 제거해 준다.

소수 -> 2

남은수 201 201이 소수인지 확인해보면 3으로 나누어 떨어지기 때문에 소수가 아니다.

-> 이를 알고리즘으로 짜는 방법을 보면 가장 작은 2부터 나누어 주면서 소수인지를 확인해 본다.

혹은 이 수들중에서 isprime() 의 값이 True인 값들을 count해주면 된다.

***** 그렇다면 어떻게 수들의 조합을 중복되지 않게 생성할 수 있을지가 중요할 것 같다.

from itertools import permutations 를 통해 조합을 구할 수 있다.

list(set)을 통해 중복을 제거할 수 있다. 그리고 0을 제외하는 방법을 생각해 보자.

0이 아닌 숫자가 나오기 전까지의 모든 0을 제거해야 한다.

-------------------------------------------------------------------------------------------

두번의 루프를 통해서 전체범위에 대한 조사를 해야 한다.

먼저 첫번쨰 루프를 통해서는 모든 조합의 수를 구해야 한다.

길이가 1짜리 조합부터 길이가 len(answers)의 길이짜리의 조합까지 를 모두 구하는 것이 목표이다.

from itertools import *

def solution(answers):

    length = len(answers)

    nums = list(answers)

    num_list = []

    for i in range(length):

        permuts = list(permutations(nums, i+2))
        permu_join = "".join(list(permuts))

        num_list.append(permu_join)

    return num_list

    를 통해 조합을 구하고자 하였고, 이렇게 얻은 조합을 리스트의 형태로 바꾸려고 하는데

    길이가 하나짜리 튜플은 '2', 와 같은 형태로 ,를 포함하고 있다.

    -> 길이가 1짜리들은 그냥 중복을 제거하고 추가해주면 될 것 같다.

    여기서 모든 성분들을 분해해서 리스트로 바꾸고 join을 통해 합친다. 그리고 int 의 형태로 바꾸어 준다.
----------------------------------------------------------------------------------------------------------

from itertools import *

def solution(answers):

    length = len(answers)

    nums = list(answers)

    num_list = []

    for i in range(length-1):

        permuts = list(permutations(nums, i+2))

        for i, permut in enumerate(permuts):

            permut_list = list(permut)
            joined_permut_list = "".join(permut_list)

        num_list.append(int(joined_permut_list)

    return num_list

print(solution("123"))

---------------------------------------------------------------------------------------------------------

from itertools import *

def solution(answers):
    length = len(answers)

    nums = list(answers)

    num_list = list(set(map(int,nums)))

    for i in range(length - 1):

        permuts = list(permutations(nums, i + 2))

        for i, permut in enumerate(permuts):
            permut_list = list(permut)
            joined_permut_list = "".join(permut_list)

            num_list.append(int(joined_permut_list))

    return num_list


print(solution("123"))

def isprime(num):
    for i in range(2,round(num//2)+1):
        if num % i == 0 :
            return False
            break
        else : pass

    return True

    -> 을 통해 소수인지 확인할 수 있다.

-----------------------------------------------------------------------------------------------------------------------

처음에 숫자 0이 오는 경우에 count가 중복으로 더해지는 것을 확인 하였다.

여기에 숫자가 중복되지 않도록 리스트에 추가하면서 isprime()을 확인하는 것이 좋을 것 같다.

017을 대입했을 때, 3개의 소수가 나와야 한다. 7, 17, 71

///////////////////////////////////////////////////////////////////////////////////////

대부분의 테스트 케이스는 통과했지만 222를 대입했을때 count가 3으로 나오는 것을 확인했다.

하나짜리를 확인할 때 중복을 제거한 뒤 isprime을 확인하는 식으로 코드를 수정해야 할 것 같다.

----------------------------------------------------------------------------------------

성공적으로 통과했다!