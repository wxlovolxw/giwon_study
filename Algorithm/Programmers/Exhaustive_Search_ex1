수포자는 수학을 포기한 사람의 준말입니다.
수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다.
수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.

1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...
3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...

1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때,
가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한 조건
시험은 최대 10,000 문제로 구성되어있습니다.
문제의 정답은 1, 2, 3, 4, 5중 하나입니다.
가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.

입출력 예

answers	    return
[1,2,3,4,5]	[1]
[1,3,2,4,2]	[1,2,3]

입출력 예 설명

입출력 예 #1

수포자 1은 모든 문제를 맞혔습니다.
수포자 2는 모든 문제를 틀렸습니다.
수포자 3은 모든 문제를 틀렸습니다.
따라서 가장 문제를 많이 맞힌 사람은 수포자 1입니다.

입출력 예 #2

모든 사람이 2문제씩을 맞췄습니다.

------------------------------------------------------------------------------------------------------------------------

입력으로 받는 숫자열은 각 문제의 정답

각 사람들의 정답 갯수를 통해 비교를 하고, 정답의 수가 가장 많은 사람을 반환해야 한다.

가장 간단한 방법은 각각의 성분들을 비교하여 카운트를 하는 방법이다.

def solution(answers):

    length = len(answers)

    a = [2,1,2,3,2,4,2,5]
    b = [3,3,1,1,2,2,4,4,5,5]

    list_1 = [1,2,3,4,5] *(length//5) + list(range(length%5))
    list_2 = a*(length//8)+a[:(length%8)]
    list_3 = b*(length//10)+b[:length%10]

    count_1 = 0
    count_2 = 0
    count_3 = 0

    for i in range(answers):

        if list_1[i] == i:
            count_1 += count_1

    for i in range(answers):
        if list_2[i] == i:
            count_2 += count_2

    for i in range(answers):
        if list_3[i] == i:
            count_3 += count_3

    count_list = [count_1, count_2, count_3]
    return count_list[max(count_list)]


def solution(answers):

    list_1 = [1,2,3,4,5]가 반복.
    list_2 = [2,1,2,3,2,4,2,5]가 반복.
    list_3 = [3,3,1,1,2,2,4,4,5,5]가 반복.


-------------------------------------------------------------------------------------------------------------

def solution(answers):

    length = len(answers)

    a = [2,1,2,3,2,4,2,5]
    b = [3,3,1,1,2,2,4,4,5,5]

    list_1 = [1,2,3,4,5] *(length//5) + list(range(length%5))
    list_2 = a*(length//8)+a[:(length%8)]
    list_3 = b*(length//10)+b[:length%10]

    count_1 = 0
    count_2 = 0
    count_3 = 0

    for i,a in enumerate(answers):
        if list_1[i] == a:
            count_1 += 1

    for i,a in enumerate(answers):
        if list_2[i] == a:
            count_2 += 1

    for i,a in enumerate(answers):
        if list_3[i] == a:
            count_3 += 1

    count_list = [count_1, count_2, count_3]
    answer = []
    for i,count in enumerate(count_list):
        if max(count_list) == count:
            answer.append(i+1)

    return answer

* 해결 방안은 다음과 같았다. 단순히 탐색을 위해 세개의 리스트를 생성하고, 각 성분들을 비교하며 카운트,
카운트의 수가 가장 높을때 해당 카운트를 갖는 인덱스를 반환하였다.

하지만 대부분의 테스트 케이스 에서는 성공하였지만, 일부에서는 실패하였다.
어떤 것이 문제인지 테스트 케이스의 예시를 생각해 봐야 할 것 같다.

-> 시간이 짧게 걸리는 것으로 보아 간단한 테스트 케이스에서 예외적인 사항들을 고려하지 못한 것 같다.

def solution(answers):

    answer_1 = [1,2,3,4,5]
    answer_2 = [2,1,2,3,2,4,2,5]
    answer_3 = [3,3,1,1,2,2,4,4,5,5]

    counts = [0,0,0]

    for i, answer in enumerate(answers):

        if answer_1[i%5] == answer: counts[0] += 1
        if answer_2[i%8] == answer: counts[1] += 1
        if answer_3[i%10] == answer: counts[2] += 1

    answer = []

    for i, count in enumerate(counts):

        if count == max(counts):
            answer.append(i+1)

    return answer

---------------------------------------------------------------------------------------------------

위와 비슷한 풀이인 것 같은데 어디에서 차이가 오는지는 잘 모르겠다.

먼저 방식을 바꾼 것이, 비교가 되는 리스트의 전체를 만들어 준 것에서 answers의 몫을 통해 비교하는 것으로 변경하였다.

딱히 효율적인 것 같지는 않지만, 전체 리스트의 길이와 비교가 그렇게 많지는 않아서 시간 내에 문제를 해결 할 수 있었다.

그리고 count도 딱히 의미는 없지만 리스트의 형태로 한번에 만들었다.

-> 여기서 궁금한 점이 리스트 내에서 같은 값을 갖는 모든 인덱스를 추출하는 방법은 없는지 궁금하다.

그것이 된다면 마지막의 count들의 리스트에서 for문을 통해 각 인덱스를 추출하지 않아도 될 것 같다.




