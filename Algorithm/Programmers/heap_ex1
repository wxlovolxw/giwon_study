이중 우선순위 큐는 다음 연산을 할 수 있는 자료구조를 말합니다.

명령어	수신 탑(높이)
I 숫자	큐에 주어진 숫자를 삽입합니다.
D 1 	큐에서 최댓값을 삭제합니다.
D -1	큐에서 최솟값을 삭제합니다.

이중 우선순위 큐가 할 연산 operations가 매개변수로 주어질 때, 모든 연산을 처리한 후 큐가 비어있으면 [0,0] 비어있지 않으면
[최댓값, 최솟값]을 return 하도록 solution 함수를 구현해주세요.

제한사항

operations는 길이가 1 이상 1,000,000 이하인 문자열 배열입니다.
operations의 원소는 큐가 수행할 연산을 나타냅니다.
원소는 “명령어 데이터” 형식으로 주어집니다.- 최댓값/최솟값을 삭제하는 연산에서 최댓값/최솟값이 둘 이상인 경우, 하나만 삭제합니다.
빈 큐에 데이터를 삭제하라는 연산이 주어질 경우, 해당 연산은 무시합니다.

입출력 예

operations	                return
["I 16","D 1"]	            [0,0]
["I 7","I 5","I -5","D -1"]	[7,5]

입출력 예 설명

16을 삽입 후 최댓값을 삭제합니다. 비어있으므로 [0,0]을 반환합니다.
7,5,-5를 삽입 후 최솟값을 삭제합니다. 최대값 7, 최소값 5를 반환합니다.

///////////////////////////////////////////////////////////////////////////////////////////////////

문자열을 분해해서 튜플의 리스트로 만들어 보자

입력 -> operations

(list(operations[0])[0], int("".join(list(operations[0])[2:]))) 을 통해 입력을 튜플로서 변경할수 있다.

매핑을 이용해서 튜플의 리스트로 만들어보자.

list(map(lambda x : [list(x)[0], int("".join(list(x)[2:]))], operations))
입력 - ["I 16","D 1"]
반환값 - [['I', 16], ['D', 1]] 성공적으로 바꿔주었다.

그렇다면 함수를 설계해야 한다.

비어있는 리스트를 생성하고 []

'I'라면 뒤의 값을 추가한다 -> [].append(x[1]) [16]
'D'에서 1이라면 최대값을 삭제, 'D' -1이라면 최소값을 삭제한다. 비어있다면 연산은 무시. 값이 같다면 하나의값만 삭제

순차적으로 연산하는 알고리즘을 생성해야 하는가? 아니라면 어떤 방법이 있을까

/////////////////////////////////////////////////////////////////////////////////////////////////////////

간단한 순차적인 알고리즘을 생각해보자.

def func(list_num, cal, num) :
    if (cal == 'D') and (num == 1) :
        list_num = list_num[:len(list_num)-1]
    elif (cal == 'D') and (num == -1) :
        list_num = list_num[1:]
    else : list_num.append(num)
    return list_num

def solution(operations):

    a = list(map(lambda x : [list(x)[0], int("".join(list(x)[2:]))], operations))
    num_list = []
    for i in a :
        func(num_list, i[0], i[1])
    return num_list

-> 문제를 잘못 이해했다. 첫번쨰와 마지막값을 제외하는 것이 아니고 최대 최소값을 제외하는 것이다.

//////////////////////////////////////////////////////////////////////////////////////////////////////

heapq 알고리즘을 사용해보자.

-> 토너먼트 형태의 비교를 통해 최소값을 갖도록 하는 알고리즘이다.
-> heapq는 트리형의 노드를 가진다. 루트heap[0]에 항상 최소값을 갖는 불변성이 있다.

heappush(), heappop(), heapify() 를 사용해보자
튜플을 사용할 수도 있다.

///////////////////////////////////////////////////////////////////////////////////////////////////////

a_list = list(map(lambda x : [str(list(x)[0]),int("".join(list(x)[2:])), operations))

[문자 - 숫자]들의 리스트를 만들었다.

for 문을 통해서 순서대로 진행하는 것이 좋을 듯 하다.

문자에 대해서 I라면 heappush로 추가. D라면 heappop으로 제거. 이떄 D가 1인지 -1인지를 통해 최대, 최소를 제거.

비어있는 리스트에 대해서는 제거하지 않도록 해야한다.

하나의 heapq 리스트를 만들어 두고, 하나씩 빼는식으로 해야할 것 같다.

def solution(operations) :

    heap_list = []
    a_list = list(map(lambda x : [str(list(x)[0]),int("".join(list(x)[2:])), operations))

    for a in a_list :
        if heap_list == [] and a[0] == "D" :
            pass
        elif a[0] == "D" and a[1] == 1 :
            hq.heappop(heap_list)
        elif a[0] == "D" and a[1] == -1 :
            heap_list = list(map(lambda x : -x, heap_list))
            hq.heappop(heap_list)
            heap_list = list(map(lambda x : -x, heap_list))
        else :
            hq.heappush(heap_list, a[1])

    return heap_list

-> ["I -45", "I 653", "D 1", "I -642", "I 45", "I 97", "D 1", "D -1", "I 333"]에 대해서는 다른 반환값을 반환하였다.
[['I', -45], ['I', 653], ['D', 1], ['I', -642], ['I', 45], ['I', 97], ['D', 1], ['D', -1], ['I', 333]]

-45 추가, 653 추가, 최대값 제거, -642 추가, 45 추가, 97 추가, 최대값 제거, 최소값 제거, 333추가

[ -45, 333]

//////////////////////////////////////////////////////////////////////////////////////////////////////////

heapq의 특징은 나머지값들은 중요하지 않고 [0]에 가장 작은 값이 온다는 것이다. 나머지 값들의 배열은 상관없는 듯 하다.

-> 토너먼트의 방식으로 가장 작은 값을 찾는 것이기 때문에 그런것 같다.

-> hq.heapify(a) 를 사용하여 리스트를 바로 힙으로 변환할 수도 있다.

import heapq as hq
a = [ -45,  653, 1,  -642,  45, 97,  1, -1,  333]

hq.heapify(a)
print(a)
->[-642, -45, 1, -1, 45, 97, 1, 653, 333] 주어진 배열에 대해서 가장작은 값을 a[0]에 저장하였다.

a = list(map(lambda x : -x, a))
print(a)
[642, 45, -1, 1, -45, -97, -1, -653, -333] 단순히 부호만 변환 하여 주었다. a[0]에 가장 작은 값이 저장되지 않은 상태

hq.heapify(a)
print(a)
[-653, -333, -97, 1, -45, -1, -1, 642, 45] 부호가 변환된 힙에 대해서 가장 작은 값을 a[0]에 다시 저장하였다.

-> 이 방식을 이용하여 풀면 될것 같다.



////////////////////////////////////////////////////////////////////////////////////////////////////////////

import heapq as hq

def solution(operations) :

    a_list = list(map(lambda x : [str(list(x)[0]),int("".join(list(x)[2:]))], operations))
    heap = []

    for i in a_list :
        if i[0] == 'I' :
            hq.heappush(heap, i[1])
        elif heap == [] : pass
        elif i == ['D', 1] :
            heap = list(map(lambda x : -x, heap))
            hq.heapify(heap)
            hq.heappop(heap)
            heap = list(map(lambda x: -x, heap))
            hq.heapify(heap)
        elif i == ['D', -1] :
            hq.heapify(heap)
            hq.heappop(heap)

    if heap == [] : return [0,0]
    else : return [max(heap), min(heap)]

으로 성공하였다!

/////////////////////////////////////////////////////////////////////////////////////////////////

최대값과 최소값을 모두 구하는 경우네는 튜플을 사용하도록 해보자

hq.heappush(heap, (-num, num)) 으로 푸쉬하면,

heapq.heappop(heap)[1] 와 같이 쓰면 1번째 인덱스에 대한 최소값을 가져오므로, 최대값을 반환한다.


