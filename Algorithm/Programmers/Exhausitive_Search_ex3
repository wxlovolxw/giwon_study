Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 노란색으로 칠해져 있고
테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.

갈   갈   갈   갈
갈   노   노   갈
갈   갈   갈   갈

Leo는 집으로 돌아와서 아까 본 카펫의 노란색과 갈색으로 색칠된
격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.

Leo가 본 카펫에서 갈색 격자의 수 brown, 노란색 격자의 수 yellow가
매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항

갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.
노란색 격자의 수 yellow는 1 이상 2,000,000 이하인 자연수입니다.

카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.

입출력 예

brown	yellow	return
10	    2	    [4, 3]
8	    1	    [3, 3]
24	    24	    [8, 6]

-----------------------------------------------------------------------

brown의 총 갯수와 yellow의 총 갯수를 더하면 return하는 배열의 곱과 같아야 한다.

return [x,y] 에서 x*y의 값은 brown + yellow와 같음.

brown + yellow = n으로 받은 후 brown의 갯수가 어떻게 해야 둘러쳐 지는지 확인하면 될 것 같다.

ex) brown 10, yellow 2라고 주어진다면,

-> 총 12개의 타일이므로 가능한 조합이 3*4 밖에 존재하지 않는다
세로와 가로의 최소 길이가 3이고 최대는 round(pow(총타일수,1/2))까지 가능하다. 이 범위 내의 값들에 대해서

가로길이 * 2 + 세로길이 * 2 -4의 값이 brown과 같은지를 확인하고, 같다면 이를 반환하면 된다.

def solution(brown, yellow):

    sum = brown + yellow
    sqrt_sum = round(pow(sum,1/2)) + 1

    for i in range(3, sqrt_sum):
        if sum % i == 0 :
            x = i
            y = sum//i

            if (x*2) + (y*2) - 2 == brown:
                return [max(x,y), min(x,y)]

    answer = []
    return answer

로 간단하게 해결하였다... 세번째 문제인데 너무 쉽게 해결되서 더 당황스럽다...









