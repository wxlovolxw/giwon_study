두 개의 단어 begin, target과 단어의 집합 words가 있습니다.
아래와 같은 규칙을 이용하여 begin에서 target으로 변환하는 가장 짧은 변환 과정을 찾으려고 합니다.

1. 한 번에 한 개의 알파벳만 바꿀 수 있습니다.
2. words에 있는 단어로만 변환할 수 있습니다.

예를 들어
begin이 "hit",
target가 "cog",
words가 ["hot","dot","dog","lot","log","cog"]라면

"hit" -> "hot" -> "dot" -> "dog" -> "cog"와 같이 4단계를 거쳐 변환할 수 있습니다.

두 개의 단어 begin, target과 단어의 집합 words가 매개변수로 주어질 때,
최소 몇 단계의 과정을 거쳐 begin을 target으로 변환할 수 있는지 return 하도록 solution 함수를 작성해주세요.

제한사항
각 단어는 알파벳 소문자로만 이루어져 있습니다.
각 단어의 길이는 3 이상 10 이하이며 모든 단어의 길이는 같습니다.
words에는 3개 이상 50개 이하의 단어가 있으며 중복되는 단어는 없습니다.
begin과 target은 같지 않습니다.
변환할 수 없는 경우에는 0를 return 합니다.

입출력 예

begin	target	words	                                    return
"hit"	"cog"	["hot", "dot", "dog", "lot", "log", "cog"]	4
"hit"	"cog"	["hot", "dot", "dog", "lot", "log"]	        0

입출력 예 설명
예제 #1
문제에 나온 예와 같습니다.

예제 #2
target인 "cog"는 words 안에 없기 때문에 변환할 수 없습니다.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

총 세개의 입력을 받아 몇번의 변환을 통해 바꿀 수 있는지 반환해야 한다.

먼저 최종 변환 형태가 존재해야지 만들 수 있으므로,
target이 words 안에 존재하지 않는다면 0을 반환한다.

먼저 begin에서 하나의 문자만 다른 형태의 문자를 가져와야 한다. 매 단계 비교하며 확인해봐야 하는가?
다음 단계로 넘어갈 수 없다면 0을 반환

유사도를 정의해보자.

def similarity(a,b) :
    count = 0
    for i in range(len(list(a))) :
        if list(a)[i] != list(b)[i] :
            count += 1
    return count

print(similarity("hot", "dot"))

유사도가 0이면 완전히 일치, 1이면 1개의 문자만 다르고 2이면 2개의 문자가 다른 것이다.

유사도가 1이여야만 다음 단계로 넘어가는 식으로. 유사도의 형태로 heappop을 써볼까?

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

["hot", "dot", "dog", "lot", "log", "cog"] 와 같은 words가 있다고 할 때,

유사도가 1인 항목들에서만 리스트를 만든다.

hot - dot, lot
dot - hot, dog, lot
dog - dot, log, cog
lot - hot, dot, log
log - dog, lot, cog
cog - dog, log

-> 최소 경로 찾는 알고리즘은??

        h   i   t
    c
    o       1
    g           1

다른 문자는 다 일치하고 두번째 문자만 i-o로 다른 경우는 1번에 변환 가능
다른 문자는 다 일치하고 세번째 문자만 t-g로 다른 경우는 1번에 변환 가능
다른 문자는 다 일치하고 첫번째 문자만 c-g로 다른 경우는 1번에 변환 불가 -> 몇번을 거쳐야 하는지 계산해야함. 한글자가 같은 문자는 존재 -> 2번에 변환 가능

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-> 공부한 DFS와 BFS를 사용해 보자

먼저 해야할 것은
 주어진 words를 dict의 형태로 만드는 것이다.

각 단어들에 대해서 유사도가 1인 단어들을 이용해 dict 형태의 graph를 생성하는 것이 주요하다.
-> 유사도가 1이 아니라면 graph가 연결되지 않고, 각 단어들 사이의 유사도가 같으므로 다익스트라가 아닌 BFS, DFS를 사용하는 것이 좋을 것 같다.

for word in words :
    graph[word] = [x for x in words if similarity(word,x)==1]

    를 통해 각 단어별로의 유사도가 1인 설정해 주었다. -> root도 포함해서 해야할 것 같다.(코드 수정)

    begin이 root 노드가 되어 이 노드도 포함시키도록 해보자.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

root 노드부터 타켓 노드로의 이동값이 최소값이 되도록 해야 한다.

최소레벨로 도달할 수 있다면 그 레벨까지의 거리를 측정하면 된다.

-> BFS 를 통해 구하려고 한다면, 각 단어별로의 root노드로 부터의 level을 구하고, 그 level을 반환하면 된다.
-> DFS를 사용한다면, root부터 target까지 가는 방법을 다 구한다음, 최소값을 취하는 식으로 해야 한다.

BFS를 사용해 보자.

    def BFS(graph, root) :

        visited = []
        queue = deque([root])

        while queue :

            n = queue.popleft()

            if n not in visited :
                visited.append(n)
                queue += graph[n] - set(visited)

        return visited

-> 우선적으로 탐색하는 방법이 없나?

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

from collections import deque

def similarity(a,b) :
    count = 0
    for i in range(len(list(a))) :
        if list(a)[i] != list(b)[i] :
            count += 1
    return count

def solution(begin, target, words) :

    words.append(begin)
    graph = {}

    for word in words:
        graph[word] = set([x for x in words if similarity(word, x) == 1])

    visited = []    # 이때 레벨의 첫값을 0으로 초기화 [0]
    queue = deque([begin])

    while queue :

        n = queue.popleft()

        if n not in visited:
            visited.append(n)
            queue += graph[n] - set(visited)

    return visitied

print(solution("hit","cog",["hot", "dot", "dog", "lot", "log", "cog"]))

-> 동일 레벨의 표시만 해주면 될 것 같다.

혹은, 경로를 저장하며 거리를 count하고, -> heapq을 통해 저장하는 것이 좋을 것 같다. 거리가 최소가 되도록.
-> 결국 다익스트라와 같은 방식인가?

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

visited에 추가될 때, level의 리스트도 같이 만들어 주면 된다.
level은 len(graph)를 가지며, 어떤 방식으로 설계를 해야할까..

visited와 마찬가지로 visited에 값이 들어갈때 같은 순서로 레벨이 들어가면 된다.

visited와 queue의 관계

queue에 먼저 들어왔던 값들이 먼저 나가게 된다.

visited에는 처음 root가 들어오게 되고 level = 0
이 root에서 방문한 노드들이 들어도면 level = 1이 된다.
그리고 level = 1이 방문한 노드들은 level = 2가 되는 식으로 level 리스트에 추가를 하는 것이 좋다.
visited에 값이 추가될때, 기존의 level을 확인하고 기존 레벨보다 +1이 되도록 하면 된다.

level은 append하는 것이 아닌 inf로 초기화를 해두고, 해당 값을 변경하는 식으로 해야한다. 그래야 도달 할 수 없는 경우 inf의 값을 가지므로
반환값을 조절할 수 있다.

['hit', 'hot', 'dot', 'lot', 'dog', 'log', 'cog']에 값이 들어가는 순서와 queue를 보면

    queue               visited                                         level

    ['hit']             []                                              []

    ['hot']             ['hit']                                         [0]

    ['dot','lot']       ['hit','hot']                                   [0,1]

    ['lot','dog']       ['hit','hot','dot']                             [0,1,2]

    ['dog','log']       ['hit','hot','dot','lot']                       [0,1,2,2]

    ['log','cog']       ['hit','hot','dot','lot','dog']                 [0,1,2,2,3]

    []                  ['hit','hot','dot','lot','dog','log','cog']     [0,1,2,2,3,3,4]

    루프가 돌아 갈 때, hit이라는 root에 대해서 hit이 가질 수 있는 값들에 대해서 먼저 루프를 돌리게 되면,

    -> level은 = [float('inf')] * len(words) 로 초기화가 되어 있고,

    while queue :

        n = queue.popleft()

        for i in graph[n] :

            if i not in visited:

            visited.append(i)
            queue += graph[i] - set(visited)
            level[i]
