수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.

마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때,
완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.

제한사항
마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.
completion의 길이는 participant의 길이보다 1 작습니다.
참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.
참가자 중에는 동명이인이 있을 수 있습니다.

입출력 예

participant	                            completion	                        return
[leo, kiki, eden]	                    [eden, kiki]	                    leo
[marina, josipa, nikola, vinko, filipa]	[josipa, filipa, marina, nikola]	vinko
[mislav, stanko, mislav, ana]	        [stanko, ana, mislav]	            mislav

입출력 예 설명

예제 #1
leo는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.

예제 #2
vinko는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.

예제 #3
mislav는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.

//////////////////////////////////////////////////////////////////////////////////////////////////

participant과 completion의 두 리스트를 입력으로 받게 된다.

그랬을 때, 두 리스트의 차이를 통해 다른 값을 반환하거나 participant 내의 중복된 값을 반환하면 된다.

-> 집합으로 바꾼 후 차집합을 구해주면 될 것 같다.

set과 intersection으로 바꾸고, 중복되는 경우를 해결해야 한다.

def solution(participant, completion):

    set_par = set(participant)
    set_com = set(completion)

    if list(set_par.difference(set_com)) != [] :
        answer = list(set_par.difference(set_com))[0]
    else :
        participant.sort()
        for i, name in enumerate(participant):
            if participant.count(name) >= 2 :
                answer = name

    return answer

-> 가장 간단한 방법으로 차집합을 구하고 이름이 둘 이상인 사람을 찾았지만, 코드가 너무 단순하지 않다.
세번의 루프를 돌기 때문에 상당히 무거워 보인다. 더 간단한 방법에 대해서 생각해 봐야 한다.

list(set_par.difference(set_com)) != []

-> 비어있는 set을 확인하기 위해 != 0을 사용했는데, !={}를 사용하면 되는가? 확인해보자.

-> 채점 결과 효율성과 정확성이 모두 떨어진다.

-> 동명이인이 두명 이상일 가능성이 존재한다. -> set을 이용하면 안된다. 튜플을 사용해야 함.
-------------------------------------------------------------------------------------

def solution(participant, completion):

    par_count = list(map(lambda x : [x, participant.count(x)] , list(set(participant))))
    com_count = list(map(lambda x : [x, completion.count(x)], list(set(completion))))

    for i in len(par_count):

        if par_count[i][1] != com_count[i][1] :

            answer = par_count[i][0]

        break

-> 0도 카운트 하기 위해(없는 사람의 수), completion에서 성분의 수를 count할 때 participant 리스트를 사용하면 된다.

def solution(participant, completion):
    par_count = list(map(lambda x: [x, participant.count(x)], list(set(sorted(participant)))))
    com_count = list(map(lambda x: [x, completion.count(x)], list(set(sorted(participant)))))


    for i in list(range(len(par_count))) :

        if par_count[i][1] != com_count[i][1]:
            answer = par_count[i][0]

    return answer

-> 두번째 코드는 정확성면에서 뛰어났지만, 효율성에서 0점을 받았다. 시간적인 면에서 루프를 최소화
하도록 코드를 수정해야 한다.

-> 루프 내에서 list, set, sort를 진행해서 그런 것인가? 밖으로 빼내서 다시 실행해보자.

--------------------------------------------------------------------------------------

def solution(participant, completion):

    set_par = list(set(sorted(participant)))

    par_count = list(map(lambda x: [x, participant.count(x), completion.count(x)], set_par))

    for i, par in enumerate(par_count) :
        if par[1] != par[2] :
            answer = par[0]

    return answer

-> 리스트 성분들을 따로 밖으로 빼내서 계산해본 결과도 큰 차이가 없었다.

--------------------------------------------------------------------------------------

비교가 아닌 방법으로 해결할 수는 없을까

튜플의 set으로 정리한 뒤, 차집합을 해주면 될 것 같다.

def solution(participant, completion) :

    set_par = list(set(sorted(participant)))

    par_count = set(list(map(lambda x :[x, participant.count(x)], set_par)))
    com_count = set(list(map(lambda x :[x, completion.count(x)], set_par)))

    answer = list(par_count.difference(com_count))[0]

    return answer

-> set을 통해 difference를 구하는 것도 시간이 오래 걸린다. 리스트 자체의 크기가 크기 때문에
루프로 count 하는것이 매우 비효율 적으로 보인다.

----------------------------------------------------------------------------------------

def solution(participant, completion) :

    for name in sorted(participant) :

        if participant.count(name) != completion.count(name) :

            answer = name

    return answer

-> 길이가 긴 두개의 루프를 비교하는 것은 힘든 것 같다.

-> 아예 새로운 방법을 생각해야 하는데, 비교대상이 될 리스트의 길이를 줄이는 방법은?

-> count 하는 방법은 어쨋든 오래 걸리는 것 같다.

-> dict을 쓰는 것이 시간복잡도 측면에서 list보다 훨씬 더 유리하다. hash를 쓰도록 노력해보자.

----------------------------------------------------------------------------------------

def solution(participant, completion):
    answer = ''
    temp = 0
    dic = {}
    for part in participant:
        dic[hash(part)] = part
        temp += int(hash(part))

    for com in completion:
        temp -= hash(com)

    answer = dic[temp]

    return answer

-> 각 value들에 대해서 고유한 key값을 hash를 통해서 저장을 한다.
그리고 0으로 초기화 된 변수 temp에 대해서 연산을 해주는데,
participant의 요소들에 대해서는 hash 값을 더해주고, completion의 요소들에 대해서는 hash값을 빼주게 되면
성분의 수 차이가 하나이기 때문에 마지막에 남은 숫자가 참석은 했지만 통과를 못한 사람의 hash값이 된다.
dict에 key와 value로 저장했기 때문에 이 value를 호출하면 된다.

dic['key'] = value의 형태로 저장.

def solution(participant, completion):

    answer = ''
    sum_hash = 0
    dict= {}

    for name in participant :
        dict[hash(name)] = name
        sum_hash += hash(name)

    for name in completion :
        sum_hash -= hash(name)

    answer = dict[sum_hash]
    return answer

-> dict을 사용하면 list에 비해 시간 복잡도 측면에서 훨씬 더 유리하다.
데이터의 삽입 수정 삭제등의 작업을 할 시에는 hash를 사용하도록 해보자.











