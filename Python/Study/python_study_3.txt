함수

	입력값을 가지고 특정한 일을 수행한 다음 결과값을 내놓는것.
	반복적으로 사용되는 가치 있는 부분을 한 뭉치로 묶어 입력값에 대한 결과값을 돌려주는 것.
	
	구조
		def 함수명(매개변수) : 
			수행할 문장1
			수행할 문장 2
			...

		-> def는 함수를 만들 때 사용하는 예약어. 함수의 이름은 임의로 만들 수 있다.
		함수를 정의한 다음 if, while, for문 등과 마찬가지로 함수에서 수행할 문장을 입력한		다.

		ex) def add(a, b)
			return a + b
		
		a = 3
		b = 4
		c = add(a, b)
		
		print(c)

	-> 매개변수와 인수

		매개변수는 함수에 입력으로 전달되는 값을 받는 변수
		인수는 함수를 호출할 때 전달하는 입력값

		def add(a, b)	# a, b는 매개변수
			return a+b

		print(add(3, 4))	# 3, 4는 인수

	-> 입력값과 결과값에 따른 함수의 형태
	: 입력값과 결과값의 존재 유무에 따라 4가지 유형으로 나뉜다.

	1) 일반적인 함수 - 입력값과 결과값이 존재
		
		def 함수이름(매개변수) : 
			수행할 문장

			return 결과값

		ex) def add(a, b)
			result = a + b
			return result

	2) 입력값이 없는 함수 - 입력값은 없고 결과값만 있는 함수

		ex) def say() : 
			return 'Hi'

		a = say()
		print (a)
		-> Hi

	3) 결과값이 없는 함수 - 입력값은 있고 결과값만 없는 함수

		: 결과값은 오로지 return에 의해서만 호출이 된다. 따라서 함수의 구성요소에서 print		는 수행할 문장에 해당하는 부분이다. 따라서 결과값이 아니다.

		ex) def add(a, b) : 
			print("%d, %d의 합은 %d입니다." % (a, b, a+b))

		a = add(3, 4) -> 3, 4의 합은 7입니다.

		print(a) -> none (거짓을 나타내는 자료형.)	

	4) 입력값도 결과값도 없는 함수

		def say() : 
			print('Hi')

		함수를 사용하는 방법은 다음과 같다

		say() -> Hi

	-> 매개변수를 지정하여 호출하기

		def add(a, b) :
			return a+b

		result = add(a=3, b=7)	-> a에는 3을 b에는 7을 전달
		
		print(result)

		-> 매개변수를 지정하면 다음과 같이 순서에 상관없이 사용할 수 있다.
		ex) result = add(b=5, a=3)

	-> 입력값이 몇개인지 모를때

		def 함수이름 (*매개함수) : 
			수행할 문장

		ex) 입력 숫자들을 모두 더해주는 함수
		def add_many(*args) :
			result = 0
			for i in args :
				result = result + i
			return result

		-> 매개변수 앞에 *을 붙이면 입력값들을 전부 모아서 튜플로 만들어 준다.
		매개변수는 arguments로 주로 args를 사용한다

		ex) def add_mul(choice, *args) : 
			if choice == "add" :
				result = 0
				for i in args :
					result = result + i
			elif choice == "mul" :
				result = 1
				for i in args :
					result = result * i
			return result
		
		result1 = add_mul('add', 1, 2, 3, 4, 5)
		print(result1)

		result2 = add_mul('mul', 1, 2, 3, 4, 5)
		print(result2)

	* 키워드 파라미터 kwargs : **

		키워드 파라미터를 사용할 때는 매개변수 앞에 별 두개를 붙인다.
		
		ex) def print_kwargs(**kwargs) : 
			print(kwargs)

		print_kwargs(a=1)

		-> 입력값들이 딕셔너리의 형태로 축력된다.

	* 함수의 결과값은 언제나 하나이다.
		
		다음과 같은 함수에 대해서 생각해보자
		ex) def add_and_mul(a, b) : 
			return a+b, a*b

		result = add_and_mul(3, 4)

		-> a+b와 a*b의 값을 하나의 튜플(a+b, a*b)로서 값을 돌려준다
		-> 이 하나의 튜플을 두개의 결과값처럼 받고 싶다면 다음과 같이 호출하면 된다
		result1, result2 = add_and_mul(3, 4)

	* 함수는 return문을 만나면 함수를 빠져 나가게 된다.

		위의 예시에서 하나의 튜플에서 두개의 결과를 받기 위해 다음과 같은 함수를 생각하		면

		ex) def add_and_mul(a, b) :
			return a+b
			return a*b
	
		-> 실행하게 되면 a+b만 값이 출력된다. 아래의 *에 대한 반환값은 없는 것과 같다.

	* return의 또 다른 쓰임새

		특별한 상황일 때 함수를 빠져나가고 싶다면 return을 단독으로 써서 함수를 빠져나		갈 수 있다

		ex) def say_nick(nick) :
			if nick == "바보" :
				return
			print("나의 별명은 %s 입니다." % nick)

		say_nick('야호')
		say_nick('바보')

		-> 바보라는 값이 입력되면 return을 통해 함수를 빠져나간다.
		
	* 매개 변수에 초기값 미리 설정하기

		함수의 인수를 전달하는 다른 방법 -> 매개변수에 초기값을 미리 설정하기

		ex) def say_myself(name, old, man=True) :
			print("나의 이름은 %s 입니다." % name)
			print("나이는 %d살입니다." % old)
			if man :
				print("남자입니다.")
			else : 
				print("여자입니다.")

		-> man = True 와 같은 방식으로 매개변수에 미리 값을 넣어 초기값을 설정할 수 있		다. 이런식으로 초기값을 설정해 두면 세번째 변수에 값을 입력하지 않아도 자동으로 		초기값 True를 갖게 된다.

	* 함수 안에서 선언한 변수의 효력 범위

		a = 1
		def vartest(a) :
			a = a + 1
		vartest(a)
		print(a)

		-> 입력값을 전달받는 a는 함수 내에서만 사용하는 변수이기 때문에 함수밖에서는 		값이 변하지 않고 처음에 값을 설정한 1의 값을 받아서 출력되게 된다.
		-> 만약 첫줄에서 a의 값이 초기화 되지 않는 다면 print(a)에서 오류가 발생하게 된		다. a라는 변수를 찾을 수 없기 때문.

	* 함수 안에서 함수 밖의 변수를 변경하는 방법

		1) return 사용하기
		
		a = 1
		def vartest(a) :
			a = a + 1
			return a
		
		a = vartest(a)
		print(a)
		
		-> 함수에서 a값을 반환한 뒤, a = vartest(a) 에 의해서 a의 값이 vartest의 결과값으		로 바뀌게 된다.

		2) global 명령어 사용하기

		a = 1
		def vartest() : 
			global a
			a = a + 1
		
		vartest()
		print(a)

		-> 함수밖의 변수 a를 함수 내에서 사용하기 위해 global이라는 명령어를 사용
		하지만 global 함수는 사용하지 않는 것이 좋다. 함수는 독립적으로 존재하는 것이 가		장 좋다.

		3) lambda : 함수를 생성할 때 사용하는 예약어로 def와 동일한 역할을 한다.
		
		add = lambda a, b : a+b
		result = add(3, 4)
		print(result)

		def add(a, b) :
			return a + b
		result = add(3, 4)
		print(result)

		-> 복잡하지 않은 함수를 대신할 때 사용한다.	
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

사용자 입력 : input

		a = input()
		Life is too short, you need python

		a -> Life is too short, you need python

		-> input으로 입력되는 모든 것을 문자열로서 받아 취급한다.

	-> 프롬프트를 띄워서 사용자 입력 받기

		사용자에게 입력을 받을 때 "숫자를 입력하세요", "이름을 입력하세요" 와 같은 안내		문구를 사용하고 싶을 때 input()의 괄호 안에 질문을 입력하여 프롬프트를 띄워준다. 

		input("질문내용")

		ex) number = input("숫자를 입력하세요 : ")
	
	* print 자세히 알기

		지금껏 print 문이 수행한 일은 입력한 자료형을 출력하는 것.

		* 큰 따옴표""로 둘러싸인 문자열은 + 연산과 동일하다

		ex) print("Life" "is" "too short")
		는 print("Life"+"is"+"too short")와 완전히 동일하다

		* 문자열 띄어쓰기는 콤마로 한다.

		ex) print("Life", "is", "too short")

		* 결과값 한줄에 출력하기

		ex) for i in range(10) :
			print(i, end=' ')

		-> end를 사용해 끝 문자를 지정해야 한 줄에 결과값이 이어서 나온다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

파일 읽고 쓰기

	input과 print를 통한 입출력이 아닌 파일을 통한 입출력 방법

	- 파일 생성하기

		f = open("새파일.txt", 'w')
		f.close()
	
		-> 파일을 생성하기 위해 파이썬 내장함수 open을 사용. open 함수는 파일 이름과 		파일 열기 모드를 입력값으로 받고 결과값으로 파일 객체를 돌려준다.
		
		파일 객체 = open(파일 이름, 파일 열기 모드)
			r - 읽기 모드(읽기만 할 때 사용)
			w - 쓰기 모드(내용을 쓸 때 사용)
			a - 추가 모드(마지막에 새로운 내용을 추가 할 때 사용)

			* 파일을 쓰기 모드로 열면 해당 파일이 이미 존재할 경우 원래 있던 내용이 			모두 사라지고, 존재하지 않으면 새로운 파일이 생성된다.

			* 파일 생성을 원하는 디렉터리가 있다면 다음과 같이 입력한다.
			f = open("C:/doit/새파일.txt", 'w')
			f.close()
		
			* 파일 객체를 닫을때 close()를 이용해 직접 닫는 것이 좋다. 프로그램을 종			료할때 파이썬 프로그램이 열려있는 파일의 객체를 자동으로 닫아 주지만 			열었던 파일을 닫지 않고 다시 사용하려고 할때 오류가 발생할 수 있기 때			문이다.

	- 파일의 쓰기 모드로 출력값 적기

		f = open("C:/Users/user/PycharmProjects/untitled/venv/새파일.txt", 'w')
		for i in range(1, 11) :
			data = "%d번째 줄입니다. \n" %i
			f.write(data)
		f.close()

		-> 명령 프롬프트에서 새파일.txt를 통해 열 수 있다.

		* 위의 프로그램을 아래의 프로그램과 비교해보자
		for i in range(1, 11) :
			data = "%d번째 줄입니다. \n" % i
			print(data)

		-> 아래의 경우 바로 모니터 화면으로 결과를 출력하는 방법이고, 첫번째 방법은 파		일에 결과값을 적어 저장하는 방식이다.
		
	- 프로그램의 외부에 저장된 파일을 읽는 여러가지 방법

		-> readline() 함수의 이용
		
		f = open("C:/Users/user/PycharmProjects/untitled/venv/새파일.txt", 'r')
		line = f.readline()
		print(line)
		f.close()

		-> 새파일.txt의 첫번째 줄을 가져와서 읽는다.

		-> 모든 줄을 가져와서 읽고 싶다면 다음과 같이 작성하면 된다.

		f = open("C:/Users/user/PycharmProjects/untitled/venv/새파일.txt", 'r')
		while True :
			line = f.readline()
			if not line : break
			print(line)
		f.close()

		-> 무한루프에서 각 줄 별로 출력하고, 더이상 줄이 없는 경우에 break를 통해 빠져 		나오게 된다. readline은 줄이 없을 경우 none을 출력한다.

	- 키보드를 통한 입력을 받아 출력하는 경우

		while 1 :
			data = input()
			if not data : break
			print(data)

	- readlines 함수 사용하기
		
		f = open("C:/Users/user/PycharmProjects/untitled/venv/새파일.txt", 'r')
		lines = f.readlines()
		for line in lines : 
			print(line)
		f.close()
		
		-> readline과 다르게 readlines는 모든 줄을 읽어 리스트로서 돌려준다.

	- read 함수 사용하기

		f = open("C:/Users/user/PycharmProjects/untitled/venv/새파일.txt", 'r')
		data = f.read()
		print(data)
		f.close()

		-> 파일 내용 전체를 문자열로 돌려준다.
	
	- 파일에 새로운 내용 추가하기

		w를 사용하여 파일을 열 때 이미 존재하는 파일을 연다면 그 파일의 내용이 모두 사		라지게 된다. 원래 있던 값을 유지하면서 새로운 값만을 추가해야 하는 상황이라면 		추가모드('a')로 파일을 열면 된다.

		f = open("C:/Users/user/PycharmProjects/untitled/venv/새파일.txt", 'a')
		for i in range(11,20) :
			data = "%d번째 줄입니다. \n" % i
			f.write(data)
		f.close()

	- with문과 함께 사용하기

		f = open("foo.txt", 'w')
		f.write("Life is too short, you need python")
		f.close()

		파일을 열면 위와 같이 항상 close로 닫아 주는 것이 좋다. 이러한 기능을 자동적으로 		처리하기 위해 with문을 사용한다. with문을 사용하면 with 블록을 벗어나는 순간 열		린 파일 객체가 자동으로 close 되게 된다.

		with open("foo.txt", 'w') as f :
			f.write("Life is too short, you need python")
	
	* sys 모듈로 매개변수 주기

	-> 명령 프롬프트에서 type a.txt를 입력하면 바로 뒤의 파일 내용을 출력해 준다.

	-> 파이썬도 이와 마찬가지로 sys모듈을 사용하여 매개변수를 직접 줄 수 있다.

		import sys
			
		args = sys.argv[1:]
		for i in args:
			print(i)

		-> 입력받은 인수를 for문을 사용해 하나씩 차례로 출력하는 예이다.

		명령 프롬프트에 python giwon.py aaa bbb ccc 를 입력하면,

		aaa
		bbb
		ccc
		와 같이 출력 된다.	
		
		-> argv[0]은 파일명 giwon.py가 되고, argv[1]은 aaa, 와 같이 차례로 디렉터리에 매		개변수들이 저장된다.

		import sys
		args = sys.argv[1:]
		for i in args :
			print(i.upper(0, end=' ')


