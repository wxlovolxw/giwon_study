
예외 처리

	프로그램을 만들다 보면 수없이 많은 오류가 발생하게 된다. 물론 오류가 발생하는 이유는 프로	그램이 잘못 동작하는 것을 막기 위한 파이썬의 밸이다. 하지만 때때로 이러한 오류를 무시하고 	싶을 때도 있다. 이를 위해 파이선은 try, except를 사용해서 예외적으로 오류를 처리할 수 있게 	해준다.

	- 오류가 발생하는 경우

		오타로 인해 발생하는 구문 오류 같은 것이 아닌 실제 프로그램에서 자주 발생하는 		오류를 중심으로 살펴보자

		1) 디렉터리 안에 없는 파일을 열려고 시도했을 대 발생하는 오류

			f = open("없는파일", 'r')

			-> FIleNotFoundError 오류가 발생하게 된다.

		2) 0으로 다른 숫자를 나누는 경우에 발생하는 오류

			4/0

			-> ZeroDivisionError 오류가 발행하게 된다.

		3) 리스트 범위를 벗어난 값을 호출하는 경우

			a = [1, 2, 3]
			a[4]

			-> IndexError 오류가 발생하게 된다.
	
	- try except 문

		try :
			...
		except [발생오류[as 오류 메시지 변수]] :
			...

		-> try 블록 수행중에 오류가 발생한다면 except 블록이 수행된다. 만약 try 블록에서 		오류가 발생하지 않는다면 except 블록은 수행되지 않는다.
		[]안은 생략 될 수 있으며 except 구문은 다음 세가지 방법으로 사용할 수 있다.

		1) try, except만 쓰는 방법

			try :
				...
			except :
				...

			-> 오류의 종류에 상관없이 오류가 발생하면 except 블록을 수행한다.

		2) 발생 오류만 포함한 except문

			try :
				...
			except 발생 오류 :
				...

			-> 오류가 발생 했을 때 except문에 미리 정해 놓은 오류 이름과 일치할 때			만 except 블록을 수행한다는 뜻

		3) 발생 오류와 오류 메시지 변수까지 포함한 except문

			try : 
				...
			except 발생오류 as 오류 메시지 변수 :
				...

			-> 두번째 경우에서 오류 메시지의 내용까지 알고 싶을 때 사용하는 방법

	- try .. finally

		try 문에는 finally 절을 사용할 수 있다. finally절은 try문 수행 도중 에외 발생 여부에 		상관없이 항상 수행된다. 보통 finally절은 사용한 리소스를 close 해야할 때에 많이 사		용한다.

			f = open('foo.txt', 'w')
			try :
				...
			finally:
				f.close()

	- 여러개의 오류 처리하기

		try문 안에서 여러개의 오류를 처리하기 위해 다음 구문을 사용한다.

			try:
				...
			except 발생오류1 :
				...
			except 발생오류2 :
				...

		0으로 나누는 오류와 인덱싱 오류를 다음과 같이 처리할 수 있다.

			try:
				a = [1,2]
				print(a[3])
				4/0
			except ZeroDivisionError :
				print("0으로 나눌 수 없습니다.")
			except IndexError :
				print("인덱싱 할 수 없습니다.")

			-> a는 2개의 요소값을 가지고 있기 때문에 a[3]는 IndexError를 발생시키므			로 "인덱싱할 수 없습니다."라는 문자열이 출력될 것이다. 인덱싱 오류가 먼			저 발생했으므로 4/0으로 발생되는 ZeroDivisionError 오류는 발생하지 않			았다.

		* 2개 이상의 오류를 동시에 처리하기 위해서 아래와 같이 괄호를 사용하여 함께 묶		어 처리해야 한다.

			except(ZeroDivisionError, IndexError) as e :
				print(e)

	- 오류 회피하기

		프로그래밍을 하다 보면 특정 오류가 발생할 경우 그냥 통과시켜야 할 때가 있다. 다		음 에를 보자.
		
			try:
				f = open("없는파일",'r')
			except FileNotFoundError:
				pass
			
			-> try문 안에서 FileNotFoundError가 발생할 경우에 pass를 사용하여 오류			를 그냥 회피한다.

	- 오류 일부러 발생시키기

		파이썬은 raise 명령어를 사용해 오류를 강제로 발생시킬 수 있다.

		예를 들어 Bird 클래스를 상속받는 자식 클래스는 반드시 fly라는 함수를 구현하도록 		만들고 싶은 경우(강제로 그렇게 하고 싶은 경우)가 있을 수 있다.

			class Bird:
				def fly(self):
					raise NotImplementedError

			-> 위 예제는 Bird 클래스를 상속받는 자식 클래스는 반드시 fly 함수를 구			현해야 한다는 의지를 보여준다. 만약 자식 클래스가 fly 함수를 구현하지 			않은 상태로 fly를 호출한다면 어떻게 될까?

		* NotImplementError는 파이썬 내장 오류로, 꼭 장성해야 하는 부분이 구현이 되지 		않았을 경우 일부러 오류를 일으키기 위해 사용한다.

			class Eagle(Bird):
				pass

			eagle = Eagle()
			eagle.fly()

			-> Eagle 클래스는 Bird 클래스를 상속받는다. 그런데 Eagle 클래스에서 fly			함수를 구현하지 않았기 때문에 Bird클래스의 fly 함수가 호출된다. 그리고 			raise문에 의해 NotImplementError가 발생할 것이다.
		
		NotImplementError가 발생하지 않게 하려면 Eagle클래스에 fly 함수를 반드시 구현		해야 한다. (상속받는 클래스에서 함수를 재구현 하는 것을 메서드 오버라이딩이라고 		부른다.)

			class Eagle(Bird):
				def fly(self):
					print("very fast")

			eagle = Eagle()
			eagle.fly()

			-> fly 함수를 구현한 후 프로그램을 실행하면 오류없이 문장이 출력된다.

	- 예외 만들기

		프로그램 수행 도중 특수한 경우에만 예외 처리를 하기 위해서 종종 예외를 만들어서 		사용한다. 직접 예외를 만들어 보자. 예외는 다음과 같이 파이썬 내장 클래스인 		Exception 클래스를 상속하여 만들 수 있다.

			class MyError(Exception):
				pass

			def say_nick(nick):
				if nick == '바보':
					raise MyError()
				print(nick)

			say_nick("천사")
			say_nick("바보")

			-> 천사가 한번 출력된 후 MyError가 발생한다.

			try:
				say_nick("천사")
				say_nick("바보")
			except MyError:
				print("허용되지 않는 별명입니다.")

		 오류 메시지를 출력했을 때 오류 메시지가 보이게 하려면 오류 클래스에 다음과 같		은 __str__ 메서드를 구현해야 한다. __str__ 메서드는 print(e)처럼 오류 메시지를 		print문으로 출력할 경우에 호출되는 메서드이다.

			class MyError(Exception):
				def __str__(self):
					return "허용되지 않는 별명입니다."


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

내장 함수

	파이썬 내장 함수들은 외부 모듈과는 달리 import가 필요하지 않기 때문에 아무런 설정없이 바	로 사용할 수 있다.

	- abs(x) : 어떤 숫자를 입력 받았을 때, 그 숫자의 절대값을 돌려주는 함수이다.
	
	- all(x) : 반복 가능한 자료형 x를 입력인수로 받아오며 x가 모두 참이면 True, 거짓이 하나라도 	있으면 False를 돌려준다. (반복 가능한 자료형 : 리스트, 튜플, 문자열, 딕셔너리, 집합)

		all([1, 2, 3]) -> True
		all([1, 2, 3, 0]) -> False

	- any(x) : x중 하나라도 참이 있으면 True, 모두 거짓일때만 False를 돌려준다.

	- chr(i) : 아스키(ASCII) 코드 값을 입력받아 그 코드에 해당하는 문자를 출력한다.

	- dir : 객체가 자체적으로 가지고 있는 변수나 함수를 보여준다.

		dir([1, 2, 3]) -> append, count, extend, index, insert, ...
		dir({'1':'a'}) -> clear, copy, get, has_key, items, ...

	- divmod(a, b) : 2개의 숫자를 입력 받으면 a를 b로 나눈 몫과 나머지를 튜플의 형태로 돌려주	는 함수이다.

	- enumerate : enumerate는 '열거하다' 라는 뜻으로, 이 함수는 순서가 있는 자료형을 입력 받	아 인덱스 값을 포함하는 enumerate 객체를 돌려준다.

		for i, name in enumerate(['body', 'foo', 'bar']) :
			print(i, name)
		
		0 body
		1 foo
		2 bar

		-> enumerate를 for문과 함께쓰면 자료형과 현재 순서(index)를 함께 알 수 있다.

	- eval : 실행가능한 문자열을 입력받아 문자열을 실행한 결과값을 돌려준다.

		eval('1+2')
		-> 3
		eval("'hi' + 'a'")
		-> 'hia'

	- filter : 함수의 첫 번째 인수로는 함수 이름을, 두 번째 인수로 그 함수에 차례로 들어갈 반복 		가능한 자료형을 받는다. 그리고 두 번째 인수인 반복 가능한 자료형 요소가 첫번째 인수인 함		수에 입력 되었을 때 반환값이 참인 것만 묶어서 돌려준다.
	
		#positive.py
		def positive(l) : 
			result = []
			for i in l :
				if i > 0 :
					result.append(i)
			return result
		print(positive([1, -3, 2, 0, -5, 6]))

		-> 입력값을 리스트로 받아 각각의 요소를 판별해서 양수 값만 돌려주는 함수이다.
		이를 filter 함수를 사용하면 다음과 같이 간단하게 작성할 수 있다.

		#filter1.py
		def positive(x) : 
			return  x > 0

		print(list(filter(positive, [1, -3, 2, 0, -5, 6])))

		-> lambda를 사용하면 더욱 간편하게 작성할 수 있다. 복잡하지 않은 함수를 사용할 		때 주로 사용.

		list(filter(lambda x : x>0, [1, -3, 2, 0, -5, 6]))

	- hex(x) : 정수 값을 입력받아 16진수로 변환하여 돌려주는 함수이다.

	- id : 객체를 입력받아 객체의 고유 주소 값(레퍼런스)를 돌려주는 함수이다.

	- input() : 사용자 입력을 받는 함수이다. 매개변수로 문자열을 주면  그 문자열은 프롬프트가 	된다.

	- int(x) : 문자열 형태의 숫자나 소수점이 있는 숫자 들을 정수 형태로 돌려주는 함수로, 정수를 	입력으로 받으면 그대로 돌려준다. (소수점 아래는 버림)

		int(x, radix) -> radix 진수로 표현된 문자열을 10진수로 변환하여 돌려준다.

	
	- isinstance(object, class) : 첫 번째 인수로 인스턴스, 두 번째 인수로 클래스 이름을 받는다. 입	력으로 받은 인스턴스가 그 클래스의 인스턴스인지를 판단하여 참이면 True, 거짓이면 False를 	돌려준다.

		class Person : pass

		a = person()
		isinstance(a, Person)
		
		-> True

	- len(s) : 입력값 s의 길이(요소의 전체 개수)를 돌려주는 함수이다.

	- list(s) : 반복 가능한 자료형 s를 입력받아 리스트로 만들어 돌려주는 함수이다.

		list("python")
		-> ['p','y','t','h','o','n']

		리스트를 입력으로 주면 똑같은 리스트를 복사하여 돌려준다.

	- map(f, iterable) : map은 함수(f)와 반복 가능한 (iterable) 자료형을 입력으로 받는다. map은 	입력받은 자료형의 각 요소를 함수 f가 수행한 결과를 묶어서 돌려주는 함수이다.

		#two_times.py
		def two_times(nummberList) :
			result = []
			for number in nuberList :
				result.append(number *2)
			return result

		result = two_times([1, 2, 3, 4])
		print(result)

		* map 함수를 사용하면 다음과 같이 바꿀 수 있다.
		
		def two_times(x) : 
			return x*2

		print(list(map(two_times), [1, 2, 3, 4])))

		-> 리스트의 첫 번째 요소인 1이 two_times 함수의 입력값으로 들어가고 1*2의 과정		을 거쳐서 2가 된다. 다름으로 두번째 요소인 2가 입력에 따라 4가 되고 결과값이 리		스트 [2,4]가 된다. 4개의 요소값에 대해 함수가 모두 수행되면 마지막으로 [2, 4, 6, 8]		의 리스트로 돌려준다. 이것이 map 함수가 하는 일이다.

		* lambda를 사용하면 다음처럼 간략하게 만들 수 있다.

		print(list(map(lambda a : a*2, [1, 2, 3, 4])))

	- max(iterable) : 인수로 반복 가능한 자료형을 입력받아 그 최대값을 돌려주는 함수이다.

	- min(iterable) : max와 반대로, 그 최소값을 돌려주는 함수이다.

	- oct(x) : 정수 형태의 숫자를 8진수 문자열로 바꾸어 돌려주는 함수이다.

	- open(filename, [mode]) : "파일이름"과 "읽기방법"을 입력받아 파일 객체를 돌려주는 함수이		다.

		읽기방법(mode)를 생략하면 기본값인 읽기전용모드(r)로 파일 객체를 만들어준다.
		w - 쓰기 모드로 파일 열기
		r - 읽기 모드로 파일 열기
		a - 추가 모드로 파일 열기
		b - 바이너리 모드로 파일 열기(w,r,a)와 함께 쓰인다.

	- ord(c) : chr과 반대로 아스키코드 값을 돌려주는 함수이다.

	- pow(x,y) : x의 y 제곱한 결과값을 돌려주는 함수이다.

	- range([start,] stop [,step]) : for 문과 함께 자주 사용하는 함수이다. 이 함수는 입력 받은 숫자	에 해당하는 범위 값을 반복 가능한 객체로 만들어 돌려준다.
	
		인수가 하나일 경우 - 시작숫자를 지정해 주지 않으면 함수는 0에서 부터 시작한다.
	
		인수가 2개인 경우 - 시작숫자와 끝 숫자를 나타낸다. 단 끝 숫자는 해당 범위에 포함		되지 않는다. (끝 숫자 미만)

		인수가 3개인 경우 - 세 번째 인수는 숫자들 사이의 거리를 말한다.

	- round(number[,ndigits]) : 숫자를 입력받아 반올림해 주는 함수이다.

	- sorted(iterable) : 입력값을 정렬한 후 그 결과를 리스트로 돌려주는 함수이다. (올림차순)

	- str(object) : 문자열 형태로 객체를 변환하여 돌려주는 함수이다.

	- sum(iterable) : 입력받은 리스트나 튜플의 모든 요소의 합을 돌려주는 함수이다.

	- tuple(iterable) : 반복 가능한 자료형을 입력받아 튜플 형태로 바꾸어 돌려주는 함수이다. 만약 	튜플이 입력으로 들어오면 그대로 돌려준다.

	- type(object) : 입력값의 자료형이 무엇인지 알려주는 함수이다.

	- zip(*iterable) : 동일한 개수로 이루어진 자료형을 묶어 주는 역할을 하는 함수이다. (*iterable	은 반복 가능한 자료형 여러개를 입력할 수 있다는 의미이다.)	
		
		list(zip([1, 2, 3], [4, 5, 6]))
		-> [(1, 4), (2, 5), (3, 6)]

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

외장함수

	전 세계 파이썬 사용자들이 만든 유용한 프로그램을 모아 놓은 것이 파이썬 라이브러리이다. 모		든 라이브러리를 알 필요는 없고 어떤 일을 할 때 어떤 라이브러리를 사용해야 한다는 정도만 		알면 된다. 그러기 위해 어떤 라이브러리가 존재하고 어떻게 사용하는지 알아야 한다. 자주 사		용되고 꼭 알아 두면 좋은 라이브러리를 중심으로 살펴보자.

	* 파이썬 라이브러리는 파이썬을 설치할 때 자동으로 컴퓨터에 설치한다.
	
- sys 모듈 : 파이썬 인터프리터가 제공하는 변수와 함수를 직접 제어할 수 있게 해주는 모듈

	1) 명령 행에서 인수 전달하기 - sys.argv

		C:/User/home>python test.py abc pey guido

		-> 명령 프롬프트 창에 위 예처럼 test.py 뒤에 또 다른 값을 함께 넣어 주면 sys.argv 			리스트에 그 값이 추가된다.

		예제를 따라하며 확인해 보자.

		argv_test.py 파일은 C:\doit\mymod 디렉터리에 저장했다고 가정한다.

			#argv_test.py	
			import sys
			print(sys.argv)

		명령 프롬프트 창에서 mymod 디렉터리로 들어간 뒤 다음과 같이 실행해 보자.

			C:\doit\mymod>python argv_test.py you need python

		-> pthon 명령어 뒤의 모든 것들이 공백을 기준으로 나뉘어서 sys.argv 리스트의 요			소가 된다.

		-> ['argv_test.py', 'you', 'need', 'python'] : 파일명과 뒤의 입력한 문자열이 차례로 리		스트의 요소로 입력된다.

		*** 명령 프롬프트에서는 /든 \든 상관 없지만 소스코드 안에서는 반드시 / 또는 \\ 			기호를 사용해야 한다.

	2) 강제로 스크립트 종료하기 - sys.exit

		sys.exit() : Ctrl+Z나 Ctrl+D를 눌러서 대화형 인터프리터를 종료하는 것과 같은 기능			을 한다. 프로그램 파일 안에서 사용하면 프로그램을 중단시킨다.

	3) 자신이 만든 모듈 불러와 사용하기 - sys.path

		파이썬 모듈들이 저장되어 있는 위치를 나타낸다. 즉 이 위치에 있는 파이썬 모듈은 			경로에 상관없이 어디에서나 불러올 수 있다.

		import sys
		sys.path

		#path_append.py
		import sys
		sys.path.append("C:\doit\mymod")

		-> 위와 같이 파이썬 프로그램 파일에서 sys.path.append를 사용해 경로 이름을 추가			할 수 있다. 이렇게 하고 난 후에는 C:\doit\mymod 디렉터리에 있는 파이썬 모듈을 		불러와서 	사용할 수 있다.

	
- pickle

	객체의 형태를 그대로 유지하면서 파일에 저장하고 불러올 수 있게 하는 모듈이다. 다음 예는 	pickle 모듈의 dump 함수를 사용하여 딕셔너리 객체인 data를 그대로 파일에 저장하는 방법을 	보여준다.

		import pickle
		f = open("test.txt", 'wb')
		data = {1: 'python', 2: 'you need'}
		pickle.dump(data, f)
		f.close()

	다음은 pickle.dump로 저장한 파일을 pickle.load를 사용해 원래 있던 딕셔너리 객체(data) 그대	로 불러오는 예이다.

		import pickle
		f = open("test.txt", 'rb')
		data = pickle.load(f)
		print(data)

	-> 예에서는 딕셔너리형 객체를 사용했지만 어떤 자료형에서도 저장하고 불러올 수 있다.

- OS

	OS 모듈은 환경변수나 디렉터리, 파일 등의 OS 자원을 제어할 수 있게 해주는 모듈이다.

	1) 내 시스템의 환경 변수값을 알고 싶을 때 - os.environ

		시스템은 제각기 다른 환경 변수 값을 가지고 있는데, os.environ은 현재 시스템의 환		경 변수 값을 보여준다.

		import os
		os.environ
		
		위의 결과값은 사용자의 시스템 정보이다. os.environ은 환경 변수에 대한 정보를 딕		셔너리 객체로 돌려준다. 

		돌려받는 객체가 딕셔너리이기 때문에 다음과 같이 호출할 수 있다.

		os.environ['PATH']

	2) 디렉터리 위치 변경하기 - os.chdir

		os.chdir를 사용하면 다음과 같이 현재 디렉터리 위치를 변경할 수 있다.

		os.chdir("C:\WINDOWS")

	3) 디렉터리 위치 돌려받기 - os.getcwd

		os.getcwd는 현재 자신의 디렉터리 위치를 돌려준다.

	4) 실행한 시스템 명령어의 결과값 돌려받기 - os.popen

		os.popen은 시스템 명령어를 실행한 결과값을 읽기 모드 형태의 파일 객체로 돌려준		다.

		f = os.popen("dir")

		읽어들인 파일 객체의 내용을 보기 위해서는 다음과 같이 하면 된다.
		
		print(f.read())

	5) 기타 유용한 os 관련 함수

		os.mkdir(디렉터리) - 디렉터리를 생성한다.

		os.rmdir(디렉터리) - 디렉터리를 삭제한다. 단, 디렉터리가 비어있어야 삭제가 가능하		다.

		os.umlink(디렉터리) - 파일을 지운다.
		
		os.rename(src, dst) - src라는 이름의 파일을 dst라는 이름으로 바꾼다.

- shutil
	
	파일을 복사해 주는 파이썬 모듈이다.

	다음 예시는 src라는 이름의 파일을 dst로 복사한다. 만약 dst가 디렉터리 이름이라면 src라는 	파일의 이름으로 dst 디렉터리를 복사하고 동일한 파일 이름이 있을 경우에는 덮어쓴다.	

	import shutil
	shutil.copy("srrc.txt","dst.txt")

- glob

	가끔 파일을 읽고 쓰는 기능이 있는 프로그램을 만들다 보면 특정 디렉터리에 있는 파일 이름 	모두를 알아야 할 때가 있다. 이럴 때 사용하는 모듈이 바로 glob이다.

	디렉터리에 있는 파일을 리스트로 만들기 - glob(pathname)

		glob 모듈은 디렉터리 안의 파일들을 읽어서 돌려준다. *, ? 등 메타 문자를 써서 원하		는 파일만 읽어 들일 수도 있다.

		다음은 C:\doit 디렉터리에 있는 파일 중 이름이 mark로 시작하는 파일을 모두 찾아		서 읽어들이는 에이다.

		import glob
		glob.glob("C:\doit\mark*")

- tempfile

	파일을 임시로 만들어서 사용할 때 유용한 모듈이 바로 tempfile이다.

	tempfile.mkstemp()는 중복되지 않는 임시 파일의 이름을 무작위로 만들어서 돌려준다.

		import tempfile
		filename = tempfile.mkstemp()
		filename

	tempfile.TemporaryFile()은 임시 저장 공간으로 사용할 파일 객체를 돌려준다. 이 파일은 기본	적으로 바이너리 쓰기 모드(wb)를 갖는다. f.close()가 호출되면 이 파일 객체는 자동으로 사라진	다.

		import tempfile
		f = tempfile.TemporaryFile()
		f.close()

- time

	시간과 관련된 time 모듈에는 함수가 굉장히 많다. 그중 가장 유용한 몇 가지만 알아보자

	1) time.time() : UTC(Universal Time Coordinated 협정 세계 표준시)를 사용하여 현재 시간을 	실수 형태로 돌려주는 함수이다. 1970년 1월 1일 0시 0분 0초를 기준으로 지난 시간을 초 단위	로 돌려준다.

		import time
		time.time()

	2) time.localtime : time.time()이 돌려준 실수 값을 사용해서 연도, 월, 일, 시, 분, 초 의 형태로 	바꾸어 주는 함수이다.

		time.localtime(time.time())

	3) time.asctime : 위 time.localtime에 의해서 반환된 튜플 형태의 값을 인수로 받아서 날짜와 	시간을 알아보기 쉬운 형태로 돌려주는 함수이다.

		time.asctime(time.localtime(time.time()))

	4) time.ctime : 위의 time.asctime(time.localtime(time.time()))를 time.ctime()을 사용해 간단하	계 표시할 수 있다. 하지만 다른점은 ctime은 항상 현재의 시간만을 돌려준다.

		time.ctime()

	5) time.strftime : 시간에 관계된 것을 세밀하게 표현하는 여러가지 포맷 코드를 제공한다.

		time.strftime('출력할 형식 포맷 코드', time.localtime(time.time()))

			%a	요일 줄임말 	Mon
			%A	요일 		Monday
			%b	달 줄임말		Jan
			%B	달		January
			%c	날짜와 시간을 출력	06/01/01	17:22:21
			%d	날(day)		[01,31]
			%H	시간(24시간)	[00,23]
			%I	시간(12시간)	[01,12]
			%j	1년중 누적날짜	[001,366]
			%m	달		[01,12]
			%M	분		[01,59]
			%p	AM or PM	AM
			%S	초		[00,59]
			%U	1년중 누적 주(일) 	[00,53]
			%w 	숫자로 된 요일	[0(일요일),6]
			%W	1년중 누적 주(월)	[00, 53]
			%x	현재 날짜 출력	06/01/01
			%X	현재 시간 출력	17:22:21
			%Y	년도 출력		2001
			%%	문자		%
			%y	세기 제외한 년도	01

		다음은 time.strftime을 사용하는 예이다.

			import time
			time.strftime('%x', time.localtime(time.time()))
	
	6) time.sleep : 주로 루프 안에서 많이 사용한다. 이 함수를 사용하면 일정 시간간격을 두고 루	프를 실핼할 수 있다. 다음 예를 보자.

		#sleep1.py
		import time
		for i in range(10) :
			print(i)
			timesleep(1)

		-> 위 예는 1초 간격으로 0부터 9초까지 숫자를 출력한다.

- calendar

	파이썬에서 달력을 볼 수 있게 해주는 모듈이다.
	
	calendar.calendar(년도)로 사용하면 그 해 전체 달력을 볼 수 있다. 

		import.calendar
		print(calendar.calendar(2015))

		calendar.prcal(2015)도 같은 결과를 얻을 수 있다.

	다음 예는 2015년도 12월의 달력만을 보여준다.

		calendar.prmonth(2015,12)

	- calendar.weekday : weekday(연도, 월, 일) 함수는 그 날짜에 해당하는 요일 정보를 돌려준다. 	월요일부터 0이라는 값을 돌려준다.

	- calendar.monthrange(연도, 월) : 입력받은 달의 1일이 무슨요일인지와 그 달이 며칠까지 있	는 지를 튜플의 형태로 돌려준다.

- random

	random은 난수(규칙이 없는 임의의 수)를 발생시키는 모듈이다. random과 randint에 대해 알	아보자.

	다음은 0.0에서 1.0 사이의 실수 중에서 난수 값을 돌려주는 예를 보여준다.

		import random
		random.random()

	다음은 1에서 10사이의 정수 중에서 난수 값을 돌려준다.

		ramdom.randint(1, 10)

	random 모듈을 사용해서 재미있는 함수를 하나 만들어 보자.

		# random_pop.py
		import random
		def random_pop(data) :
			number = random.randint(0, len(data)-1)
			return data.pop(number)

		if __name__=="__main__":
			data = [1, 2, 3, 4, 5]
			while data :
				print(random_pop(data))

		-> 위 random_pop함수는 리스트 요소 중에서 무작위 하나를 꺼낸 후에 그 값을 돌		려주고 리스트 내에서 그 요소를 제거한다.

	random_pop 함수는 random 모듈의 choice 함수를 사용하여 다음과 같이 좀 더 직관적으로 	만들 수도 있다.

		def random_pop(data) :
			number = random.choice(data)
			data.remove(number)
			return number

	- 리스트의 항목을 무작위로 섞고 싶을 때는 random.shuffle 함수를 사용하면 된다.

		import random
		data = [1, 2 ,3 ,4 ,5]
		random.shuffle(data)
		data	

- webbrowser

	자신의 시스템에서 사용하는 기본 웹 브라우저를 자동으로 실행하는 모듈이다. 다음 예제는 웹 	브라우저를 자동으로 실행하고 해당 URL인 google.com으로 가게 해준다.

		import webbrowser
		webbrowser.open("http://google.com")

	- webbrowser.open 함수는 웹 브라우저가 이미 실행된 상태라면 입력주소로 이동, 웹브라우저	가 실행중이지 않은 상태라면 새 웹브라우저를 실행한 후 해당 주소로 이동한다.

	- webbrowser.open_new 함수는 이미 웹 브라우저가 실행된 상태더라도 새로운 창으로 해당 	주소가 열리게 한다.

- threading

	컴퓨터에서 동작하고 있는 프로그램을 프로세스(Process)라고 한다. 보통 1개의 프로세스는 한 	가지 일만 하지만 스레드(Thread)를 사용하면 한 프로세스 안에서 2가지 또는 그 이상의 일을 	동시에 수행할 수 있다.

		#thread_test.py
		import time

		def long_task() :
			for i in range(5) :
				time.sleep(1)
				print("working:%s\n" % i)

		print("Start")

		for i in range(5) :
			long_task()

		print("End")

		-> long_task 함수는 수행하는 데 5초의 시간이 걸리는 함수이다. 위 프로그램은 이 		함수를 총 5회 반복해서 수행하는 프로그램으로 5초가 5번 반복되므로 총 25초의 시		간이 걸린다.

		-> 이 함수를 스레드를 사용하면 5초의 시간이 걸리는 long_task함수를 동시에 실행		시켜 시간을 줄일 수 있다.

		#thread_test.py
		import time
		import threading
		
		def long_task() :
			for i in range(5) :
				time.sleep(1)
				print("working:%s\n" % i )

		print("Start")

		thread = []
		for i in range(5) :
			t = threading.Thread(target=long_task) #스레드를 생성한다.
			threads.append(t)

		for t in threads :
			t.start()	#스레드를 실행한다.

		print("End")

		-> 이와 같이 프로그램을 수정하면 25초 걸리던 작업이 5초 정도에 수행되는 것을 확		인 할 수 있다. threading.Thread를 사용하면 스레드 객체가 동시 작업을 가능하게 해		주기 때문이다.

		하지만 위 프로그램은 Start와 End가 먼저 출력 된 후에 스레드 결과가 출력되는 것을 		확인 할 수 있다. 그리고 프로그램 또한 정상적으로 종료되지 않는다. 우리가 기대하		는 것은 Start가 출력되고 그 다음 스레드의 결과가 출력된 후 마지막으로 End가 출력		되는 것이다. 이 문제를 해결하기 위해 다음과 같이 프로그램을 수정해야 한다.

		#thread_test.py
		import time
		import threading

		def long_task():
			for i in range(5):
				time.sleep(1)
				print("working:%s \n" % i)

		print("Start")
		
		threads = []
		for i in range(5) :
			t = threading.Thread(target=long_task)
			threads.append(t)

		for t in threads :
			t.start()

		for t in threads :
			t.join()	#join으로 스레드가 종료될때까지 기다린다.

		print("End")

		-> 스레드의 join 함수는 해당 스레드가 종료될 때까지 기다리게 한다. 따라서 위와 		같이 수정하면 우리가 원하던 출력을 볼 수 있다.

	***** 파이썬은 싱글 프로세스 기반으로 한번에 한가지 프로세스 밖에 수행 할 수 없다. 스레딩	을 통한 프로세싱은 글로벌 락에 의해 매 과정이 락이 걸리므로 데이터를 많이 차지하는 프로	세스에 대해서는 시간 단축이 많이 되지 않는다. 그러므로 시간을 줄이기 위한 방법은 스레딩 	보다는 멀티 프로세싱이 더 좋다고 판단된다. 

