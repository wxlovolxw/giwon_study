
Dictionaries

    - 기존의 방식은 인구에 대한 리스트와 국가에 대한 리스트를 따로 작성.
    - 해당 순번의 인덱스를 이용한 값을 추출하는 식으로 국가의 인구수를 알아 냈다.
    - 효율적이지 않으며 직관적이도 않다.

    pop = [30.55, 2.77, 39.21]
    countries = ["afghanistan","albania","algeria"]

    -> word = {"afghanistan":30.55, "albania":2.77, "algeria":39.21}
    word["albania"]
    와 같은 형식으로 dictionary를 작성

//////////////////////////////////////////////////////////////////////////

Use the index() method on countries to find the index of 'germany'. Store this index as ind_ger.
Use ind_ger to access the capital of Germany from the capitals list. Print it out.

    # Definition of countries and capital
    countries = ['spain', 'france', 'germany', 'norway']
    capitals = ['madrid', 'paris', 'berlin', 'oslo']

    # Get index of 'germany': ind_ger
    ind_ger = countries.index('germany')

    # Use ind_ger to print out capital of Germany
    print(capitals[ind_ger])

    -> 개별의 두 리스트에서 인덱스 추출을 한 뒤, 해당 인덱스의 값을 통한 값의 호출.
    -> 매우 비효율적인 것 같다.

//////////////////////////////////////////////////////////////////////////

With the strings in countries and capitals, create a dictionary called europe with 4 key:value pairs. Beware of capitalization! Make sure you use lowercase characters everywhere.
Print out europe to see if the result is what you expected.

    # Definition of countries and capital
    countries = ['spain', 'france', 'germany', 'norway']
    capitals = ['madrid', 'paris', 'berlin', 'oslo']

    # From string in countries and capitals, create dictionary europe
    europe = { 'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway' :'oslo'}

    # Print europe
    print(europe)

//////////////////////////////////////////////////////////////////////////

Check out which keys are in europe by calling the keys() method on europe. Print out the result.
Print out the value that belongs to the key 'norway'.

    # Definition of dictionary
    europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }

    # Print out the keys in europe
    print(europe.keys())

    # Print out value that belongs to key 'norway'
    print(europe['norway'])

    -> :(콜론) 앞에 값이 키이고, 뒤의 값이 value라고 생각하면 될 듯 싶다.

//////////////////////////////////////////////////////////////////////////

Dictionary Recap

    - 재정의를 통해 값을 추가해도 원래의 값들만 반환한다. -> 수정이 안된다.
    - 만든 후에 수정이 불가능하다.

    딕셔너리명["key"] = value    -> 를 통해서 추가한다.
    del(딕셔너리명["제거할 key"])   -> 를 통해 제거한다.

    리스트 - 순서가 중요하고, 전체 데이터 하위 집합을 쉽게 선택하고 싶을 때.
    딕셔너리 - 데이터를 찾는 테이블의 조회, 빠르고 고유한 키를 지정할 수 있을 때.

//////////////////////////////////////////////////////////////////////////

Add the key 'italy' with the value 'rome' to europe.
To assert that 'italy' is now a key in europe, print out 'italy' in europe.
Add another key:value pair to europe: 'poland' is the key, 'warsaw' is the corresponding value.
Print out europe.

    # Definition of dictionary
    europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }

    # Add italy to europe
    europe['italy'] = 'rome'

    # Print out italy in europe
    print('italy' in europe)

    # Add poland to europe
    europe['poland'] = 'warsaw'

    # Print europe
    print(europe)

//////////////////////////////////////////////////////////////////////////

The capital of Germany is not 'bonn'; it's 'berlin'. Update its value.
Australia is not in Europe, Austria is! Remove the key 'australia' from europe.
Print out europe to see if your cleaning work paid off.

    # Definition of dictionary
    europe = {'spain':'madrid', 'france':'paris', 'germany':'bonn',
              'norway':'oslo', 'italy':'rome', 'poland':'warsaw',
              'australia':'vienna' }

    # Update capital of germany
    europe['germany'] = 'berlin'

    # Remove australia
    del(europe['australia'])

    # Print europe
    print(europe)

//////////////////////////////////////////////////////////////////////////

Use chained square brackets to select and print out the capital of France.
Create a dictionary, named data, with the keys 'capital' and 'population'. Set them to 'rome' and 59.83, respectively.
Add a new key-value pair to europe; the key is 'italy' and the value is data, the dictionary you just built.

    # Dictionary of dictionaries
    europe = { 'spain': { 'capital':'madrid', 'population':46.77 },
             'france': { 'capital':'paris', 'population':66.03 },
             'germany': { 'capital':'berlin', 'population':80.62 },
             'norway': { 'capital':'oslo', 'population':5.084 } }


    # Print out the capital of France
    print(europe['france']['capital'])

    # Create sub-dictionary data
    data = {'capital':'rome','population':59.83}

    # Add data to europe under key 'italy'
    europe['italy'] = data

    # Print europe
    print(europe)



