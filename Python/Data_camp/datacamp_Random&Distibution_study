
Random Numbers

    How to solve problems?

        1) Analytical
        2) Simulate the process -> Hackers statistic

    - Random generators

        import numpy as np
        np.random.rand()
        -> 0과 1 사이의 랜덤 난수가 호출된다. Pseudo-random numbers

        np.random.seed(123)
        np.random.rand()    -> 0.532128978465
        np.random.rand()    -> 0.231531546844

        다시 seed를 123으로 설정하게 되면,
        np.random.seed(123)
        np.random.rand()    -> 0.532128978465
        np.random.rand()    -> 0.231531546844
        -> 처음 호출된 값과 정확히 동일한 값들을 얻게 된다.
        -> 무작위 수를 호출하지만, 같은 시드에 대해서는 동일한 값들을 반환.
        -> 무작위이지만 재생성이 있다. '재생성'이 보장되기에 유용하다.

    ex) import numpy as np
        np.random.seed(123)
        coin = np.random.randint(0,2)   # 0 또는 1이 나오도록. 인티져중 앞의값부터, 뒤의 값은 포함되지 않는다.

//////////////////////////////////////////////////////////////////////////////

Import numpy as np.
Use seed() to set the seed; as an argument, pass 123.
Generate your first random float with rand() and print it out.

    # Import numpy as np
    import numpy as np

    # Set the seed
    np.random.seed(123)

    # Generate and print random float
    print(np.random.rand())

    -> datacamp에서 돌린 값과 pycharm에서 돌린 값이 같게 나온다.
    -> 다른데서 프로그램을 돌려도 정해진 시드는 같은 값을 반환하는 것 같다.

//////////////////////////////////////////////////////////////////////////////

Use randint() with the appropriate arguments to randomly generate the integer 1, 2, 3, 4, 5 or 6. This simulates a dice. Print it out.
Repeat the outcome to see if the second throw is different. Again, print out the result.

    # Import numpy and set seed
    import numpy as np
    np.random.seed(123)

    # Use randint() to simulate a dice
    print(np.random.randint(1,7))

    # Use randint() again
    print(np.random.randint(1,7))

//////////////////////////////////////////////////////////////////////////////

Roll the dice. Use randint() to create the variable dice.
Finish the if-elif-else construct by replacing ___:
If dice is 1 or 2, you go one step down.
if dice is 3, 4 or 5, you go one step up.
Else, you throw the dice again. The number of eyes is the number of steps you go up.
Print out dice and step. Given the value of dice, was step updated correctly?

    # Numpy is imported, seed is set
    import numpy as np

    # Starting step
    step = 50

    # Roll the dice
    dice = np.random.randint(1,7)

    # Finish the control construct
    if dice <= 2 :
        step = step - 1
    elif dice > 2 and dice <=5 :
        step += 1
    else :
        step = step + np.random.randint(1,7)

    # Print out dice and step
    print(dice, step)

    -> seed를 사용하지 않기 때문에 시행할 때 마다 다른 값이 나온다.

//////////////////////////////////////////////////////////////////////////////

Random Walk

    Known in science
        - path of molecules
        - gambler's financial status

    ex) import numpy as np
        np.random.seed(123)
        outcomes = []
        for x in range(10) :
            coin = np.random.randint(0,2)
            if coin == 0 :
                outcomes.append("heads")
            else :
                outcomes.append("tails")
        print(outcomes)

        tails = [0]
        for x in range(10) :
            coin = np.random.randint(0,2)
            tails.append(tails[x] + coin)
        print(tails)


//////////////////////////////////////////////////////////////////////////////

Make a list random_walk that contains the first step, which is the integer 0.
Finish the for loop:
The loop should run 100 times.
On each iteration, set step equal to the last element in the random_walk list. You can use the index -1 for this.
Next, let the if-elif-else construct update step for you.
The code that appends step to random_walk is already coded.
Print out random_walk.

    # Numpy is imported, seed is set
    # Initialize random_walk

    random_walk = [0]

    # Complete the ___
    for x in range(100) :
        # Set step: last element in random_walk
        step = random_walk[-1]

        # Roll the dice
        dice = np.random.randint(1,7)

        # Determine next step
        if dice <= 2:
            step = step - 1
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)

        # append next_step to random_walk
        random_walk.append(step)

    # Print random_walk
    print(random_walk)

//////////////////////////////////////////////////////////////////////////////

Use max() in a similar way to make sure that step doesn't go below zero if dice <= 2.
Hit Submit Answer and check the contents of random_walk.

    # Numpy is imported, seed is set
    # Initialize random_walk
    random_walk = [0]

    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)

        if dice <= 2:
            # Replace below: use max to make sure step can't go below 0
            step = max(0,step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)

        random_walk.append(step)

    print(random_walk)

    -> max()함수와 min()함수를 통해 특정값 이상, 이하의 값이 나오지 않도록 하는 방법 숙지하기.

//////////////////////////////////////////////////////////////////////////////

Add some lines of code after the for loop:

Import matplotlib.pyplot as plt.
Use plt.plot() to plot random_walk.
Finish off with plt.show() to actually display the plot.

    # Numpy is imported, seed is set

    # Initialization
    random_walk = [0]

    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)

        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)

        random_walk.append(step)

    # Import matplotlib.pyplot as plt
    import matplotlib.pyplot as plt

    # Plot random_walk
    plt.plot(random_walk)

    # Show the plot
    plt.show()

//////////////////////////////////////////////////////////////////////////////

Distribution

    - 분포를 안다면 확률을 계산 할 수 있다.
    - 분포의 시각화를 위해 히스토그램을 사용한다.

    ex) import numpy as np
        import matplotlib.pyplot as plt
        np.random.seed(123)
        final_tails = []
        for x in range(100) :
            tails = [0]
            for x in range(10) :
                coin = np.random.randint(0,2)
                tails.append(tails[x] + coin)
            final_tails.append(tails[-1])
        plt.hist(final_tails, bins = 10)
        plt.show()

//////////////////////////////////////////////////////////////////////////////

Use np.array() to convert all_walks to a Numpy array, np_aw.
Try to use plt.plot() on np_aw. Also include plt.show(). Does it work out of the box?
Transpose np_aw by calling np.transpose() on np_aw. Call the result np_aw_t. Now every row in np_all_walks represents the position after 1 throw for the 10 random walks.
Use plt.plot() to plot np_aw_t; also include a plt.show(). Does it look better this time?

    # numpy and matplotlib imported, seed set.

    # initialize and populate all_walks
    all_walks = []
    for i in range(10) :
        random_walk = [0]
        for x in range(100) :
            step = random_walk[-1]
            dice = np.random.randint(1,7)
            if dice <= 2:
                step = max(0, step - 1)
            elif dice <= 5:
                step = step + 1
            else:
                step = step + np.random.randint(1,7)
            random_walk.append(step)
        all_walks.append(random_walk)

    # Convert all_walks to Numpy array: np_aw
    np_aw = np.array(all_walks)

    # Plot np_aw and show
    plt.plot(np_aw)
    plt.show

    # Clear the figure
    plt.clf()

    # Transpose np_aw: np_aw_t
    np_aw_t = np.transpose(np_aw)

    # Plot np_aw_t and show
    plt.plot(np_aw_t)
    plt.show()

//////////////////////////////////////////////////////////////////////////////

Change the range() function so that the simulation is performed 250 times.
Finish the if condition so that step is set to 0 if a random float is less or equal to 0.001. Use np.random.rand().

    # numpy and matplotlib imported, seed set

    # Simulate random walk 250 times
    all_walks = []
    for i in range(250) :
        random_walk = [0]
        for x in range(100) :
            step = random_walk[-1]
            dice = np.random.randint(1,7)
            if dice <= 2:
                step = max(0, step - 1)
            elif dice <= 5:
                step = step + 1
            else:
                step = step + np.random.randint(1,7)

            # Implement clumsiness
            if np.random.rand() <= 0.001 :
                step = 0

            random_walk.append(step)
        all_walks.append(random_walk)

    # Create and plot np_aw_t
    np_aw_t = np.transpose(np.array(all_walks))
    plt.plot(np_aw_t)
    plt.show()

//////////////////////////////////////////////////////////////////////////////

To make sure we've got enough simulations, go crazy. Simulate the random walk 500 times.
From np_aw_t, select the last row. This contains the endpoint of all 500 random walks you've simulated. Store this Numpy array as ends.
Use plt.hist() to build a histogram of ends. Don't forget plt.show() to display the plot.

    # numpy and matplotlib imported, seed set

    # Simulate random walk 500 times
    all_walks = []
    for i in range(500) :
        random_walk = [0]
        for x in range(100) :
            step = random_walk[-1]
            dice = np.random.randint(1,7)
            if dice <= 2:
                step = max(0, step - 1)
            elif dice <= 5:
                step = step + 1
            else:
                step = step + np.random.randint(1,7)
            if np.random.rand() <= 0.001 :
                step = 0
            random_walk.append(step)
        all_walks.append(random_walk)

    # Create and plot np_aw_t
    np_aw_t = np.transpose(np.array(all_walks))

    # Select last row from np_aw_t: ends
    ends = np_aw_t[-1]

    # Plot histogram of ends, display plot
    plt.hist(ends)
    plt.show()

//////////////////////////////////////////////////////////////////////////////