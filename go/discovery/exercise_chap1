
팩토리얼 계산 1

package main

import "fmt"

// fac returns n!
func fac(n int) int {
	if n <= 0 {
		return 1
	}
	return n * fac(n-1)
}

func main() {
	fmt.Println(fac(5))
}

-> 첫 번째 방식은 재귀적으로 구현한 방법이다. n이 0이거나 1보다 작다면 1을 반환하고,
그렇지 않다면 n! = n * (n-1)을 통해 다시 한번 함수에 들어가 계산되는 방식이다.

----------------------------------------------------------------------

팩토리얼 계산 2

package main

import "fmt"

// facItr returns n!
func facItr(n int) int {
	result := 1
	for n > 0 {
		result *= n
		n--
	}
	return result
}

func main() {
	fmt.Println(facItr(5))
}

-> 두번째 방식은 for문을 통해 루프를 도는 방식이다. go의 for문은 C의 while문과
유사하게 사용된다.

----------------------------------------------------------------------

package main

import "fmt"

// facItr2 returns n!
func facItr2(n int) int {
	result := 1
	for i := 2; i <= n; i++ {
		result *= i
	}
	return result
}

func main() {
	fmt.Println(facItr2(5))
}

----------------------------------------------------------------------

연습문제 1

다음 노래를 N줄 출력하는 함수를 작성하시오.

타잔이 10원짜리 팬티를 입고, 20원짜리 칼을 차고 노래를 한다.
타잔이 20원짜리 팬티를 입고, 30원짜리 칼을 차고 노래를 한다.
...


----------------------------------------------------------------------

연습문제 2

하노이의 탑은 세 기둥과 이 기둥에 꽂을 수 있는 원판들이 있다. 편의상 왼쪽 기둥부터 1,2,3으로
번호를 붙였다. 시작할 때 큰 원판부터 작은 원판의 순으로 1번 기둥에만 원판이 쌓여 있다. 이
원판들을 모두 2번 기둥으로 옮기려고 한다. 한 번에 하나의 원판만 옮길 수 있고, 큰 원판이 작은
원판 위에 있어서는 안 된다.

Hanoi(3)를 호출하면 다음과 같은 출력 결과가 나오게 만들어라.
Number of disks : 3
1->2
1->3
2->3
1->2
3->1
3->2
1->2

연습 문제를 푸는데 반드시 else 절이 필요하지는 않지만 필요한 분들은 다음과 같은 구조로 작성한다.

if 조건 {
    // 조건이 참일 때 수행할 코드
} else {
    // 조건이 거짓일 때 수행할 코드
}

알고리즘에 대한 배경 지식이 필요하므로 이 문제를 미리 풀어보지 않은 경우에는 푸는 것이 쉽지 않을 수
있다. 푸는 법이 떠오르지 않으면 건너 뛰는 것을 추천한다.


----------------------------------------------------------------------

연습문제 3

N 번째 피보나치 수를 출력하는 프로그램을 작성해보자.

동일한 계산을 여러 번 반복하게 되는 재귀 호출을 이용하지 말고 반복문을 이용하여 작성하도록 한다.
아래의 코드 한 줄을 참고하자.

p, q = q, p+q

위의 한 줄이면 임시 변수 필요 없이 두 값을 한꺼번에 할당할 수 있다. 반복문에 들어가기 전에 초기화는
아래의 코드를 이용하면 된다.

p, q := 0, 1

피보나치 수는 0과 1로 시작하며, 그 다음에 나오는 수가 바로 앞의 두 수를 더한 것이 된다.

0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55

