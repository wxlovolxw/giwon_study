네오와 프로도가 숫자놀이를 하고 있습니다.
네오가 프로도에게 숫자를 건넬 때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는 게임입니다.

다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다.

1478 → "one4seveneight"
234567 → "23four5six7"
10203 → "1zerotwozero3"
이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나,
혹은 바뀌지 않고 그대로인 문자열 s가 매개변수로 주어집니다.
s가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요.

참고로 각 숫자에 대응되는 영단어는 다음 표와 같습니다.

숫자	영단어
0	    zero
1	    one
2	    two
3	    three
4	    four
5	    five
6	    six
7	    seven
8	    eight
9	    nine

제한사항
1 ≤ s의 길이 ≤ 50
s가 "zero" 또는 "0"으로 시작하는 경우는 주어지지 않습니다.
return 값이 1 이상 2,000,000,000 이하의 정수가 되는 올바른 입력만 s로 주어집니다.

입출력 예
s	                result
"one4seveneight"	1478
"23four5six7"	    234567
"2three45sixseven"	234567
"123"	            123

입출력 예 설명
입출력 예 #1

문제 예시와 같습니다.
입출력 예 #2

문제 예시와 같습니다.
입출력 예 #3

"three"는 3, "six"는 6, "seven"은 7에 대응되기 때문에 정답은 입출력 예 #2와 같은 234567이 됩니다.
입출력 예 #2와 #3과 같이 같은 정답을 가리키는 문자열이 여러 가지가 나올 수 있습니다.
입출력 예 #4

s에는 영단어로 바뀐 부분이 없습니다.

대응되는 단어를 찾아 숫자로 변환해주는 알고리즘.

전체를 리스트의 형태로 바꾸어서 해야 할 듯 싶다.

s = "one4seveneight"

s_list = list(s)
answer =[]

만약 숫자라면 그대로 두고, 숫자가 아닌경우를 고려하면 된다.

z로 시작한다면, 다음 4개의 단어를 지우고 0으로,
o로 시작한다면, 3개를 지우고 1로
t이고 그 다음이 w인지 -> 3개를 지우고 2
            h인지 -> 5개를 지우고 3
f라면 그 다음이 o인지 -> 4개를 지우고 4
            i인지 -> 4개를 지우고 5
s 라면 그다음이 i -> 3개 지우고 3
            다음이 e -> 5개 지우고 7
e라면 5개 지우고 8
n이라면 4개 지우고 9 를 대입하는 식으로 알고리즘을 짜보자.

for i, word in enumerate(s_list) :

    try:
        if type(int(word)) == 'int' :
            answer.append(word)

        elif word == 'z' :
            answer.append(0)
            del s_list[i:i+4]

        elif word == 'o' :
            answer.append(1)
            del s_list[i:i+3]

        elif word == 't' and s_list[i+1] =='w' :
            anser.append(2)
            del s_list[i:i+3]

        elif word == 't' and s_list[i+1] =='h' :
            anser.append(3)
            del s_list[i:i+5]

        elif word == 'f' and s_list[i+1] =='o' :
            anser.append(4)
            del s_list[i:i+4]

        elif word == 'f' and s_list[i+1] =='i' :
            anser.append(5)
            del s_list[i:i+4]

        elif word == 's' and s_list[i+1] =='i' :
            anser.append(6)
            del s_list[i:i+3]

        elif word == 's' and s_list[i+1] =='e' :
            anser.append(7)
            del s_list[i:i+5]

        elif word == 'e' :
            answer.append(8)
            del s_list[i:i+5]

        elif word == 'n' :
            answer.append(9)
            del s_list[i:i+4]

    except ValueError : pass

    return answer


/////////////////////////////////////


def solution(s) :

    s_list = list(s)
    answer =[]

    for i, word in enumerate(s_list):

        try:
            if type(int(word)) == 'int':
                answer.append(word)

            elif word == 'z':
                answer.append(0)
                del s_list[i:i + 4]

            elif word == 'o':
                answer.append(1)
                del s_list[i:i + 3]

            elif word == 't' and s_list[i + 1] == 'w':
                answer.append(2)
                del s_list[i:i + 3]

            elif word == 't' and s_list[i + 1] == 'h':
                answer.append(3)
                del s_list[i:i + 5]

            elif word == 'f' and s_list[i + 1] == 'o':
                answer.append(4)
                del s_list[i:i + 4]

            elif word == 'f' and s_list[i + 1] == 'i':
                answer.append(5)
                del s_list[i:i + 4]

            elif word == 's' and s_list[i + 1] == 'i':
                answer.append(6)
                del s_list[i:i + 3]

            elif word == 's' and s_list[i + 1] == 'e':
                answer.append(7)
                del s_list[i:i + 5]

            elif word == 'e':
                answer.append(8)
                del s_list[i:i + 5]

            elif word == 'n':
                answer.append(9)
                del s_list[i:i + 4]

        except ValueError:
            pass

    return answer


print(solution("one4seveneight"))







