
성능 데이터 모델링의 정의
 : 데이터베이스 성능향상을 목적으로 성계단계의 데이터모델링 때부터 정규화, 반정규화, 테이블통합, 테이블분할, 조인구조, PK, FK 등 여러가지 성능과 관련된 사항이 데이터 모델링에 반영될 수 있도록 하는 것이다.

성능 데이터 모델링 수행시점

	사전에 할 수록 비용이 들지 않는다.
	분석/설계단계에서 성능을 고려한 데이터모델링을 수행하면, 차후에 성능저하때문에 발생하	는 재업무 비용을 최소화 할 수 있다.
	비즈니스 처리에 핵심적인 트랜잭션이 있다면, 프로젝트 초기에 운영환경에 대비한 테스트환	경을 구축하고 트랜잭션을 발생시켜 실제 성능테스트를 해보아야 한다.
	(데이터 트랜잭션 -> DBMS상에서의 상호작용 단위)
	데이터 모델의 구조도 변경하면서, 가장 적절한 구조인지를 검토하여 디자인하는 전략이 요	구된다.

성능 데이터 모델링의 고려사항

	일반적으로 성능 데이터 모델은 다음과 같은 프로세스로 진행하는 것이 데이터 모델링 단계	에서 성능을 충분히 고려할 수 있는 방안이 된다.

	1) 데이터 모델링을 할 때 정규화를 정확하게 수행한다.
	2) 데이터베이스 용량산정을 수행한다.
	3) 데이터베이스에 발생되는 트랜잭션의 유형을 파악한다.
	4) 용량과 트랜잭션 유형에 따라 반정규화를 수행한다. -> ???
	5) 이력모델의 조정, PK/FK 조정, 슈퍼타입/서브타입 조정 등을 수행한다. -> ???
	6) 성능 관점에서 데이터 모델을 검증한다.

	-> 데이터모델을 검토할 때는 일반적인 데이터 모델 규칙만 검증하지 말고, 충분하게 성능이 	고려되었는지도 체크리스트에 포함하여 검증하도록 한다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

정규화 (NORMALIZATION) -> ???
: 정규화란 다양한 유형의 검사를 통해 데이터 모델을 좀 더 구조화 하고 개선시켜 나가는 절차에 관련된 이론이다.

	1차 정규화 : 복수의 속성값을 갖는 속성을 분리
	2차 정규화 : 주식별자에 종속적이지 않은 속성을 분리. 부분종속 속성을 분리
	3차 정규화 : 속성에 종속적인 속성의 분리. 이전 종속(TRANSITIVE DEPENDENCY) 속성을 분		리
	보이스-코드 정규화 : 다수의 주식별자 분리
	4차 정규화 : 다가 종속(MULTI-VALUED DEPENDENCY) 속성 분리
	5차 정규화 : 결합 종속(JOIN DEPENDENCY) 일 경우는 두 개 이상의 N으로 분리

정규화를 통한 성능 향상 전략

	- 정규화를 하는 것은 기본적으로 데이터에 대한 중복성을 제거해주고, 데이터가 관심사별로 	모여있게 되므로 성능이 향상된다.
	물론 엔터티가 계속 발생되고, 그에 따라 조인이 많이 발생하므로 이로 인해 성능이 저하되기	도 하지만 이런 부분은 사례별로 유의하여 반정규화를 적용하는 전략이 필요하다.
	

	정규화 수행 데이터모델 -> 	조회 성능		-> 처리 조건 -> 성능이 저하되거나 향상됨
				입력, 삭제, 수정, 성능 -> 성능이 향상됨

	-> 일반적으로 정규화를 수행해야 데이터처리의 성능이 향상되며 데이터 조회처리 트랜잭션	시에 성능저하가 나타날 수 있음.
	처리조건에 따라서 조회성능이 향상될 수도, 저하될 수도 있다.
	정규화가 수행된 모델은 입렵/수정/삭제할 때 일반적으로 반정규화된 테이블에 비해 처리성	능이 향상된다.

정규화를 통한 테이블의 성능 저하와 향상


ENTITY		정부보관금관서원장	관서		정부보관금관서원장

INSTANCE	관서번호(PK)		관서번호(PK)	관서번호(PK)
		납부자번호(PK)		관리점번호	납부자번호(PK)
		관리점 번호		관서명		관리공무원여부
		관서명		→	상태	       +	직급코드
		상태			관서등록일자	직급명
		관서등록일자		...		공무원명
		관서해제일자				...
		직급코드
		직급명
		....

	-> 기존의 정부보관금관서원장 테이브을 정규화를 통해 관서 + 정부보관금관서원장의 두개		의 테이블로 분리.

	직급명, 관서번호, 관서명을 조회하는 경우에는 PK UNIQUE INDEX를 이용한 조인이 발생하므		로 성능저하는 일어나지만 미미하다.

	특정 날짜 이후의 누적 데이터를 읽는 경우에는 정규화된 테이블이 훨씬 빠르다.

	-> 일자별매각물건을 조회하기 위해서는 100만건의 데이터를 읽어야 한다. 이에 성능을 향상 	시키기 위해 매각일자에 대한 내용을 2차 정규화를 통해서 분리. DISTINCT를 통해 5000건 정	도로 매각 일자를 추린 후, 이를 조인하여 원하는 결과를 얻음으로서 성능을 향상

	-> 유형분류코드가 여러개 존재하는 경우 각 속성마다 인덱스를 생성해줘야 하는 문제가 발	생한다. (동일한 속성형식을 두개이상의 속성으로 나열한 경우를 반정규화 라고 한다.) 유형을 	관리하는 테이블을 별도로 만든 후, 해당 테이블의 PK 하나를 이용하는 것 만드로도 성능이 	향상 될 수 있다.

함수적 종속성(FUNCTIONAL DEPENDENCY)에 근거한 정규화 수행 필요

	함수의 종속성은 데이터들이 어떤 기준값에 종속되는 현상을 지칭한다.
	기준값을 결정자(DETERMINANT), 종속되는 값을 종속자(DEPENDENT)라고 한다.
	
	EX) 주민등록번호가 이름, 출생지, 주소를 함수적으로 결정한다.

	함수의 종속성은 데이터의 근본적인 속성으로, 정규화작업이나 각 오브젝트에 속성을 배치하	는데 이 함수의 종속성을 이용한다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

반정규화

반정규화의 정의
	반정규화는 정규화된 엔티티, 속성, 관계를 시스템의 성능향상 및 개발과 운영의 단순화를 위		해 중복, 통합, 분리 등을 수생하는 데이터모델링 기법이다.
	디스트 I/O량이 많아서 조회시 성능이 저하되거나, 데이터끼리의 경로가 너무 멀어 조인으로 		인한 성능저하가 예상되거나, 컬럼을 계산하여 읽을 때 성능이 저하될 것이 예상되는 경우 반		정규화를 수행하게 된다.
	업무적으로 조회에 대한 처리성능이 중요하다고 판단될 때 부분적으로 반정규화를 고려하게 		된다.
	설계단게에서 반정규화를 적용하게 되며, 반정규화 미수행시에는 다음과 같은 현상이 발생한		다
		성능이 저하된 데이터베이스가 생성될 수 있다.
		구축단계나 시험단계에서 반정규화를 적용할 때 수정에 따른 노력비용이 많이 든			다.

	-> 중복성의 원리를 활용하여 데이터조회시 성능을 향상시키는 역할을 할 수 있음

반정규화 적용방법
	반정규화에 대한 필요성이 결정이 되면 컬럼의 반정규화 뿐만 아니라, 테이블의 반정규화, 관	계의 반정규화를 종합적으로 고려하여 적용해야 한다.
	반정규화는 막연하게 중복을 유도하는 것만을 수행하기 보다는 성능을 향상시킬 수 있는 다	른 방법을 고려하고 그 이후에 반정규화를 적용하도록 해야 한다.

	1. 반정규화 대상조사
		범위처리빈도수 조사
		대량의 범위 처리 조사
		통계성 프로세스 조사
		테이블 조인 개수
	2. 다른 방법유도 검토
		뷰(VIEW) 테이블
		클러스터링 적용
		인덱스의 조정
		응용애플리케이션
	3. 반정규화 적용
		테이블 반정규화
		속성의 반정규화
		관계의 반정규화

	1. 반정규화의 대상을 조사한다.
		자주 사용되는 테이블에 액세스하는 프로세스의 수가 가장 많고, 항상 일정한 범위		만을 조회하는 경우에 반정규화를 검토한다.
		테이블에 대량데이터가 있고 대량의 범위를 자주 처리하는 경우, 성능을 보장할 수 		없는 경우에 반정규화를 검토한다.
		통계성 프로세스에 의해 통계정보를 필요로 할 떼, 별도의 통계테이블(반정규화)를 		생성한다.
		테이블에 지나치게 조인을 많이 하게 되어, 데이터를 조회하는 것이 기술적으로 어		려울 경우 반정규화를 검토한다.
	2. 반정규화의 대상에 대해 다른 방법으로 처리할 수 있는지 검토한다.
		테이블에 많은 조인을 하여 데이터를 조회하는 것이 기술적으로 어려운 경우 VIEW		를 검토한다. 조회성능을 향상시키지는 않지만, SQL 작성의 미숙함으로 인하여 생		기는 성능저하를 예방할 수 있다.
		대량의 데이터처리나 부분처리에 의해 성능이 저하되는 경우 클러스터링을 적용하		거나, 인덱스 조정을 통해 성늘을 향상시킬수 있다.
		대량의 데이터는 PK의 성격에 따라 파티셔닝 기법을 적용하여 성능저하를 방지할 		수 있다.
		어플리케이션에서 로직을 구현하는 방법을 변경하므로써 성능을 향상 시킬수 있다.
	3. 반정규화를 적용한다.
		반정규화 대상으로는 테이블, 속성, 관계에 대해 적용할 수 있으며, 중복을 통한 방		법만이 반정규화가 아니고, 테이블,속성,관계를 추가/분할/제거할 수도 있다.

반정규화 기법

- 테이블의 반정규화

테이블병합	1:1관계 테이블병합	1:1관계를 통합하여 성능향상
		1:M관계		1:M관계를 통합하여 성능향상
		슈퍼/서브타입	슈퍼/서브 관게를 통합하여 성능향상
테이블분할	수직분할		컬럼단위의 테이블을 디스크 I/O를 분산처리 하기 위해 테이블
				을 1:1로 분리하여 성능향상
		수평분할		로우단위로 집중 발생되는 트랜잭션을 분석하여 디스크 I/O
				및 데이터접근의 효율성을 높여 성능을 향상하기 위해 로우단					위로 테이블을 쪼갬
테이블추가	중복테이블 추가	다른 업무이거나 서버가 다른 경우 동일한 테이블구조를 중복
				하여 원격조인을 제거하여 성능을 향상
		통계테이블 추가	SUM, AVG 등을 미리 수행하여 계산해 둠으로써 조회시 성능을
				향상
		이력테이블 추가	이력테이블 중에서 마스터 테이블에 존재하는 레코드를 중복하					여 이력테이블에 존재하는 방법
		부분테이블 추가	하나의 테이블을 전체 칼럼 중 자주 이용하는 집중화된 컬럼이 					있을 경우, 디스크 I/O를 줄이기 위해 해당 칼럼들을 모아놓은 					별도의 반정규화된 테이블을 생성

- 컬럼 반정규화

중복컬럼 추가 		조인시 성능저하를 예방하기 위해, 중복된 컬럼을 위치시킴
파생컬럼 추가		트랜잭션이 처리되는 시점에서 계산에 의해 발생되는 성능저하를 예방하				기 위해, 미리 계산하여 칼러멩 보관
이력테이블 컬럼추가	대량의 이력데이터 처리시 불특정 일 조회나 최근값을 조회할 때 나타날
			수 있는 성능저하를 예방하기 위해 기능성 컬럼(최근값여부, 시작일자,
			종료일자)를 추가함
PK에 의한 컬럼추가	복합의미를 갖는 PK를 단일속성으로 구성했을 때 발생되며, PK안에 데이				터가 존재하지만 성능향상을 위해 일반속성으로 포함하는 방법
응용시스템 오작동을	업무적으로는 의미가 없으나, 데이터 처리시 오류로 인해 원래값으로 복
위한 컬럼 추가		구하길 원하는 경우 이전 데이터를 임시적으로 중복보관하는 방법

- 관계 반정규화

중복관계 추가 	여러 경로를 거쳐 조인이 가능하지만, 성능저하를 예방하기 위해 추가적인 관계를 맺는 방법

정규화가 잘 정의된 데이터 모델에서 성능이 저하될 경우 -> ???

	지나치게 많은 조인을 통해 정보를 불러와야 하는 경우
	-> 반정규화를 통해 불러와야 하는 정보를 기존 테이블에 추가한다.

	다른 서버로부터 데이터를 가져올때
	-> 다른 서버의 데이터들을 반정규화함으로써 성능을 향상시킬 수 있다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

테이블 분할

대량 데이터발생에 따른 테이블 분할 개요

	설계가 잘 되어 있는 데이터 모델이라도 대량의 데이터가 하나의 테이블에 집약되어 있고, 하		나의 하드웨어 공간에 저장되어 있으면 성능 저하를 피하기 힘들다.
	인덱스도 또한 트리가 커지고 깊이가 깊어져, 조회성능에 영향을 미치게 된다.
	입력/수정/삭제의 트랜잭션인 경우도 인덱스의 특성상 일량이 증가하여, 더많은 성능 저하를 		유발하게 된다.
	컬럼이 많아지게 되면 물리적인 디스크의 여러 블록에 걸쳐 데이터가 저장되게 되며, 로우 길		이가 너무 길어서 로우체이닝과 로우 마이그레이션이 많아지게 되어 선능이 저하된다.

한 테이블에 많은 수의 칼럼을 가지고 있는 경우

	200개의 컬럼을 가진 도서정보 테이블이 있다고 가정하고, 하나의 로우 길이가 10K이고 블록		이 2K 단위로 쪼개져 있으면, 로우는 대략 5개의 블록에 걸쳐 저장된다.
	이렇게 여러블록에 컬럼이 흩어져 있다면, 디스크 I/O가 많이 일어나게 된다.
	트랜잭션 발생시 어떤 컬럼에 대해 집중적으로 발생하는지 분석하여 테이블 분할을 하면 디		스크 I/O가 감소하여 성능을 개선할 수 있다.

대량 데이터 저장 및 처리로 인한 성능

	대량 데이터가 예상될 경우, 파티셔닝 및 PK에 의해 테이블을 분할하는 방법을 적용할 수 있		다.
	오라클의 경우 LIST PARTITION, RANGE PARTITION, HASH PARTITION, COMPOSITE 			PARTITION 등이 가능하다.

	- RANGE PARTITION
		요금정보처럼 항상 월단위로 데이터를 처리하는 특성을 가진 경우, PK인 요금일자		의 년+월을 이용하여 파티션테이블을 만들어서 성능개선을 유도한다.
		가장 많이 사용하며, 대상 테이블이 날짜 또는 숫자값으로 분리가 가능하고, 각 영		역별로 트랜잭션이 분리된다면 적용한다.
		데이터보관주기에 따라 테이블에 데이터를 쉽게 지우는 것이 가능하므고(파티션테		이블을 DROP) 테이블 관리가 용이하다.

	- LIST PARTITION 
		지점, 사업소, 사업장, 핵심적인 코드 값 등으로 PK가 구성되어 있는 테이블이라면, 		값 각각에 의해 파티셔닝이 되는 LIST PARTITION을 적용할 수 있다.
		특정값에 따라 분리저장할 수는 있으나, RANGE PARTITION과 같이 데이터 보관주		기에 따라 쉽게 삭제하는 기능은 제공될 수 없다.

	-HASH PARTITION
		HASH 조건에 따라 해시알고리즘이 적용되어 테이블이 분리되므로 설계자는 데이		터가 어떤 테이블에 어떻게 들어갔는지 알 수 없다.
		HASH PARTITION도 보관주기에 따라 쉽게 삭제하는 기능은 제공 될 수 없다.

		대용량이 되면 파티셔닝 적용은 필수적으로, 파티셔닝 기준을 나눌 수 있는 조건에 		따라 적절한 파티셔닝 방법을 선택하여 성능을 향상시키도록 한다.

테이블에 대한 수평분할/수직분할의 절차

	1) 데이터 모델링을 완성한다.
	2) 데이터베이스 용량산정을 한다.
	3) 대량 데이터가 처리되는 테이블에 대해서 트랜잭션 처리 패턴을 분석한다.
	4) 컬럼 단위로 집중화된 처리가 발생하는지, 로우단위로 집중화된 처리가 발생되는지 분석		하여 집중화된 단위로 테이블을 분히라는 것을 검토한다.

	컬럼수가 너무 많은 경우는 테이블을 1:1형태로 분리할 수 있는지 검증하고, 칼럼수가 적지만 	데이터 용량이 많아 성능저하가 예상되는 경우는 테이블에 대해 파티셔닝 전략을 고려하도록 	한다.


	* 데이터 베이스 트랜잭션 - 데이터베이스 관리시스템 또는 유사한 시스템의 상호작용 단위.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

슈퍼타입/서브타입 모델의 성능 고려 방법

* ENTITY를 일반화(GENERALIZATION)하거나 상세화(SPECIALIZATION)할 경우 슈퍼타입과 서브타입이 발생. 서브타입이란 서브타입 엔터티를 말한다.

	-> 엔터티를 통합하거나 분리하는 행위의 결과가 서브타입.
	도출된 서브타입이 결국 테이블로 변환되는지와는 별개로 과정에 서브타입이 있어야 한다.

	유사한 엔터티에서 공통 속성은 슈퍼타입 엔터티로 가고, 고유속성은 서브타입 엔터티로 가		게 된다.

	EX) 
	개인고객 ENTITY 고객번호, 고객명, 주민번호, 생년월일, 성별, 결혼여부
	법인고객 ENTITY 고객번호, 고객명, 법인번호, 대표자명, 설립일자
				↓
	고객 ENTITY 고객번호, 고객명 - 개인고객 ENTITY 주민번호, 생년월일, 성별, 결혼여부
				  - 법인고객 ENTITY 법인번호, 대표자명, 설립일자

	-> 모든 서브타입에 해당되는 관계는 슈퍼타입 ENTITY에 속하게 되고 모든 서브타입으로 상		속되는 공통의 속성이 서브타입 속성이 된다. 그리고 각각 서브타입의 고유한 관계는 서브타		입 ENTITY에 속하게 되며 각각의 서브타입의 고유한 속성인 서브타입 속성이 존재하게 된다.

	-> 슈퍼타입 속성은 모든 서브타입으로 상속(INHERITANCE) 되는 공통속성이며, 슈퍼타입과		의 관계는 서브타입에도 해당되는 관계. 반면 서브타입에는 해당 서브타입에만 사용되는 고		유 속성이 존재하며, 관계 또한 서브타입별 엔터티의 고유한 관계가 된다.
	
	- 슈퍼/서브타입 데이터 모델의 개요
	슈퍼/서브타입 모델 업무를 구성하는 데이터의 특징을 공통과 차이점의 특징을 고려하여 효		과적으로 표현할 수 있으므로, 자주 쓰이는 모델링의 방법이다.
	이 모델은 논리데이터 모델에서 이용되는 형태이고, 물리적인 데이터 모델을 설계하는 단게		에서는 일정한 기준에 의해 변환을 해야 한다.
	아무런 기준없이 변환하는 것 자체가 성능 저하의 위험이 있다.
	
	- 슈퍼/서브타입 데이터 모델의 변환
	
	슈퍼/서브타입 모델     ->	ONE TO ONE TYPE (1:1 타입)
				PLUS TYPE (슈퍼 + 서브 타입)
				SINGLE TYPE (ALL IN ONE 타입)
	
	-> 슈퍼/서브타입에 대한 변환을 잘못하면 성능이 저하되는 이유는 트랜잭션 특성을 고려하		지 않고 테이블을 설계했기 때문이다.

	1) 트랜잭션은 항상 일괄로 처리하는데 테이블은 개별로 유지되어 UNION 연산에 의해 성능 		저하
	2) 트랜잭션은 항상 서브타입 개별로 처리하는데 테이블은 하나로 통합되어 있어 불필요하게 	많은 양의 데이터가 집약되어 성능저하
	3) 트랜잭션은 항상 슈퍼+서브 타입을 공통으로 처리하는데 개별로 유지되어 있거나 하나의 		테이블로 집약되어 있어 성능 저하

	-> 데이터 양이 소량일 경우 처리의 유연성을 고려해 1:1 관계를 유지하는 것이 바람직. 대용		량일 경우는 트랜잭션의 발생형태에 따라 3가지 변환방법을 참조하여 상황에 맞게 변환하도		록 해야 한다.

	- 슈퍼/서브 타입 데이터 모델의 변환기술
	
	1) 개별로 발생되는 트랜잭션에 대해서는 개별 테이블로 구성
	2) 슈퍼+서브타입에 대해 발생되는 트랜잭션에 대해서는 슈퍼타입+서브타입 테이블로 구성
	3) 전체를 하나로 묶어 트랜잭션이 발생할 때는 하나의 테이블로 구성

	- 슈퍼/서브타입 데이터 모델의 변환타입 비교

구분		ONETOONE TYPE		PLUS TYPE		SINGLE TYPE
특징		개별 테이블 유지		슈퍼+서브타입 테이블	하나의 테이블
확장성		우수함			보통			나쁨
조인성능		나쁨			나쁨			우수함
I/O량 성능	좋음			좋음			나쁨
관리용이성	좋지않음			좋지않음			좋음
트랜잭션 유형에	개별 테이블로 접근이 많은	슈퍼+서브 형식으로 테이터	전체를 일괄적으로
따른 선탱방법	경우 선택			를 처리하는 경우 선택	처리하는 경우 선택

인덱스 특성을 고려한 PK/FK 데이터베이스 성능향상

	- PK/FK 칼럼 순서와 성능개요
	인덱스는 데이터를 접근할 때 경로를 제공하는 성능 측면에도 중요한 의미를 가지고 있기 때		문에 설계단계 말에 컬럼의 순서를 조정할 필요가 있다.
	PK가 복합식별자인 경우, 앞쪽에 위치한 속성이 가급적 '='이거나 최소범위 'BETWEEN' 	'<>'	가 들어와야 인덱스를 이용할 수 있다.
	또한 FK라 하더라도, 인덱스를 생성하도록 하고, 인젝스 컬럼의 순서도 조회조건을 고려하여 		접근이 가장 효율적인 순서대로 생성한다.

	- PK칼럼의 순서를 조정하지 않으면 성능이 저하되는 이유 -> ???
	데이터 모델링에서 설계된 테이블의 PK순서대로 인덱스가 만들어진 경우.
	-> 설계된 테이블의 PK순서대로 인덱스가 만들어진다.
	-> 테이블에 접근하는 트랜잭션의 특징에 효율적이지 않은 인덱스가 생성되었으므로, 인덱스 	범위를 넓게 이용하거나 FULL SCAN을 유발하게 된다.

	- PK 순서를 잘못 지정하여 성능이 저하된 경우
	
	EX) 입시마스터 ENTITY -> PK : 수험번호, 년도, 학기
				대학원구분코드, 학위구분코드
	
	CREATE UNIQUE INDEX 입시마스터_I01 ON 입시 마스터(수험번호, 년도, 학기)

	SELECT COUNT(수험번호)
	FROM 입시마스터
	WHERE 년도 = '2008'
	AND 학기 = '1'

	를 하게 되면 테이블을 FULL SCAN 하여 성능이 저하된다. -> 테이블을 조회할 때 조회조건	에 수험 번호가 들어오지 않기 때문에 FULL SCAN을 한다.

	UNIQUE INDEX를 만들때

	CREATE UNIQUE INDEX 입시마스터_I01 ON 입시 마스터(년도, 학기, 수험번호)

	를 하게 되면 인덱스 스캔을 하게되어 성능이 향상된다. -> 년도와 학기에 대한 내용이 빈번	하게 들어온다면 PK의 순서를 변경함으로써 인덱스를 정상적으로 이용할 수 있도록 한다.

	- PK 순서를 잘못 지정하여 성능이 저하된 경우
	
	EX) 현금출급기실적 ENTITY     -> 	PK : 거래일자, 사무소코드, 출급기번호, 명세표번호
					건수, 금액
	
	SELECT 건수, 금액
	FROM 현금출급기실적
	WHERE 거래일자 BETWEEN '20040701' AND '20040702'
	AND 사무소코드 = '000368'

	-> 인덱스를 이용하였으나 최적화된 인덱스 사용이 안되었음.
	대부분의 SQL문장은 거래일자에 BETWEEN으로 들어오고 사무소 코드에 '='으로 들어와 인덱	스를 이용할 수 있으나 효율성이 떨어짐.
	인덱스 컬럼을 사무소코드, 거래일자의 순으로 변경
	
물리적인 테이블에 FK제약이 걸려있지 않을 경우 인덱스 미생성으로 성능저하
	
	두 테이블 사이에 FK 참조 무결성 관계가 걸려있지 않더라도, 데이터 모델관계에 의해 상속받	은 FK속성들은 조인조건으로 이용하는 경우가 많으므로, FK인덱스를 생성하는것을 기본정책	으로 하는것이 좋다.
	FK인덱스 생성을 기본정책으로 하되 향후 트랜잭션에 의해 거의 활용되지 않았을 때만 지우	는 것이 적절한 방법이 된다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////


분산 데이터베이스 -> 분산과 PARTITION의 차이는???

분산 데이터베이스란
	여러 곳으로 분산되어 있는 데이터베이스를 하나의 가상 시스템으로 사용할 수 있도록 한 데		이터베이스
	논리적으로 동일한 시스템에 속하나, 네트워크를 통해 물리적으로 분산되어 있는 데이터들의 	모임
	데이터베이스를 연결하는 빠른 네트워크환경을 이용하여 데이터베이스를 여러 지역 및 노드		로 위치시켜 사용성/성능을 극대화시킨 데이터베이스

분산 데이터베이스의 투명성(TRANSPARENCY) - 6가지를 만족해야 한다.
	분할 투명성(단편화) - 하나의 논리적인 RELATION이 여러 단편으로 분할되어 각 단편의 사본			이 여러 사이트에 저장
	위치 투명성 - 사용하려는 데이터의 저장장소를 명시할 필요가 없음. 위치정보는 SYSTEM 			CATALOG에 유지되어야 함.
	지역사성 투명성 - 지역 DBMS와 물리적 DB사이의 MAPPING 보장. 각 지역시스템 이름과 무			관한 이름 사용 가능
	중복 투명성 - DB객체가 여러 사이트에 중복되어 있는지 알 필요가 없는 성질
	장애 투명성 - 구성요소(DBMS, COMPUTER)의 장애에 무관한 트랜잭션의 원자성 유지
	병행 투명성 - 다수의 트랜잭션 동시수행시 결과의 일관성 유지, TIMM STAMP, 분산2단계 			OLCKING을 이용하여 수현
	
	-> 위와 같은 특징을 모두 만족하며 구축하는 사례는 드물다
	최근에는 분산환경의 데이터를 구축하기보다 통합하여 데이터베이스를 구축하는 사례가 더 		많다.
	그럼에도 업무적인 특징 및 지역적인 특징에 따라 적절히 활용하면, 다양한 장점을 가지고 있		으므로, 대량데이터의 지역적/글로벌 처리등에서는 유용하게 활용되고 있음

분산 데이터베이스의 적용방법 및 장단점

	- 분산 데이터베이스 적용방법
	우수한 성능으로 현장에서 가치있게 사용하는 방법은 업무의 흐름을 보고 업무구성에 따른 		아키텍처 특징에 따라 데이터베이스를 구성하는 것이다. 단순히 분산환경에서 데이터베이스		를 구축하는 것이 목적이 아니라, 업무의 특징에 따라 데이터베이스 분산구조를 선택적으로 		설계하는 능력이 필요하다. 이러한 측면에서는 데이터베이스 분산설계라는 측면보다 데이터		베이스 구조설계라는 의미로 이해해도 무방하다.

	- 분산 데이터베이스 장단점
	장점   : 	지역 자치성, 점증적 시스템 용량 확장
		신뢰성과 가용성
		효용성과 융통성
		빠른 응답속도와 통신비용 절감
		데이터의 가용성과 신뢰성 증가
		시스템 규모의 적절한 조절
		각 지역 사용자의 요구 수용 증대
	단점   : 	소프트웨어 개발 비용
		오류 잠재성 증대
		처리비용의 증대
		설계, 관리의 복잡성과 비용
		불규칙한 응답 소고
		통제의 어려움
		데이터 무결성에 대한 위협

분산 데이터베이스의 활용 방향성
	
	위치 중심의 분산설계 -> 업무필요에 의한 분산설계 
	-> 업무적 특징에 따라 활용해야 한다.

데이터베이트 분산구성의 가치

	통합된 데이터베이스에서 제공할 수 없는 빠른 성능을 제공하는 것이 가능해진다
	
	분산 데이터베이스의 핵심 가치 -> 데이터 처리 성능의 향상

분산 데이터베이스 적용 기법 ->

	분산종류 : 테이블 위치분산, 테이블 분할분산, 테이블 복제분산, 테이블 요약분석전략
	
	가장 많이 사용하는 방식은 테이블 복제분산 방식이며, 성능이 저하되는 많은 데이터베이스		에서 가장 유용하게 적용할 수 있는 기술적인 방법이다.
	설계하는 방법은 일단 통합모델링을 하고, 각 테이블별로 업무적 특징에 따라 지역 또는 서버		별로 테이블을 분산 또는 복제배치하는 형태로 설게할 수 있다.
	
	- 테이블 위치 분산
		테이블의 구조는 변하지 않지만, 다른 데이터베이스에 중복되어 생성되지도 않는다
		다만, 설계된 테이블의 위치를 각각 다르게 위치시키는 것이다.

	- 테이블 분할(FRAGMENTATION) 분산
		단순히 테이블의 위치만 다른 곳에 두는 것이 아니라, 각각의 테이블을 쪼개어 분산			하는 방법이다. 
		수평분할과 수직분할이 있다.
		
		수평분할(HORIZONTAL FRAGMENTATION)
		
		테이블을 특정 칼럼의 값을 기준으로 ROW를 분리한다.
		컬럼은 분리되지 않으며, 데이터를 한군데 집합시켜 놓아도 PK에 의해 중복발생이 			일어나지 않음.
		각 지사별로 사용하는 ROW가 다를 때 이용한다.
		각 지사에 존재하는 테이블에 대해 통합처리하는 경우 JOIN이 발생하여 성능저하			가 예상되므로, 통합처리 프로세스가 많지 않은 경우에만 이용

		수직분할(VERTICAL FRAGMENTATION)
		
		특정 컬럼값을 기준으로 컬럼을 분리한다.
		컬럼을 기준으로 분할하였으므로 각각의 테이블에는 동일한 PK구조과 값을 가지고 		있어야 한다.
		예를 들어 제품의 재고량은 각 지사별로 관리하고, 단가는 본사에서 관리하는 경우
		실제 프로젝트에는 이런 환경을 구성하는 사례는 드물다.
	
	- 테이블 복제(REPLICATION) 분산
		동일한 테이블을 다른 지역이나 서버에 위치시키는 방법
		
		부분복제(SEGMENT REPLICATION)

		테이블의 일부내용만 다른 지역이나 서버에 위치시키는 방법
		예를 들어 본사 데이터베이스에는 테이블의 전체 내용이 들어가고, 각 지사 데이터		베이스에는 각 지사별로 관계된 데이터만 들어가는 경우이다.
		보통 지사에서 데이터가 먼저 발생되고 본사에는 지사데이터를 이용해 통합하여 		발생된다.
		실제 프로젝트에서 많이 사용하는 분산기법에 해당된다.
		다른 지역간 데이터를 복제하는데는 많은 시간이 소요되므로, 야간배치작업을 통해 		수행되며, 본사 지사 양쪽 데이터를 수정하여 전송하는 경우, 정합성을 일치시키는 		것이 어렵기 때문에, 한쪽(지사)에서 데이터 수정이 발행하여, 본사로 복제하도록 		한다.

		광역복제(BROADCAST REPLICATION)
		
		테이블의 내용을 각 지역이나 서버에 위치시키는 방법
		본사와 지사 모두 동일한 정보를 가지고 있어 데이터처리에 특별한 제약을 받지 않		는다.
		실제 프로젝트에서 많이 사용하는 분산기법에 해당된다.
		본사에서 데이터가 입력, 수정,삭제 되어 지사에서 이용하는 형태이다.
		부분복제와 마찬가지로 데이터를 복제하는데 많은 시간이 소요되고 많은 부하가 		발생되므로 배치를 통해 복제가 되도록 한다.

	- 테이블 요약(SUMMARIZATION) 분산
		테이블 요약분산은 지역간 또는 서버간에 데이터가 비슷하지만 서로 다른 유형으		로 존재하는 경우가 있다.

		분석요약 - 동일한 테이블 구조를 가지고 있으면서 분산되어 있는 동일한 내용의 		데이터를 이용하여 통합된 데이터를 산출하는 방식.
		각 지사별로 존재하는 요약정보를 본사에서 통합하여 다시 전체에 대해서 요약정		보를 산출하는 분산 방법

		통합요약 - 분산되어 있는 다른 내용의 데이터를 이용하여 통합된 데이터를 산출하		는 방식
		각 지사별로 존재하는 다른 내용의 정보를 통합하여 다시 전체에 대해서 요약 정보		를 산출하는 분산방법

분산 데이터베이스를 적용하여 성능이 향상된 사례

	성능이 중요한 사이트
	공통코드, 기준정보, 마스터 데이터 등에 대해서 분산환경을 구성하면 성능이 좋아짐.
	실시간 동기화가 요구되지 않을 때, 거의 실시간(NEAR REAL TIME)의 업무적인 특징을 가지	고 있을때도 구성이 가능
	특정 서버가 부하집중시 부하를 분산할 때
	백업 사이트를 구성할 때 간단하게 분산기능을 적용하여 구성가능

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

WHERE 절에서 연산자 우선순위
	(	) -> NOT -> 비교연산자 -> AND -> OR

NULL관련 ORACLE과 SQL SERVER에서의 차이
	(칼럼명 전체를 기술하지 않는 경우)
	INSERT INTO 테이블명 (컬럼1, 컬럼2, ...)
		VALUES (컬럼1값, 컬럼2값, ...)
	
	(IN ORACLE)
	-> 테이블의 칼럼을 정의할 수 있는데, 이때 칼럼의 순서는 케이블의 칼럼 순서와 맞을 필요		는 없으며, 정의하지 않은 칼럼은 DEFAULT로 NULL값이 입력된다.
	이때 PRIMARY KEY나 NOT NULL로 지정된 칼럼은 NULL이 허용되지 않는다.
	또한 '', NULL이라고 기술하는 경우도 NULL값이 지정된다.
	
	(IN SQL SERVER)
	-> NULL로 입력 혹은 지정하지 않는 경우에는 NULL값이 입력되나 ''으로 입력하는 경우에는 	0값이 들어간다

NULL관련 함수
	NVL/ISNULL - NULL값이 아닌 값을 얻고자 할 때
		ISNULL(표현식1,표현식2) -> 표현식1이 NULL일경우에 표현식2값을 반환
		= CASE IS NULL THEN
	NULLIF(표현식1, 표현식2) -> 표현식1이 표현식2와 같으면 NULL, 같지않으면 표현식1을 반			환
	COALESCE(표현식1, 표현식2) -> 임의의 개수의 표현식에서 NULL이 아닌 최초의 표현식을 			나타낸다. 모두 NULL이면 NULL을 반환



날짜 시간 관련 SQL

	DATE 함수의 FORMAT 문자열
		YYYY, YYY, YY, Y, TEAR : 년도의 첫날(7월1일부터 반올림)
		Q : 분기의 첫날 (분기의 두번째 달 16일부터 반올림)
		MONTH, MON, MM : 월의 첫날 (16일부터 반올림)
		DDD, DD : 일(정오 12시를 지나면 반올림)
		DAY, DY, D : 주의 첫 요일(수요일 정오가 지나면 반올림) -> DD와 DAY의 차이
		HH, HH12, HH24 : 시단위
		MI : 분단위

		ADD_MONTHS(DATE,N) : DATE에 N달을 추가한다.
		LAST_DAY(DATE) : DATE를 포함하는 달의 마지막 날을 반환. DATE값을 반환
		MONTHS_BETWEEN(DATE1,DATE2) : 두 DATE 사이의 차이를 달수로 표현
		NEXT_DAY(DATE,C) : 날짜 DATE를 포함해서 이후 나타나는 첫번째 C요일 반환
		SYSTIMESTAMP : 해당 시스템의 현재 날짜 및 시간을 반환

		ROUND(DATE, FMT) : DATE를 지정 포맷형식에 맞춰 반올림하여 표시
		TRUNC(DATE, FMT) : DATE를 지정한 포맷형식에 맞춰 절삭하여 표시

		SYSDATE -> 그냥 출력하면 날짜만 나오게 된다.
			만약 시간을 확인하기 위해서는 TO_CHAR와 같은 변환 함수를 이용해야 			한다.

			SYSDATE -> 04/02/17
			TO_CHAR(SYSDATE,'YYYY.MM.DD HH24:MI:SS') FROM DUAL
			-> 2004.02.17 15:25:53

단일행 함수/다중행 함수 차이
	단일행 함수 - 입력값이 단일행으로 입력
		SELECT, WHERE, ORDER BY절에서 사용 가능. 각 행들에 대해서 개별적으로 작용하		여 데이터 값을 조작하고, 각각 행에 대한 조작 결과를 리턴한다. 여러 인자를 입력			해도 하나의 결과만을 리턴한다.
	다중행 함수 - 여러 행들의 그룹이 모여서 그룹당 단 하나의 결과를 돌려준다.


LENGTH, REPLACE, CHAR -> 문자열 치환
	LENGTH -> 문자열의 길이를 반환
	REPLACE -> 지정된 문자열을 특정 문자열로 바꿔주는 함수 -> ???
		REPLACE('문자열', 치환예정문자', '치환할문자')
	CHAR -> ASCII 코드를 문자 또는 숫자로 변환

CASE 함수 (SEARCHED CASE, SIMPLE CASE)
	(SIMPLE CASE) - EQUI 조건을 사용하지 않음
	SELECT 칼럼
		, CASE 칼럼 WHEN '' THEN ''
			WNEH '' THEN ''
			ELSE '' END
	FROM ;

	(SEARCHED CASE) - 칼럼이나 표현식을 사용하지 않고 EQUI 조건을 사용함
	SELECT 칼럼
		, CASE WHEN 칼럼 연산자 값 THEN ''
			WHEN 칼럼 연산자 값 THEN ''
			ELSE '' END
	FROM 테이블;

GROUP BY/ HAVING절에 대한 이해 -> 집계함수 등등
	-> GROUP BY 절을 통해 소그룹별 기준을 정한 후, SELECT 절에서 집계함수를 사용
	집계함수의 통계정보는 NULL값을 가진 행을 제외하고 수행
	SELECT 절과는 달리 GROUP BY 절에서는 ALIAS명을 사용할 수 없다
	집계함수는 WHERE절에는 올 수 없다 -> HAVING절에 위치한다
	GROUP BY 이후 수행 절인 SELECT 절이나 ORDER BY 절에서 개별 데이터를 사용하는 경우 		에러가 발생한다. 
	SELECT 절에서는 그룹핑 기준과 숫자 형식 칼럼이므로 집계 함수를 사용할 수 있지만, 글부		핑 기준 외의 문자 형식 칼럼은 정할 수 없다.

COUNT(*) -> COUNT되는 기준?
	-> 모든 행의 수를 센다. 입력된 데이터 행의 갯수? *인경우는 그냥 다세는 거?

참조 동적 선언 
	DELETE - CASCADE, SET NULL, SET DEFAULT, RESTRICT, NO ACTION
	INSERT - AUTOMATIC, SET NULL, SET DEFAULT, DEPENDENT, NO ACTION

	ON DELETE/UPDATE [동적선언]

	RESTRICT - 개체를 변경/삭제할 때 다른 개체가 변경/삭제할 개체를 참조하고 있을 경우에 			변경/삭제가 취소된다.(제한)
	CASCADE - 개체를 변경/삭제할 때 다른 개체가 변경/삭제할 개체를 참조하고 있을 경우에 			함께 변경/삭제 된다.
	NO ACTION - 개체를 변경/삭제할 때 다른 개체가 변경/삭제할 개체를 참조하고 있을 경우 			변경/삭제할 개체만 변경/삭제하고 참조하고 있는 개체는 변동이 없다.
	SET NULL - 개체를 변경/삭제할 때 다른 개체가 변경/삭제할 개체를 참조하고 있을 경우 참			조하고 있는 값은 NULL로 세팅된다.
	SET DEFAULT - 부모 테이블에서 해당 행을 업데이트하거나 삭제하면 외래 티를 구성하는 모			든 값이 기본값으로 설정


TRUNCATE, DROP, DELETE
	구분 		테이블정의	저장공간	작업속도	SQL문구분
	DELETE		존재		유지	느림	DML
	TRUNCATE	존재		반납	빠름	DDL
	DROP 		삭제		반납	빠름	DDL

	DELETE
	데이터만 삭제 되며 테이블 용량은 줄어들지 않는다. 또한 삭제 후의 잘못 삭제한 것을 되돌		릴 수 있다.
	COMMIT 이전에 ROLLBACK 가능
	전체 또는 일부만 삭제 가능

	TRUNCATE
	테이블을 최초 생성된 초기상태로 만든다.
	용량이 줄어들고, 인덱스 등도 모두 삭제된다.
	ROLLBACK 불가능하다
	무조건 전체 삭제만 가능하다

	DROP TABLE
	기존 테이블의 존재를 제한다. (정의 자체를 완전히 삭제한다)
	ROLLBACK 불가능하다
	
	-> DELETE 명령어는 데이터는 지워지지만 테이블 용량은 줄어들지 않는다. 원하는 데이터만 		지울 수 있고, 잘못 삭제한 것을 되돌릴 수 있다.
	-> TRUNCATE 명령어는 용량이 줄어들고 인덱스 등도 모두 삭제된다. 테이블은 삭제하지는 		않고, 데이터만 삭제한다. 한꺼번에 지워지며 삭제 후 되돌릴 수 없다.
	-> DROP TABLE은 테이블 전체를 삭제, 공간, 객체를 삭제한다. 삭제 후 절대 되돌릴 수 없다.

데이터베이스 트랜잭션 특성(ACID) - 데이터베이스 트랜잭션이 안정하게 수행된다는 것을 보장하기 위한 성질. 트랜잭션이란 - 하나의 논리적인 실행 단계
	원자성 - 트랜잭션과 관련된 작업들이 부분적으로 실행되다가 중단되지 않는 것을 보장. 중간		단계에서 실행되고 실패하는 일이 없도록 하는 것.
	일관성 - 트랜잭션이 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 		유지.
	고립성 - 트랜잭션을 수행시 다른 트랜잭션의 연산 작업이 끼어들지 못하도록 보장. 
	지속성 - 성공적으로 수행된 트랜잭션은 영원히 반영되어야 함.

DCL, TCL -> 공부
	DCL - 데이터 제어어. 데이터의 보안, 무결성 등을 정의하는데 사용
		GRANT : 사용자에게 권한 부여
		REVOKE : 사용자의 권한 취고
	TCL - 트랜잭션을 제어하는 명령어 (트랜잭션 - 분리되어서는 안되는 논리적인 작업단위)
		DML문이 실행되어 DBMS에 저장되거나 되돌리기 위해 실행해야 하는 SQL

		트랜잭션의 시작
		- DBMS에 처음 접속했을때
		- COMMIT 또는 ROLLBACK 했을때
		트랜잭션의 종료
		- COMMIT 또는 ROLLBACK 했을때
		- DDL(CREATE, DROP...)등이 실행 되었을때
		- DB가 종료될때

		COMMIT : 트랜잭션의 작업 결과를 반영
		ROLLBACK : 트랜잭션의 작업을 취소 및 원래대로 복구
		SAVEPOINT : 트랜잭션의 한 지점에 표시하는 임시 저장점. 해당 SAVEPOINT로 이		동한다.
		SESSTION : 오라클에 접속하면(CONNECT) 생성된다
		
		특성
		1) READ CONSISTENCY(읽기 일관성) - 어떤 사용자가 변경중인 행을 다른 사용자		가 변경할 수 없게 하는 기술로써 변경중인 사용자에 의해 COMMIT 또는 		ROLLBACK이 실행된 후 변경되는 특성
		2) LOCK(잠금현상) - 다른 사용자에 의해 DML 문이 실행되어져서 동일한 데이터를 		INSERT, UPDATE, DELETE 할 때 한쪽 사용자는 LOCK 걸리는 현상


ENTITY 		광고		광고게시		광고매체
ATTRIBUTE	광고ID(PK)	광고게시번호(PK)	광고매체ID(PK)
		광고명		광고ID(FK)	광고매체명
				광고매체ID(FK)	
				광고시작일자
				광고종료일자

광고매체ID별 최초로 게시한 광고명과 광고시작일자를 출력

-> 광고매체ID별로. GROUP BY(C.광고매체ID)
FROM 광고 A, 광고게시 B , 광고매체 C
SELECT A.광고명, MIN(B.광고시작일자), C.광고매체ID, 
	()D
	-> 광고시작 날짜가 최소인 광고게시 ENTITY에서의 광고ID, 광고매체ID, 광고시작일자를 받는다.
	-> 광고 ENTITY의 조인을 통해 광고명을 받는다.
	-> 광고매체 ENTITY의 조인을 통해 광고매체명을 받는다.

	(SELECT 광고ID, 광고매체ID, MIN(광고시작일자) AS 광고시작일자
	FROM 광고게시
	GROUP BY 광고매체ID) AS D
	
	-> 를 통해 광고매체 ID별의 광고ID와 광고매체ID, MIN 광고시작일자를 호출하는  VIEW를 	생성.

	-> C를 D에 조인한 후에 A와B를 C에 조인? -> OK

	SELECT A.광고명, B.광고매체명, D.광고시작일자
	FROM 광고 A, 광고매체 B, 광고게시 C,
	(SELECT 광고ID, 광고매체ID, MIN(광고시작일자) AS 광고시작일자
	FROM 광고게시
	GROUP BY 광고매체ID) AS D
	WHERE C.광고시작일자 = D.광고시작일자
	AND C.광고매체ID = D.광고매체ID
	AND C.광고ID = A.광고ID
	AND C.광고매체ID = B.광고매체ID
	ORDER BY



SELECT 	C.광고매체명, B.광고명, A.광고시작일자
FROM 	광고게시 A, 광고 B, 광고매체 C,
	(SELECT D.광고매체ID, MIN(D.광고시작일자) AS 광고시작일자
	FROM 광고게시ID
	WHERE D.광고매체ID = C.광고매체ID
	GROUP BY D.광고매체ID) AS D
WHERE 	A.광고시작일자 = D.광고시작일자
AND	A.광고매체ID = D.광고매체ID
AND	A.광고ID = B.광고ID
AND 	A.광고매체ID = C.광고매체ID
ORDER BY C.광고매체명;

-> 	

	SELECT D.광고매체ID, MIN(D.광고시작일자) AS 광고시작일자
	FROM 광고게시ID
	WHERE D.광고매체ID = C.광고매체ID
	GROUP BY D.광고매체ID


(EMP_TBL)		(RULE_TBL)
EMPNO	ENAME		RULE_NO	RULE
1000	SMITH		1	S%
1050	ALLEN		2	%T%
1100	SCOTT

[SQL]
SELECT COUNT(*) CNT
FROM EMP_TBL A, RULE_TBL B
WHERE A.ENAME LIKE B.RULE; -> 모든 조합에 대한 COUNT? -> 그런듯함

CREATE TABLE EMP_TBL(
	EMPNO SMALLINT NOT NULL PRIMARY KEY,
	ENAME VARCHAR(5) NOT NULL
);

CREATE TABLE RULE_TBL(
	RULE_NO TINYINT NOT NULL,
	RULE VARCHAR(3) NOT NULL
);

INSERT INTO EMP_TBL VALUES(1000,'SMITH');
INSERT INTO EMP_TBL VALUES(1050,'ALLEN');
INSERT INTO EMP_TBL VALUES(1100,'SCOTT');

INSERT INTO RULE_TBL VALUES(1,'S%');
INSERT INTO RULE_TBL VALUES(2,'%T%');


CREATE TABLE AD(
	AD_ID SMALLINT NOT NULL PRIMARY KEY,
	AD_NAME VARCHAR(10) NOT NULL
)

INSERT INTO AD VALUES(001,'류재현');
INSERT INTO AD VALUES(002,'이경민');
INSERT INTO AD VALUES(003,'고기원');
INSERT INTO AD VALUES(004,'최현석');

CREATE TABLE AD_POST(
	AD_POST_NAME SMALLINT NOT NULL PRIMARY KEY,
	AD_ID SMALLINT NOT NULL,
	AD_MEDIA_ID VARCHAR(10) NOT NULL,
	AD_START DATE NOT NULL,
	AD_END DATE NOT NULL
	);

	ALTER TABLE AD_POST CONSTRAINT AD_POST_FK1 FOREIGN KEY (AD_ID) REFERENCES AD(AD_ID);
	ALTER TABLE AD_POST CONSTRAINT AD_POST_FK2 FOREIGN KEY (AD_POST_ID) REFERENCES AD_MEDIA(AD_MEDIA_ID);

INSERT INTO AD_POST VALUES(123,001,'AAA',2010-11-01, 2019-01-11);
INSERT INTO AD_POST VALUES(101,002,'BBB',2010-04-07, 2019-05-16);
INSERT INTO AD_POST VALUES(104,003,'CCC',2010-10-06, 2019-09-19);
INSERT INTO AD_POST VALUES(128,004,'DDD',2010-03-02, 2019-12-04);

CREATE TABLE AD_MEDIA(
	AD_MEDIA_ID VARCHAR(10) NOT NULL PRIMARY KEY,
	AD_MEDIA_NAME VARCHAR(10) NOT NULL
)

INSERT INTO AD_MEDIA VALUES('AAA,'FC최');
INSERT INTO AD_MEDIA VALUES('BBB,'FC류');
INSERT INTO AD_MEDIA VALUES('CCC','FC고');
INSERT INTO AD_MEDIA VALUES('DDD','FC이');
