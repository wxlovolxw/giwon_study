데이터 모델링의 이해

정의  	
	WEBSTER 사전
		가설적 일정 양식에 맞춘 표현
		어떤 것에 대한 예비 표현으로 그로부터 최종대상이 구축되도록 하는 계획으로서 			기여 하는 것.
	복잡한 혈실세계를 단순화 시켜 표현하는 것.
	모델이란 사물 또는 사건에 관한 양상이나 관점을 연관된 사람이나 그룹을 위해 명확하게 하	는 것.	
	현실 세계의 추상화된 반영.

특징
	추상화 : 현실세계를 일정한 형식에 맞추어 표현을 한다는 의미
	다양한 현상을 일정한 양식인 표기법에 의해 표기

	단순화 : 복잡한 현실세계를 약속된 규약에 의해 제한된 표기법이나 언어로 표현하여 쉽게 		이해 할 수 있도록 하는 개념

	명확화 : 누구나 이해하기 쉽게 하기 위해 대상에 대한 애매모호함을 제거하고 정확하게 현		상을 기술

	-> 현실세게를 추상화, 단순화, 명확화 하기 위해 일정한 표기법에 의해 표현하는 기법
	정보 시스템 구축에서의 모델링
		계획/분석/설계 단계에서 업무를 분석하고 설계하는데 이용
		구축/운영 단계에서 변경과 관리의 목적으로 이용

관점
	데이터 관점 : 업무가 어떤 데이터와 관련이 있는지(DATA)
		데이터 간의 관계는 무엇인지(WHAT)

	프로세스 관점 : 업무가 실제 하고있는 일은 무엇인지(PROCESS)
		무엇을 모델링 해야 하는지(HOW)
	
	데이터와 프로세스의 상관관점 : 업무가 처리하는 일의 방법에 따라 데이터는 어떻게 영향을 		받고 있는지(INTERACTION)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

데이터 모델의 기본 개념의 이해

업무에 대한 이해 -> 데이터의 모델링(분석 및 설계) -> 데이터베이스 구축(정보 시스템) -> 업무 분석

데이터 모델링의 정의
	
	다양한 정의 - 정보시스템을 구축하기 위해, 해당 업무에 어떤 데이터가 존재하는지 또는 업		무가 필요로 하는 정보는 무엇인지를 분석하는 방법
	기업 업무에 대한 종합적인 이해를 바탕으로 데이터에 본재하는 업무 규칙에 대하여 참 또는 	거짓을 판별할 수 있는 사실을 데이터에 접근하는 방법, 사람, 전산화는 별개의 관점에서 이		를 명확하게 표현하는 추상화 기법.

	실무적 관점에서 데이터 모델링을 하는 주요한 이유 - 정보시스템 구축 대상이 되는 업무 내		용을 정확하게 분석하는 것.
	분석된 모델을 가지고 실제 데이터베이스를 생성하여 개발 및 데이터 관리에 사용하기 위한 		것.
	단지 데이터베이스 구축만이 목적이 아니라 데이터 모델링 자체로 업무를 설명하고 분석하		는 부분에도 중요한 의미를 가지고 있음.

	데이터 모델링이란 - 정보시스템을 구축하기 위한 데이터 관점의 업무분석 기법
	현실세계의 데이터에 대해 약속된 표기법에 의해 표현하는 과정
	데이터베이스를 구축하기 위한 분석/설계의 과정.

데이터 모델이 제공하는 기능

	업무를 분석하는 관점에서 데이터 모델이 제공하는 기능
		시스템을 현재 또는 원하는 모습으로 가시화 하도록 도와준다.
		시스템의 구조와 행동을 명세화 할 수 있게 한다.
		시스템을 구축하는 구조화된 틀을 제공한다.
		시스템을 구축하는 과정에서 결정한 것을 문서화한다.
		다양한 영역에 집중하기 위해 다른 영역의 세부사항은 숨기는 다양한 관점을 제공			한다.
		특정목표에 따라 구체화된 상세 수준의 표현방법을 제공한다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

데이터 모델링의 중요성 및 유의점

파급효과

	시스템 구축이 완성되가는 시점에서의 데이터 모델 변경은 엄청난 파급효과를 발생
	데이터 구조변경에 따른 표준영향분석, 응용영향분석등 많은 영향 분석이 일어난다.
	변경해야할 데이터 형태에 따른 영향도 차이는 있겠지만, 구조변경으로 인한 일련의 변경작		업은 전체 시스템 구축 프로젝트에서 큰 위험요소이다.

복잡한 정보 요구사항의 간결한 표현

	데이터 모델은 구축할 시스템의 정보 요구사항과 한계를 가장 명확하고 간결하게 표현할 수 		있는 도구이다.

데이터 품질

	데이터는 중요한 자산이며, 기간이 오래될수록 활용가치는 더 커진다.
	데이터의 정확성이 떨어짐에 따라 데이터의 활용가치도 떨어진다.
	다음을 유의하여 데이터의 품질을 높여야 한다.
		중복 : 동일 자료의 중복
		비유연성 : 잘못된 데이터 모델은 사소한 업무변화에 대응하지 못하고 유지보수에 			어려움이 따른다.
		비일관성 : 데이터의 모순, 데이터간 상호 연관관계에 대한 정확한 정의로 이러한 			위험을 예방

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

데이터 모델링의 3단계

개념적 데이터 모델링(추상적) - 추상화 수준이 높고 업무중심적이고 포괄적인 수준의 모델링 진행. 전		사적 데이터 모델링. EA(전사 아키텍쳐-기업의 목표와 요구를 잘 지원하기 위해 IT 인프라의 		각 부분들이 어떻게 구성되고 작동되어야 하는가를 체계적으로 기술하는 것) 수립시 많이 사		용

논리적 데이터 모델링 - 시스템으로 구축하고자 하는 업무에 대해 KEY, 속성, 관계 들을 정확하게 표현.
	재사용성이 높음

물리적 데이터 모델링(구체적) - 실제 데이터베이스에 이식할 수 있도록 성능, 저장 등 물리적인 성격을 	고려하여 설계.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

프로젝트 생명주기(LIFE CIRCLE)에서 데이터 모델링

- 일반적으로 계획 또는 분석 단계에서 개념적 데이터 모델링, 분석단계에서는 논리적 모델링, 설계단계에서는 물리적 모델링이 수행된다. 단 현실 프로젝트에서는 개념적 데이터 모델이 생략된 개념/논리 데이터 모델링이 분석단계 때 대부분 수행된다.

정보전략 계획(ISP) / 프로세스개선(PI) / EA
		↓
분석 단계 - 논리/개념 데이터 모델링, 프로세스 모델링
		↓
설계 단계 - 물리데이터 모델링, AP설계. (AP ?????)
		↓
개발 단계 - DB 구축, 변경, 관리, AP 개발
		↓
테스트 단계 - DB 튜닝, AP 테스트
		↓
전환/이행 단계 - DB 전환, AP 설치
	↓
정보 시스템 수축

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

데이터 모델링에서의 데이터 독립성 이해

데이터 독립성의 필요성
	유지보수 비용 증가
	데이터 중복성 증가
	데이터 복잡도 증가
	요구사항 다응 저하

데이터 베이스의 3단계 구조

	외부 단계(외부 스키마)
		↕		<- 논리적 데이터 독립성
	개념적 단계(개념적 스키마)
		↕		<- 물리적 데이터 독립성
	내부적 단계(내부 스키마)

	외부 스키마 : (사용자 VIEW 단계) 여러개의 사용자 관점으로 구성. 개개 사용자 단계로서 사			용자가 보는 개인적 DB 스키마
		DB의 개별 사용자나 응용프로그래머가 접근하는 DB 정의
		접근하는 특성에 따른 스키마 구성.
		- 외부 스키마는 사용자나 응용프로그래머가 각 개인의 입장에서 필요로 하는 데이			터 베이스의 논리적 구조를 정의한 것이다.
		- 외부 스키마는 전체 데이터베이스의 한 논리적인 부분으로 볼 수 있으므로 서브			스키마 라고도 한다.
		- 하나의 데이터베이스 시스템에는 여러개의 외부 스키마가 존재할 수 있으며 하나			의 외부 스키마를 여러개의 응용 프로그램이나 사용자가 공용할 수도 있다.
		- 같은 데이터베이스에 대해서도 서로 다른 관점을 정의할 수 있도록 허용한다.
		- 일반 사용자는 SQL을 이용하여 DB를 쉽게 사용할 수 있다.
		- 응용 프로그래머는 C, JAVA 등의 언어를 사용하여 DB에 접근한다.

	개념 스키마 : (전체적인 VIEW 단계) 하나의 개념적 스키마로 구성. 모든 사용자 관점을 통합		한 조직 전체의 DB를 구성하는 것
		모든 응용 시스템들이나 사용자들의 필요로 하는 데이터를 통합한 조직 전체의 DB			를 기술한 것으로 DB에 저장되는 데이터와 그들간의 관게를 표현한 스키마.
		통합 관점
		- 개념 스키마는 데이터베이스의 전체적인 논리적 구조로, 모든 응용 프로그램이나 		사용자들이 필요로 하는 데이터를 총합한 조직 전체의 데이터베이스로 하나만 존		재한다.
		- 개념 스키마는 개체간의 관계와 제약조전을 나타내고 데이터베이스의 접근 권한, 		보안 및 무결성의 규칙에 관한 명세를 정의한다.
		- 데이터베이스 파일에 저장되는 데이터의 형태를 나타내는 것으로, 단순히 스키마		라고 하면 개념 스키마를 의미한다.
		- 기관이나 조직체의 관점에서 데이터베이스를 정의한 것이다.
		- 데이터베이스 관리자(DBA)에 의해서 구성된다.

	내부 스키마 : (저장 스키마)내부 스키마로 구성. DB가 물리적으로 저장된 형식.
		물리적 장치에서 데이터가 실제적으로 저장되는 방법을 표현하는 스키마
		물리적 저장구조.
		- 내부 스키마는 물리적 저장장치의 입장에서 본 데이터베이스 구조로, 물리적인 		저장장치와 밀접한 계층이다.
		- 내부 스키마는 실제로 데이터베이스에 저장될 레코드의 물리적인 구조를 정의하		고, 저장 데이터 항목의 표현방법, 내부 레코드의 물리적 순서 들을 나타낸다.
		- 시스템 프로그래머나 시스템 설계자가 보는 관점의 스키마이다.

데이터 독립성

	논리적 독립성 : 개념 스키마가 변경되어도 외부 스키마에는 영향을 미치지 않도록 지원하는 		것. 논리적 구조가 변경되어도 응용프로그램에 영향 없음.
		사용자 특성에 맞는 변경 가능, 통합 구조 변경 가능

	물리적 독립성 : 내부 스키마가 변경되어도 외부/개념 스키마는 영향을 받지 않도록 지원하		는 것. 저장장치의 구조변경은 응용프로그램과 개념스키마에 영향 없음.
		물리적 구조 영향 없이 개념 구조 변경 가능. 개념 구조 영향 없이 물리적 구조 변		경 가능

사상 (MAPPING) - ??? 잘 이해 안감

	외부적/개념적 사상(논리적 사상) - 외부적 뷰와 개념적 뷰의 상호 관련성을 정의함.
		사용자가 접근하는 형식에 따라 다른 타입의 필드를 가질 수 있음. 개념적 뷰의 필		드타입은 변화가 없음

	개념적/내부적 사상(물리적 사상) - 개념적 뷰와 저장된 데이터베이스의 상호 관련성을 정의		함
		만약 저장된 데이터베이스 구조가 바뀐다면 개념적/내부적 사상이 바뀌어야 함. 그		래야 개념적 스키마가 그대로 남아있게 됨.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

데이터 모델링의 중요한 세가지 개념

데이터 모델링의 세가지 요소 - ???

	업무가 관여하는 어떤 것(THINGS)

	어떤 것이 가지는 성격(ATTRIBUTES)

	업무가 관여하는 어떤 것 간의 관계(RELATIONSHIPS)

단수와 집합의 명령

	개념 		복수/집합개념		개별/단수개념
			타입/클래스		어커런스/인스턴스

	어떤 것(THINGS)	ENTITY TYPE		ENTITY
			ENTITY			INSTANCE
						OCCURRENCE

	어떤 것 간의 연관	관계(RELATIONSHIP)	패어링(PAIRING)
	(ASSOCIATION)
	
	어떤 것의 성격	속성(ATTRIBUTE)		속성값(ATTRIBUTE VALUE)
	(CHARACTERISTIC)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

데이터 모델링의 이해관계자

이해관계자의 데이터 모델링 중요성 인식

	대부분의 기업에 있어서 정보시스템의 데이터베이스 구조는 사용자에게 숨겨진 형태로 구축되어 왔다. -> 정보의 고립화

	사용자가 데이터 생성 및 수정 -> DBMS 를 통해 정보 검색, 보고서 산출, 비정규 조회 등의 작업.

데이터 모델링의 이해관계자

	프로젝트 개발자(SYSTEM ENGINEER)
	DBA
	현업업무전문가			→ 데이터 모델링 기술/이해
	전문 모델러

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


데이터 모델링의 표기법 ERD(ENTITY RELATIONSHIP DIAGRAM) 의 이해

데이터 모델 표기법

	까마귀 발 모양의 표현기법.
	십자가 모양 -> 포함한다. (부서)
	까마귀 발 모양 -> 소속된다. (직원)

ERD 작업 순서

	- 작업 순서
	엔터티를 그린 후 적절히 배치한다.
	엔터티 간의 관계를 설정한다
	관계명을 기술한다
	관계의 참여도를 기술한다
	관계의 필수 여부를 기술한다.

	-엔터티의 배치
	좌에서 우로, 위에서 아래로
	가장 중요한 고객과 주문을 좌측 상단에 배치
	주문에 따른 출고 및 재고를 주문의 아래에 차례로 배치
	업무의 흐름의 중심이 되는 엔터티를 중앙에 배치
	중심 엔터티와 관계있는 엔터티를 주위에 배치

	-ERD관계의 연결
	서로 관련있는 엔터티 간의 관계를 설정
	초기에는 모두 PK로 속성이 상속되는 식별자 관계를 설정
	중복관계, CYCLE 관계 들을 유의

	-ERD 관계명의 표시
	관계이름은 현재형을 사용 -> 접수하다. 포함하다. 포함되다. 저장하다.
	지나치게 포괄적인 용어는 사용하지 않는다. -> 가진다. 이다.
	실무에서는 생략해도 무방

	-관계차수와 선택성 표시
	1:1 필수 인경우 양쪽에 십자가.(실선)
	1:1 선택 인경우 선택인 쪽에 원.(혹은 선택 아닌쪽에 점선)
	1:N 필수 인경우 N인쪽에 까마귀발
	1:N 선택 인 경우 선택 쪽게 까마귀발 및 원

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

좋은 데이터 모델의 요소

완전성 (COMPLETENESS)
	- 업무에서 필요로 하는 모든 데이터가 모델에 정의되어 있어야 한다.

중복배제 (NON-REDUNDANCY)
	- 하나의 데이터베이스에 동일한 사실은 한번만 기록되어야 한다.
	- 중복시의 문제점 : 저장공간의 낭비 및 일관성 유지를 위해 추가 비용 발생

업무규칙 (BUSINESS RULES)
	- 업무규칙을 데이터모델링에 표현하고, 모든 사용자가 공유한다.
	- 모든 사용자(개발자, 관리자)가 해당 규칙에 대해 동일하게 판단하고 데이터를 조작할 수 있게 된다.
	- 업무규칙이 명확하게 표현되지 않는다면 각각의 사용자가 같은 업무를 다르게 판단할 수 있다.

데이터 재사용 (DATA REUSEABILITY)
	- 통합성
		과거 시스템은 각각의 업무 영역별 데이터 별도 관리
		전사적 관점에서 공통데이터를 도출하고 이를 전 영역에서 사용하기 적절한 형태로 설계해야 한다.
		이러한 데이터 모델이어야 데이터 재사용설을 향상시킬 수 있다
	- 독립성
		과거 시스템은 데이터 모델이 별도로 없이 어플리케이션의 부속품 정도로 여겨졌다.
		이 경우 데이터는 각각이 업무 프로세스레 종속적일 수 밖에 없고, 중복데이터 발생, 일관성 저하, 재사용성이 떨어지게 된다.
		따라서 데이터가 어플리케이션에 독립적으로 설계되어야만 데이터 재사용설을 향상시킬 수 있다.

	- 확장성, 유연성
		정보시스템은 비즈니스 변화에 대해 최적의 적응을 요구한다.
		비즈니스 변화에 유연하게 대처하고 확장이 용이한 데이터 설계가 필요하다.
		확장성, 유연성이 떨어질 경우 작은 업무 변경에도 시스템 기반이 흔들이게 된다.

	- 합리적 균형이 있으면서도 단순하게 분류하는 것
		동일한 계약 업무를 수행하기 위한 테이블수의 차이가 많이 난다면, 적은수의 테이	블은 새로운 변화에 대해서 확장성을 가지고 있으며, 많은 수의 테이블은 변화에 적응하지 못	하고 데이터 모델의 한계로 테이블의 수를 늘린 것이다. 따라서 간결한 모델의 전제조건은 통	합이다.

의사소통 (COMMUNICATION)

	데이터 모델은 대상 업무를 데이터 관점에서 분석하고 설계하여 나오는 최종 산출물이다.
	분석과정에서 도출되는 수많은 업무 규칙들은 최대한 자세하게 표현되어야 한다.
	모든 관련자들이 데이터 모델을 통해 의사소통을 할 수 있도록 자세하게 기술해야 한다.

통합성 (INTEGRATION)
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

엔터티(ENTITY)

개념

	ENTITY : 실체, 객체
	정의의 변화 : 변별할 수 있는 사물 -> 데이터베이스 내에서 변별이 가능한 객체 -> 정보를 		저장할 수 있는 어떤 것 -> 정보가 저장될 수 있는 사람, 장소, 물건, 사건, 그리고 개념 등

	엔터티는 사람, 장소, 물건, 사건, 개념 등의 명사에 해당한다.
	엔터티는 업무상 관리가 필요한 관심사에 해당한다.
	엔터티는 저장이 되기 위한 어떤 것이다.

ENTITY와 INSTANCE
	ENTITY(객체), INSTANCE(사례, 경우)
	-> ENTITY는 INSTANCE의 집합
	
	EX)	엔터티		인스턴스
		과목		수학
				영어
		강사		이춘식
				조시형
		사전		2010-001
				2010-002

ENTITY의 특징

	업무에서 필요로 하는 정보
		반드시 해당 업무에서 필요로 하고, 관리하고자 하는 정보이어야 한다.

	식별이 가능해야 함
		유일한 식별자에 의해 식별이 가능해야 한다.

	INSTANCE의 집합
		영속적으로 존재하는 INSTANCE의 집합
		2개 이상의 INSTANCE의 집합
		1개의 INSTANCE로 이루어진 집합은 ENTITY가 아니다.

	업무 프로세스에 의해 이용
		업무 프로세스가 반드시 그 ENTITY를 이용해야 한다.

	속성을 포함
		ENTITY에는 반드시 속성(ATTRIBUTES)이 포함되어야 한다.
		식별자만 존재하고 일반 속성이 전혀 없는 객체는 ENTITY가 될 수 없다.
		단, 관계 ENTITY의 경우에는 주 식별자 속성만으로도 ENTITY로 인정

	관계의 존재
		ENTITY는 다른 ENTITY와 최소 한개 이상의 관계가 존재하여야 한다.
		데이터 모델링에서 관계를 생략하여 표현하는 경우
		-> 통계를 위한 데이터 (READ ONLY TABLE)
		-> 코드성 ENTITY
			너무 많은 ENTITY들과의 관계로 데이터모델이 복잡해짐
			일반적으로 코드 테이블에는 FK를 설정하지 않는 경우가 대부분이다.
		-> 시스템 처리시 내부적으로 필요한 ENTITY : 로그 테이블

ENTITY의 분류 (그룹화를 통해 효율적으로 도출)

	- 유뮤형에 따른 분류

	1) 유형엔터티(TANGIBLE) - 물리적인 형태가 있고 안정적이며 지속적으로 활용되는 ENTITY. 		업무로부터 ENTITY를 구분하기가 가장 용이하다.
	EX) 사원, 물품, 강사

	2) 개념엔터티(CONCEPTUAL) - 물리적 형태는 존재하지 않고 관리해야할 개념적 정보로 구		분되는 ENTITY
	EX) 조직, 보험상품
	
	3) 사건엔터티(EVENT) - 업무를 수행함에 따라 발생되는 ENTITY. 비교적 발생량이 많으며 각		종 통계자료에 이용될 수 있다.
	EX) 주문, 청구, 미납

	-> 유형(사원, 물품), 사건(주문, 창구), 개념(조직, 장소)

	- 발생시점에 따른 분류

	1) 기본엔터티(FUNDAMENTAL, KEY) - 그 업무에 원래 존재하는 정보로서, 다른 ENTITY와 관		계에 의해 생성되지 않고 독립적으로 생성 가능. 다른 ENTITY로부터 주식별자를 상속받지 않		고 자신의 고유 식별자를 가짐. 
	EX) 사원, 부서, 고객, 상품, 자재

	2) 중심엔터티(MAIN) - 기본 ENTITY로부터 발생되고, 그 업무에 있어서 중요한 역할을 한다. 		데이터량이 많이 발생되고 다른 ENTITY와의 관계를 통해 행위 ENTITY를 생성한다.
	EX) 계약, 사고, 청구, 주문, 매출

	3) 행위엔터티(ACTICE) - 두개 이상의 부모 ENTITY로부터 발생되고 자주 내용이 바뀌거나 		데이터량이 증가된다. 분석초기단계에서는 잘 나타나지 않으며 상세설계나 프로세스와 상관		모델링을 하면서 도출될 수 있다.
	EX) 주문목록, 사원변경이력

	-> 중심(접수, 계약), 기본/키(사원, 부서), 행위(주문내역, 계약진행)

ENTITY의 명명

	가능하면 현업업무에서 사용하는 용어를 사용한다.
	약어를 사용하지 않는다.
	단수명사를 사용한다.
	모든 ENTITY에서 유일하게 이름이 부여되어야 한다.
	생성의미대로 이름을 부여한다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


속성(ATTRIBUTE)

속성의 개념

	- 사전적 의미
	
	사물의 성질, 특징, 또는 본질적인 성질, 그것이 없다면 실체를 생각할 수 없는 것
	본직질적인 속성이란 어떤 사물 또는 개념에 없어서는 안 될 징표의 전부
	징표는 사물이나 개념이 어떤것인지를 나타내고 그것을 다른 것과 구별하는 성질

	- 데이터 모델링의 관점에서의 정의

	업무에서 필요로 하는 인스턴스로 관리하고자 하는 의미상 더이상 분리되지 않는 최고의 데		이터 단위
	업무상 관리하기 위한 최소의 의미 단위
	속성을 엔터티를 설명하고, 속성은 인스턴스의 구성요소

	EX) 생년월일은 그 자체로 의미가 있으므로 속성이라 할 수 있다.
	생년, 생월, 생일 로 분리가 가능하지만 이는 하나의 속성을 관리목적으로 분리한 것일 뿐 각	각을 속성으로 생각하지 않는다.
	이름과 주소는 각각 의미있는 속성이지만 '이름주소'로 묶는다면 하나의 속성이 두가지 의미	를 가지므로 기본속성으로 치지 않는다. '이름주소'가 아닌 '인적사항' 정도로 관리한다면 속	성으로 볼 수 있다.

엔터티, 인스턴스와 속성, 속성값에 대한 내용과 표기법

	- 엔터티, 인스턴스, 속성, 속성값의 관계

	인스턴트는 엔터티에 1:N관계로 속하고, 속성은 인스턴트에 1:N관계로 속한다. 속성과 속성		값은 1:1로 값을 할당한다.

	엔터티 ⊃ 인스턴스 ⊃ 속성 <- 속성값

	- 속성의 표기법
	
	엔터티		과목		강사		사건
		
	속성		과목명(PK)	강사 이름	(PK)	사건 번호(PK)
			교재이름		주소		발생장소
			생성일자		생년월일		발생일지

속성의 특징

	ENTITY와 마찬가지로 해당 업무에서 필요하고 관리하고자 하는 정보
	정규화 이론에 근간하여 정해진 주 식별자에 함수적 종속성을 가져야 한다.
	하나의 속성은 하나의 값만 가진다
	여러개의 값이 있는 경우, 별도의 ENTITY를 이용하여 분리한다.

속성의 분류

	-속성의 특성에 따른 분류
	1) 기본 속성 : 업무로부터 추출한 모든 속성
	2) 설계 속성 : 코드성 데이터, ENTITY 식별용 일련번호
	3) 파생 속성 : 다른 속성에 영향을 받아 발생하는 속성. 계산된 값, 합계, 재고, 잔액
		파생속성은 그 속성이 가지고 있는 계산방법에 대해 반드시 어떤 엔터티에 어떤 속		성에 의해 영향을 받는지 정의가 되어야 한다.
		타 속성에 의해 지속적으로 영향을 받아 자신의 값이 변하는 성질을 가지고 있는 		속성
		파생속성은 꼭 필요한 경우에만 정의하며 업무로직이 속성내부로 스며들지 못하도		록 주의하여야 한다.
		파생속성을 정의한 경우라면 그 값의 정합성을 유지할 수 있도록 해야 한다.
		통계관련 엔터티, 배치작업 수행 관련

		EX)
	
		ENTITY		사원
	
		ATTRIBUTE	사원번호(PK)
				사원명
				우편번호
				주소
				전화번호
				부서코드(FK)
	
		-> 	PK 속성 : 사원번호
			FK 속성 : 부서코드
			일반 속성 : 사원명, 우편번호, 주소, 전화번호

도메인(DOMAIN)

	속성이 가질 수 있는 값의 범위
	
	EX) 	ATTRIBUTE	DOMAIN
		학점		0.0-4.0의 실수
		주소		20자리 문자열

속성의 명명(NAMING)

	용어사전 : 속성 이름을 정확하게 부여하고, 용어의 혼란을 없애기 위함
	도메인의 정의 : 각 속성이 가지는 값의 범위를 명확하게 하기 위해
	속성명 부여 원칙
		해당 업무에서 사용하는 이름을 부여
		서술식 속성명은 사용하지 않는다
		약어 사용은 가급적 제한한다
		전제 데이터 모델이서 유일성을 확보하는 것이 좋다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

관계 (RELATIONSHIP)

관계의 개념

	관계의 정의
		인스턴스 사이의 논리적 연관성으로서 존재 또는 행위로서 서로에게 연관성이 부		여된 상태
	
	관계의 페어링(RELATIONSHIP PARING)
		RELATIONSHIP은 ENTITY 안의 INSTANCE가 개별적으로 관계를 가지는 것(PARING)		이고, 이것의 집합을 관계로 표현한다는 것이다.
		따라서 개별 인스턴스가 각각 다른 종류의 관계를 가지고 있다면 두 ENTITY 사이에 		2개 이상의 관계가 형성 될 수 있다.

		강사ENTITY 1:N(선택) 수강생ENTITY 의 관계
			정성철 	-> 	이춘식
					황종하
			조시형	-> 	황종하

관계의 분류
	
	존재에 의한 관계

		부서ENTITY 1:N(선택) 사원ENTITY
		사원은 부서에 항상 속해있다.

	행위에 의한 관계

		고객ENTITY 1:N(선택) 주문ENTITY
		주문은 고객이 주문을 할 때 발생된다.

관계의 표기법

	관계명(MEMBERSHIP) : 관계의 이름

		1:1의 관계차수
		사원 -> 등록한다. 병역사항 -> 작성된다.

		1:N의 관계차수
		한명의 사원은 한 부서에 소속되고, 한 부서에는 여러 사원을 포함한다.
		부서 -> 포함한다. 사원 -> 소속된다.

	관계차수(DEGREE/CARDINALITY) : 1:1, 1:M, M:N

		주문ENTITY M:N(필수) 제품ENTITY
		주문 -> 포함한다. 제품 -> 포함된다.

	관계선택사양(OPTIOINALITY) : 필수관계, 선택관계

		하나의 주문목록에는 한 개의 목록을 항상 포함하고, 한 목록은 여러 개의 주문 목		록에 의해 포함될 수 있다.

		주문목록ENTITY N(선택):1 목록ENTITY
		주문목록 -> 포함한다. 목록 -> 포함된다.

관계의 정의 및 읽는 방법

	관계 체크 사항
		두개의 ENTITY 사이에 관심있는 연관규칙이 존재하는가?
		두개의 ENTITY 사이에 정보조합이 발생되는가?
		업무기술서, 장표에 관계연결에 대한 규칙이 서술되어 있는가?
		업무기술서, 장표에 관계연결을 가능하게 하는 동가(VERB)가 있는가?

	관계 읽기

		부서ENTITY(포함한다) 1(필수):N(선택) 사원ENTITY

	각각	기준엔터티	관계차수	관련엔터티	선택사양		관계명		
	/하나의	(SOURCE)			(TARGET)		필수/선택

	각각의 	사원은 		한 	부서에		항상		속한다

	각	부서에는		여러	사원이		때때로		소속된다

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


식별자

식별자의 개념
	
	ENTITY 내에서 INSTANCE 들을 구분할 수 있는 구분자

식별자의 특징

	- 유일성 : 주식별자에 의해 ENTITY 내의 모든 INSTANCE들을 유일하게 구분함
	EX) 사원번호가 주식별자로 모든 직원들에 대해 개인별 고유번호로 부여됨

	- 최소성 : 주식별자를 구성하는 속성의 수는 유일성을 만족하는 최고의 수가 되어야 함
	EX) 사원번호만으로도 고유한 구조. 사원분류코드+사원번호는 부적절함

	- 불변성 : 주식별자가 한번 특정 ENTITY에 지정되면 그 값은 변하지 말아야 함
	EX) 사원번호의 값이 변한다는 의미는 이전의 기록이 말소되고 새로운 기록이 발생되는 개념

	- 존재성 ; 주식별자가 지정되면 반드시 데이터값이 존재(NULL 안됨)
	EX) 사원번호 없는 회사직원은 있을 수 없음.	

식별자 분류 및 표기법

	- 식별자 분류

	대표성 여부	
		주식별자 : 엔터티 내에서 각 어커런스를 구분할 수 있는 구분자이며, 타 엔터티와 			참조관계를 연결할 수 있는 식별자
		보조식별자 : 엔터티 내에서 각 어커런스를 구분할 수 있는 구분자이나 대표성을 가			지지 못해 참조관계 연결을 못함.

	스스로 생성 여부
		내부 식별자 : 엔터티 내부에서 스스로 만들어 지는 식별자
		외부 식별자 : 타 엔터티와의 관계를 통해 타 엔터티로부터 받아오는 식별자

	속성의 수
		단일 식별자 : 하나의 속성으로 구성된 식별자
		복합 식별자 : 둘 이상의 속성으로 구성된 식별자
	
	대체성 여부
		본직 식별자 : 업무에 의해 만들어지는 식별자
		인조 식별자 : 업무적으로 만들어지지는 않지만 원조 식별자가 복잡한 구성을 가지			고 있기 때문에 인위적으로 만드는 식별자

	- 식별자 표기법

	ENTITY		부서		사원		교육이력		구매신청

	ATTRIBUTE	부서번호(PK)	사번(PK)		사번(FK)		주문번호
					주민등록번호(AK)	수강일자		사번(FK)
					부서번호(FK)			주문일자
		
	부서의 부서번호(PK) : 주식별자, 내부식별자, 단일식별자, 본질식별자
	
	사원의 사번(PK) : 주식별자, 내부식별자, 단일식별자, 본질식별자
	사원의 주민등록번호(AK) : 보조식별자
	사원의 부서번호(FK) : 외부식별자

	교육이력의 사번(FK), 수강일자 : 주식별자, 본합식별자, 본질식별자
	
	구재신청의 주문번호 : 주식별자, 단일식별자, 내부식별자, 인조식별자(주문번호 = 사번+주문		일자+순번)

주식별자 도출 기준

	- 해당 업무에서 자주 이용되는 속성을 주식별자로 지정하도록 함.
	
		사원번호 -> 주식별자
		주민등록번호 -> 보조식별자

	- 명칭, 내역 들과 같이 이름으로 기술되는 것은 피함
	-> 부서의 이름을 부서명으로 바로 받는 것보다는 부서 코드를 지정하고, 각 코드에 대한 코		드명을 받는 식으로 구성하는 것이 좋다.		

	ENTITY		부서	-> 	부서		업무코드
	ATTRIBUTE	부서명		부서코드		코드
							코드명
	- 속성의 수가 많아지지 않도록 함
	-> 너무 많은 수의 주식별자 속성을 사용하기 보다는 인조식별자를 통해 단순화한 주식별자 	속성을 사용한다.
	EX) 접수번호 = 관할부서+접수일자+일렬번호

식별자관계와 비식별자관계에 따른 식별자 -> ???

	- 식별자관계와 비식별자관계의 결정
		부모 자식간의 관계에 의해 외부식별자가 생성된다.
		이때 부모로부터 받은 외부식별자를 
			자신의 주식별자로 이용할 것인가? -> 식별자관계
			부모와 연결이 되는 속성으로만 이용할 것인가? -> 비식별자관계

	-> 부모 엔터티에서 식별자를 받아 주식별자로 사용하면 식별자 관계
	FK를 받아서 PK로 사용.

	-> 부모 엔터티로 부터 FK들을 받아 주식별자가 아닌 식별자로 사용하면 비식별자 관계

	- 식별자관계로만 설정할 경우의 문제점
		부모에서 자식으로 식별자 관계로 연결되므로 인해 주식별자의 속성 수가 많아지		게 된다.
	
	- 비식별자관계로만 설정할 경우의 문제점
		자주 조회하는 속성 차단으로 인해 데이터 조회의 어려움
		
	- 식별자관계와 비식별자관계의 모델링

		비식별관계 선택 프로세스

		관계분석 -> 관계의 강/약 분석 -> 자식테이블 독립PK필요 -> SQL복잡도 증가
								   개발생산성 저하
				↓약한관계	↓독립PK구성	PK속성단순화↓
					비식별자관계 설정 고려
			
		식별자와 비식별자 관계 비교

	항목		식별자관계			비식별자관계
	목적		강한 연결관계 표현			약한 연결관계 표현

	자식 주식별자	자식 주식별자의 구성 포함		자식 일반속성에 포함
	영향

	표기법		실선 표현				점선 표현

	연결 고려사항	반드시 부모 엔터티 종속		약한 종속관계
			자식 주식별자 구성에 부모 주식별자	자식 주식별자 구성을 독립적으로 
			포함 필요				구성
			상속받은 주식별자속성을 타 엔터티에	자식 주식별자 구성에 부모 주식
			이전 필요				별자 부분 필요
							상속받은 주식별자속성을 타 
							엔터티에 차단 필요
							부모쪽의 관계참여가 선택관계






