
결측 데이터

    - 데이터가 누락된 이유를 아는 것은 나머지 데이터를 올바르게 처리하는데 매우 중요하다.

    - 먼저 결측 데이터의 종류를 살펴봐야 하는데,

    - 이는 결측 데이터의 종류에 따라 다른 접근이 필요하고 데이터를 이해하는데 도움이 되기 때문이다.

///////////////////////////////////////////////////////////////////////////////

결측 데이터의 종류

    - 완전 무작위 결측(MCAR) : 발생한 결측치가 다른 변수들과 아무런 상관이 없는 경우.

        ex) 입력이 안되었다든지 전산 오류로 인한 누락

        -> 보통 제거하고, 대규모 데이터 셋에서 단순 무작위 표본추출을 통해 완벽한 데이터 셋으로 만들 수 있다.

    - 무작위 결측(MAR) : 누락된 자료가 특정 변수와 관계는 있지만, 결과의 값과는 관계가 없는 경우

        ex) 성별에 따라 다를 수는 있지만, 그 정도와는 관계가 없는 경우

    - 비 무작위 결측(MNAR) : 누락된 값이 어떤 변수와 연관이 있는 경우

    ----------------------------------------------------------

    -> 결측치의 매커니즘

        성별(X)의 함수로 체중(Y)를 모델링 한다.

        1) 응답자의 일부는 체중에 대해 말하고, 일부는 말하지 않을 이유가 없다 -> Y가 누락될 확률은 X, Y에 완전히 무관하다.

            -> 완전 무작위

        2) 남성에 비해서 여성이 체중에 대해 공개할 가능성이 높다. -> Y가 누락될 확률이 X의 값에만 의존한다.

            -> 무작위

        3) 체중이 큰 사람은 몸무게를 공개할 확률이 낮다. -> Y가 누락될 확률은 Y의 자체적인 값(관찰되지 않는 값)에 의존한다.

            -> 비 무작위

////////////////////////////////////////////////////////////////////////////////////////////////////////////

결측값 유형 탐색하기

    -> 먼저 어느 변수에 결측값이 있는지 확인해야 한다.

    total = train.isnull().sum().sort_values(ascending=False)   # 각 컬럼별로 null인 값이 얼마나 존재하는지 확인

    percent = (train.isnull().sum())/(train.isnull().count()).sort_values(ascending=False)
    # 각 컬럼별로 총 데이터를 count한 값으로 null값의 비율을 나누어 준다. train.count()를 하면 null값을 제외하고 count하므로
    # df.isnull().count()해야 전체를 셀 수 있다.

    missing_data = pd.concat([total,percent], axis=1, keys=['Total','Percent'])
    # total과 percent를 하나의 데이터프레임으로 묶어준다. 이때 합치는 기준 축이 axis=1(열에 대해서)이고,
    # 각 열의 이름을 'Total','Percent'로 하였다.

    percent.plot(kind='bar', figsize=(8,6), fontsize=10)
    plt.xlabel("", fontsize=20)
    plt.ylabel("", fontsize=20)
    plt.title("Total Missing Value(%)", fontsize=20)


    - 변수의 전체 값들 중에서 얼마나 큰 비율로 결측값이 존재하는지 확인할 수 있다.

    ex)

        Cabin          0.771044
        Age            0.198653
        Embarked       0.002245

        확인 결과 세 컬럼에 대해서 결측값이 존재하였고, Cabin이 매우 높은 확률로 결측값이 발생하였다.

        -> 결측값들 사이에 어떠한 관계가 존재하는지 확인해 봐야 한다.

    --------------------------------------------------------------------------------------------------

    - seaborn과 missingno를 활용한 결측치의 시각화.

        %matplotlib inline  # matplotlib의 실행 결과를 브라우저에서 바로 볼 수 있도록 해준다.
        sns.heatmap(df.isnull(), cbar=False)    # cbar은 색깔의 표현 유무

        -> 각 열들에 대해서 null값이 존재한다면 다른 색으로 표현해주어 전체적으로 어디에 결측치가 존재하고,
        많이 분포하는지 대락적인 플랏을 확인할 수 있다.

    - missingno 라이브러리의 matrix를 활용

        msno.matrix(df.sample())

    - missingno 라이브러리의 heatmap 활용

////////////////////////////////////////////////////////////////////////////////////////////////////////////

결측값들 간의 상관관계 확인해보기.

    import missingno as msno    # 결측치의 시각화를 하는데 이용하는 모듈

    missingdata_df = train.columns[train.isnull().any()].tolist()
    # 컬럼중에 null이 존재하는 컬럼을 list의 형태로 저장한다.

    msno.heatmap(train[missingdata_df], figsize=(8,6))
    # heatmap을 통해서 컬럼의 결측값이 존재하는 컬럼 사이의 관계를 알아볼 수 있다.

    plt.title("Correlation with Missing Values", fontsize=20)

    -----------------------------------------------------------------------------------------------

결측값들과 다른 변수들 사이의 관계 확인 해보기.

    df.corr()   # 데이터 프레임에서 각 컬럼들 간의 상관관계를 얻을 수 있다.

    ex) null값이 많이 존재하는 Cabin 컬럼과 Age 컬럼에서 결측값이 발생하는 것이 다른 컬럼과 관계있는지 확인하기 위해
    null이 아니면 1, null이면 0값을 대입하여 상관계수를 계산해 본다.

        def if_null(x) :
            if x is True: return 0
            else : return 1

        # 위와같이 if_null 함수를 생성해 Age 컬럼과 Cabin 컬럼에서 값이 Null인지 아닌지를 0과 1로 바꾸어 주었다.

        train['hasAge'] = train['Age'].isnull().apply(if_null)  # apply를 통해 각 컬럼별 함수의 적용

        ### 이와같이 함수를 만들어 apply하지 않고 mapping을 통해 만들어 줄 수 있다.

        df_train = train.loc[:,['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'SibSp','Parch', 'Ticket', 'Fare', 'hasCabin', 'hasAge']]

        # 새로운 데이터 프레임을 형성하여 저장하였다. 컬럼값을 받아야 하기 때문에 .loc[:,[]] -> 모든 행, 컬럼은 리스트로 받아서

                    PassengerId	Survived	Pclass	    SibSp	    Parch	    Fare	    hasCabin	hasAge
        hasCabin	0.019919	0.316912	-0.725541	-0.040460	0.036987	0.482075	1.000000	0.144111
        hasAge	    0.020167	0.092197	-0.172933	-0.018958	0.124104	0.100707	0.144111	1.000000

        -> 확인해본 결과, hasCabin은 Pclass와 강한 상관관계, Fare와 어느정도의 상관관계를 가지고 있으며,
        hasAge는 다른 변수들과는 큰 관계가 없는 것으로 나타났다.

    -----------------------------------------------------------------------------------------------

    # Fare과 hasCabin사이에 관계를 파악해보기 위해 박스플랏을 그려보았다.

        data = df_train.loc[:,['Fare','hasCabin']]
        f, ax = plt.subplots(figsize=(8,6))
        fig = sns.boxplot(x='hasCabin', y='Fare', data=data)

        -> Fare은 Numeric이고 hasCabin은 Categoric이므로 box_plot을 통해 확인해 주었다.

    # hasCabin과 Fare의 관계는 모자이크 플랏을 통해 확인해 보았다.

        from statsmodels.graphics.mosaicplot import mosaic

        data2 = df_train.loc[:,['Pclass','hasCabin']]
        mosaic(data2,['hasCabin', 'Pclass'])
        plt.show()

        -> mosaic(df, [column1,column2])    column1이 x축이 되고, column2가 y축이 된다.

    확인해본 결과, Fare이 큰 값을 가질때 Cabin이 있는 경우가 더 컸으며, Fare가 작으면 Cabin이 없는 경우가 많았다.

    또한, Pclass가 1인 경우에는 결측값이 거의 없고 2,3인 경우에는 결측값이 많이 발견되는 것을 확인 하였다.

    따라서 Cabin은 다른 변수와 연관이 있는 무작위 결측으로 판단되며, Enbarked와 Age는 완전 무작위 결측으로 판단된다.

////////////////////////////////////////////////////////////////////////////////////////////////////////////

결측의 원인과 각 원인에 따른 처리 방법

    ### 일반적인 결측치 처리 방법

        결측치의 비율             처리 방법

        10% 미만                  제거 / 어떠한 방법이든 상관없이 대체(imputation)

        10% 이상 20% 미만         hot deck, regression, model based method

        20% 이상                  model based method, regression

    ------------------------------------------------------------------------------------------------------------

    - 결측값을 버리고 관측값만 분석하게 되면 일반적으로 편향(bias)가 생기게 되므로, 추정한 대체값을 분석하게 된다.

    - 관측치 자체를 대체하는 unit imputation과 일부 변수를 대체하는 item imputation이 있다.

        Single imputation

            hot deck - 가장 많은 값을 넣는 것.
            mean imputation - 평균값을 넣는 것.
            regression imputation - 회귀추정을 통해서 값을 넣는 것.

            -> 신뢰도가 과대평가되는 경향이 있다.

        Multiple imputation을 그래서 사용하게 된다.

            여러개의 single imputation을 통해 평가를 하고 가중치를 둬 pool을 통해 합쳐준다.

    ------------------------------------------------------------------------------------------------------------

    예제에서는 세가지 변수에 대해서 결측값이 존재하다.

        - Cabin : 결측치 비율 77.1 -> 다른 변수와 관련이 있으므로 위의 hasCabin과 같은 형태로 바꾸어준다.

        - Age : 결측치 비율 19.8 -> model based method를 이용하여 채워준다.

        - Enbarked : 결측치 비율 0.002 -> 제거하지 않고 다른 방법을 통해 대체해준다.

    ----------------------------------------------------------------------------------------------------

    1. 합리적 접근법

        변수들간의 관계를 이용하여 결측치를 채워넣는 방법.

        	PassengerId	Survived	Pclass	Name	Sex	Age	SibSp	Parch	Ticket	Fare	Cabin	Embarked
        61	62	1	1	Icard, Miss. Amelie	female	38.0	0	0	113572	80.0	B28	NaN
        829	830	1	1	Stone, Mrs. George Nelson (Martha Evelyn)	female	62.0	0	0	113572	80.0	B28	NaN

        동일한 결측치를 갖는 두 행에 대해서 공통점을 찾아봐야 한다.

        공통적으로 Fare가 80이고 Pclass가 1인 것을 활용해 Embarked와의 관계를 알아보자.

        카테고리형과 수치형 사이의 관계이므로 박스플랏을 확인해 보면 된다.

        sns.boxplot(x='Embarked',y='Fare',hue='Pclass', data = df_train)

        # seaborn의 plot은 hue를 통해 한 그래프에서 그 값들을 비교해 보며 볼 수 있다.
        # plot을 그릴때, figsize를 설정해 주자. 그렇지 않으면 플랏이 너무 작아서 잘 볼 수 없다.

        -> Embarked와 Pclass에 따라서 Fare의 값이 정해지는 플랏을 확인 할 수 있다.
        지금 Pclass가 1이므로 어떤 Embarked여야 Fare가 80이 될지 생각해 볼 수 있다.
        일단 Embarked가 S 혹은 C여야 하는데, Pclass에 따른 값의 분포를 확인해보자.

        df_train[np.logical_and(df_train['Embarked']=='S',df_train['Pclass']==1)]['Fare'].describe()
        # Embarked는 S이고, Pclass가1 일때 Fare의 분포는 다음과 같다

            mean      70.364862
            std       58.811278
            min        0.000000
            25%       29.250000
            50%       52.000000
            75%       83.475000

        df_train[np.logical_and(df_train['Embarked']=='C',df_train['Pclass']==1)]['Fare'].describe()
        # Embarked는 C이고, Pclass가1 일때 Fare의 분포는 다음과 같다

            mean     104.718529
            std       99.093935
            min       26.550000
            25%       49.500000
            50%       78.266700
            75%      110.883300

            -> 중앙값이 약 80인 C를 선택해서 대입해 주었다.

            df_train['Embarked'] = df_train['Embarked'].fillna('C')

    2. 완전 제거법

        - 결측치가 포함된 행의 제거

            df_train.dropna(axis=0)

        - 결측치가 포함된 열의 제거

            df_train.dropna(axis=1)

        - 특정 열을 대상으로 제거

            null이 아닌 행들만 선택하고 싶다면

            df_train[df_train['Cabin'].notnull()]

    3. 다중 대체법

        - 하나의 관측치에 2개 이상의 결측치가 존재하는 경우에 사용할 수 있는 처리 방법

            Mice, Amelia, MissForest, Mi 등의 방법이 있다.

            -> Python보다는 R에서 더 잘 작동한다.

        - Mice를 활용한 경우

            누락된 값들을 다른 변수들을 이용하여 예측하고 채워넣는다.
            이와 같은 방식으로 최소 5개의 데이터 세트를 만들고, 각 세트에 대해서 통계모형을 적용한다.
            pool()을 통해 각 분석 결과를 하나로 통합한다.
